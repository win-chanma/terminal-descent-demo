(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const r of a.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function t(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=t(i);fetch(i.href,a)}})();function x(){return Math.random().toString(36).substring(2)+Date.now().toString(36)}function f(l,e){return l.x>=0&&l.x<e.width&&l.y>=0&&l.y<e.height}function b(l){switch(l){case"north":return{x:0,y:-1};case"south":return{x:0,y:1};case"east":return{x:1,y:0};case"west":return{x:-1,y:0}}}function D(l,e){return{x:l.x+e.x,y:l.y+e.y}}function m(l,e){return Math.floor(Math.random()*(e-l+1))+l}function y(l){return l[Math.floor(Math.random()*l.length)]}class I{player;constructor(e){this.player=this.createPlayer(e)}createPlayer(e){return{id:x(),position:{...e},char:"@",color:"#00ff00",type:"player",blocking:!0,visible:!0,level:1,experience:0,experienceToNext:100,health:100,maxHealth:100,energy:100,maxEnergy:100,accessLevel:1,inventory:[],equipment:{}}}getPlayer(){return{...this.player}}getPlayerDirect(){return this.player}getPosition(){return{...this.player.position}}setPosition(e){this.player.position={...e}}move(e){const t=b(e);return D(this.player.position,t)}confirmMove(e){this.player.position={...e}}takeDamage(e){this.player.health=Math.max(0,this.player.health-e)}heal(e){this.player.health=Math.min(this.player.maxHealth,this.player.health+e)}useEnergy(e){return this.player.energy>=e?(this.player.energy-=e,!0):!1}restoreEnergy(e){this.player.energy=Math.min(this.player.maxEnergy,this.player.energy+e)}isAlive(){return this.player.health>0}isDead(){return this.player.health<=0}addItem(e){if(e.stackable){const t=this.player.inventory.find(s=>s.name===e.name&&s.itemType===e.itemType);if(t)return t.quantity+=e.quantity,!0}return this.player.inventory.length<20?(this.player.inventory.push({...e}),!0):!1}removeItem(e,t=1){const s=this.player.inventory.findIndex(a=>a.id===e);if(s===-1)return null;const i=this.player.inventory[s];return i.quantity<=t?(this.player.inventory.splice(s,1),i):(i.quantity-=t,{...i,id:x(),quantity:t})}getInventory(){return[...this.player.inventory]}findItem(e){return this.player.inventory.find(s=>s.id===e)||null}hasItem(e){return this.player.inventory.some(t=>t.id===e)}calculateExperienceToNext(e){return Math.floor(100*Math.pow(1.5,e-1))}addExperience(e){this.player.experience+=e;let t=!1;for(;this.player.experience>=this.player.experienceToNext;)this.player.experience-=this.player.experienceToNext,this.levelUp(),t=!0;return t}levelUp(){this.player.level++,this.player.experienceToNext=this.calculateExperienceToNext(this.player.level),this.player.maxHealth+=10,this.player.maxEnergy+=5,this.player.health=this.player.maxHealth,this.player.energy=this.player.maxEnergy}increaseAccessLevel(){this.player.accessLevel++}getStats(){return{level:this.player.level,experience:this.player.experience,experienceToNext:this.player.experienceToNext,experienceProgress:Math.floor(this.player.experience/this.player.experienceToNext*100),health:this.player.health,maxHealth:this.player.maxHealth,energy:this.player.energy,maxEnergy:this.player.maxEnergy,accessLevel:this.player.accessLevel,inventoryCount:this.player.inventory.length}}serialize(){return JSON.stringify(this.player)}deserialize(e){try{const t=JSON.parse(e);if(typeof t.level=="number"&&typeof t.health=="number"&&typeof t.maxHealth=="number"&&typeof t.position=="object"&&typeof t.position.x=="number"&&typeof t.position.y=="number")this.player={...t};else throw new Error("Invalid player data format")}catch(t){console.error("Failed to deserialize player data:",t),this.player=this.createPlayer({x:0,y:0})}}reset(e){this.player=this.createPlayer(e)}equipWeapon(e){return this.player.equipment.mainHand&&this.addItem(this.player.equipment.mainHand),this.player.equipment.mainHand=e,!0}unequipWeapon(){const e=this.player.equipment.mainHand;return e?(delete this.player.equipment.mainHand,e):null}getEquippedWeapon(){return this.player.equipment.mainHand||null}equipArmor(e){const t=e.slot;if(t==="mainHand"||t==="accessory")return!1;const s=this.player.equipment[t];return s&&this.addItem(s),this.player.equipment[t]=e,!0}unequipArmor(e){if(e==="mainHand"||e==="accessory")return null;const t=this.player.equipment[e];return t?(delete this.player.equipment[e],t):null}getEquippedArmor(e){return e==="mainHand"||e==="accessory"?null:this.player.equipment[e]||null}getTotalDefense(){let e=0;const t=["offHand","head","chest","legs","feet"];for(const s of t){const i=this.getEquippedArmor(s);i&&(e+=i.defense)}return e}getAttackDamage(){const e=this.player.equipment.mainHand,t=10;return e?t+e.damage:t}getAttackAccuracy(){const e=this.player.equipment.mainHand,t=80;return e?Math.min(95,t+e.accuracy):t}getCriticalChance(){const e=this.player.equipment.mainHand,t=5;return e?Math.min(50,t+e.criticalChance):t}rollAttackHit(){const e=this.getAttackAccuracy();return Math.random()*100<e}rollCriticalHit(){const e=this.getCriticalChance();return Math.random()*100<e}rollDamage(){const e=this.getAttackDamage(),t=this.rollCriticalHit();return{damage:t?Math.floor(e*1.5):e,isCritical:t}}}class d{dimensions;level;constructor(e,t=1){this.dimensions=e,this.level=t}generate(e){const t=this.createEmptyTiles(),s=this.generateRooms();if(s.forEach(a=>this.carveRoom(t,a)),this.connectRooms(t,s),s.length>0){const a=s[0];e.position={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)},console.log(`Player placed at (${e.position.x},${e.position.y}) in room at (${a.position.x},${a.position.y})`),console.log(`Generated ${s.length} rooms`)}else console.error("No rooms generated! Player will be stuck in walls.");const i=this.generateEntities(s,e.position);return i.push(e),{level:this.level,dimensions:this.dimensions,tiles:t,rooms:s,entities:i,player:e}}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let s=0;s<this.dimensions.width;s++)e[t][s]=this.createWallTile({x:s,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}generateRooms(){const e=[];for(let r=0;r<50&&e.length<8;r++){const n=m(4,10),h=m(4,10),o=m(1,this.dimensions.width-n-1),c=m(1,this.dimensions.height-h-1),u={position:{x:o,y:c},dimensions:{width:n,height:h},tiles:[],connected:!1};e.some(v=>this.roomsOverlap(u,v))||e.push(u)}return e}roomsOverlap(e,t){return!(e.position.x+e.dimensions.width+1<t.position.x||t.position.x+t.dimensions.width+1<e.position.x||e.position.y+e.dimensions.height+1<t.position.y||t.position.y+t.dimensions.height+1<e.position.y)}carveRoom(e,t){for(let s=t.position.y;s<t.position.y+t.dimensions.height;s++)for(let i=t.position.x;i<t.position.x+t.dimensions.width;i++)f({x:i,y:s},this.dimensions)&&(e[s][i]=this.createFloorTile({x:i,y:s}))}connectRooms(e,t){if(t.length<2)return;for(let i=0;i<t.length-1;i++){const a=t[i],r=t[i+1];this.createCorridor(e,a,r),a.connected=!0,r.connected=!0}const s=Math.floor(t.length/3);for(let i=0;i<s;i++){const a=y(t),r=y(t);a!==r&&this.createCorridor(e,a,r)}}createCorridor(e,t,s){const i={x:t.position.x+Math.floor(t.dimensions.width/2),y:t.position.y+Math.floor(t.dimensions.height/2)},a={x:s.position.x+Math.floor(s.dimensions.width/2),y:s.position.y+Math.floor(s.dimensions.height/2)};m(0,1)===0?(this.carveHorizontalCorridor(e,i.x,a.x,i.y),this.carveVerticalCorridor(e,a.x,i.y,a.y)):(this.carveVerticalCorridor(e,i.x,i.y,a.y),this.carveHorizontalCorridor(e,i.x,a.x,a.y))}carveHorizontalCorridor(e,t,s,i){const a=Math.min(t,s),r=Math.max(t,s);for(let n=a;n<=r;n++)f({x:n,y:i},this.dimensions)&&(e[i][n]=this.createFloorTile({x:n,y:i}))}carveVerticalCorridor(e,t,s,i){const a=Math.min(s,i),r=Math.max(s,i);for(let n=a;n<=r;n++)f({x:t,y:n},this.dimensions)&&(e[n][t]=this.createFloorTile({x:t,y:n}))}generateEntities(e,t){const s=[],i=e.slice(1);i.forEach(n=>{const h=Math.min(.3+this.level*.05,.7);if(Math.random()<h){const c=this.createEnemy(n);s.push(c)}const o=Math.min(.2+this.level*.02,.4);if(Math.random()<o){const c=this.createItem(n);s.push(c)}});const a=s.filter(n=>n.type==="enemy").length,r=Math.max(1,Math.floor(i.length/3));if(a<r){const n=i.filter(o=>!s.some(c=>c.type==="enemy"&&c.position.x>=o.position.x&&c.position.x<o.position.x+o.dimensions.width&&c.position.y>=o.position.y&&c.position.y<o.position.y+o.dimensions.height)),h=r-a;for(let o=0;o<h&&o<n.length;o++){const c=n[o],u=this.createEnemy(c);s.push(u)}}return s}createEnemy(e){const t=m(e.position.x+1,e.position.x+e.dimensions.width-2),s=m(e.position.y+1,e.position.y+e.dimensions.height-2),i=20,a=5,r=Math.floor(this.level*1.5),n=Math.floor(this.level*.8),h=i+r,o=a+n,c=this.getEnemyTypes(),u=y(c);return{id:`enemy_${Date.now()}_${Math.random()}`,position:{x:t,y:s},char:u.char,color:u.color,type:"enemy",blocking:!0,visible:!0,health:h,maxHealth:h,damage:o,aiType:"aggressive"}}getEnemyTypes(){const e=[{char:"G",color:"#ff4444",name:"Gremlin"},{char:"R",color:"#8b4513",name:"Rat"},{char:"S",color:"#32cd32",name:"Slime"}],t=[{char:"O",color:"#ff6600",name:"Orc"},{char:"T",color:"#daa520",name:"Troll"},{char:"W",color:"#483d8b",name:"Wraith"}],s=[{char:"D",color:"#dc143c",name:"Dragon"},{char:"L",color:"#8b008b",name:"Lich"},{char:"M",color:"#ff1493",name:"Minotaur"}];return this.level<=3?e:this.level<=6?[...e,...t]:[...e,...t,...s]}createItem(e){const t=m(e.position.x+1,e.position.x+e.dimensions.width-2),s=m(e.position.y+1,e.position.y+e.dimensions.height-2),i=Math.random();return i<.25?this.createWeapon(t,s):i<.45?this.createArmor(t,s):this.createConsumable(t,s)}createWeapon(e,t){const s=[{char:")",color:"#cccccc",name:"Iron Sword",weaponType:"sword",damage:8+Math.floor(this.level*1.2),accuracy:10,criticalChance:5,range:1},{char:"/",color:"#8b4513",name:"Battle Axe",weaponType:"axe",damage:12+Math.floor(this.level*1.5),accuracy:5,criticalChance:8,range:1},{char:"}",color:"#654321",name:"Hunter Bow",weaponType:"bow",damage:6+Math.floor(this.level*1),accuracy:15,criticalChance:10,range:3},{char:"\\",color:"#4b0082",name:"Magic Staff",weaponType:"staff",damage:5+Math.floor(this.level*.8),accuracy:12,criticalChance:3,range:2},{char:"-",color:"#a9a9a9",name:"Steel Dagger",weaponType:"dagger",damage:4+Math.floor(this.level*.7),accuracy:20,criticalChance:15,range:1}],i=y(s);let a;return this.level>=3&&Math.random()<.3&&(a={type:y(["fire","ice","poison","stun","vampire"]),chance:15+Math.floor(this.level*2),value:Math.floor(this.level*1.5)}),{id:x(),position:{x:e,y:t},char:i.char,color:i.color,type:"item",blocking:!1,visible:!0,name:i.name,description:`A ${i.weaponType} with ${i.damage} damage`,stackable:!1,quantity:1,itemType:"weapon",weaponType:i.weaponType,damage:i.damage,accuracy:i.accuracy,criticalChance:i.criticalChance,range:i.range,...a&&{special:a}}}createArmor(e,t){const s=[{char:"[",color:"#8b4513",name:"Iron Helmet",armorType:"helmet",slot:"head",defense:3+Math.floor(this.level*.8)},{char:"]",color:"#c0c0c0",name:"Steel Chestplate",armorType:"chestplate",slot:"chest",defense:5+Math.floor(this.level*1.2)},{char:"{",color:"#a0522d",name:"Leather Leggings",armorType:"leggings",slot:"legs",defense:4+Math.floor(this.level*1)},{char:"(",color:"#654321",name:"Combat Boots",armorType:"boots",slot:"feet",defense:2+Math.floor(this.level*.6)},{char:"&",color:"#8b7355",name:"Tower Shield",armorType:"shield",slot:"offHand",defense:6+Math.floor(this.level*1.5)}],i=y(s),a=50+Math.floor(this.level*10);return{id:x(),position:{x:e,y:t},char:i.char,color:i.color,type:"item",blocking:!1,visible:!0,name:i.name,description:`${i.armorType} providing ${i.defense} defense`,stackable:!1,quantity:1,itemType:"armor",armorType:i.armorType,defense:i.defense,durability:a,maxDurability:a,slot:i.slot}}createConsumable(e,t){const i=y([{char:"!",color:"#ffff00",name:"Health Potion",description:"Restores 30 health points"},{char:"%",color:"#ff8800",name:"Energy Bar",description:"Restores 20 energy points"},{char:"?",color:"#8800ff",name:"Mystery Scroll",description:"Unknown magical effect"},{char:"+",color:"#00ffff",name:"Healing Herb",description:"Restores 15 health points"},{char:"*",color:"#ff00ff",name:"Energy Core",description:"Restores 50 energy points"}]);return{id:x(),position:{x:e,y:t},char:i.char,color:i.color,type:"item",blocking:!1,visible:!0,name:i.name,description:i.description,stackable:!0,quantity:1,itemType:"consumable"}}static updateFieldOfView(e,t,s=8){for(let i=0;i<e.dimensions.height;i++)for(let a=0;a<e.dimensions.width;a++)e.tiles[i][a].visible=!1;for(let i=-s;i<=s;i++)for(let a=-s;a<=s;a++){const r=t.x+a,n=t.y+i;if(f({x:r,y:n},e.dimensions)&&Math.sqrt(a*a+i*i)<=s){const o=e.tiles[n][r];o.visible=!0,o.explored=!0}}}}class k{data;generator;constructor(){this.data={floors:new Map,currentFloor:1,maxFloor:1},this.generator=new d({width:80,height:50},1)}getDungeonData(){return{floors:new Map(this.data.floors),currentFloor:this.data.currentFloor,maxFloor:this.data.maxFloor}}getCurrentDungeon(){return this.data.floors.get(this.data.currentFloor)}generateInitialFloor(e){this.generator=new d({width:80,height:50},1);const t=this.generator.generate(e);if(t.rooms.length>0){const s=t.rooms[t.rooms.length-1];t.stairsDown={x:s.position.x+Math.floor(s.dimensions.width/2),y:s.position.y+Math.floor(s.dimensions.height/2)};const i=t.stairsDown;t.tiles[i.y]&&t.tiles[i.y][i.x]&&(t.tiles[i.y][i.x]={position:{...i},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}return this.data.floors.set(1,t),this.data.currentFloor=1,this.data.maxFloor=1,t}moveToFloor(e,t){if(!this.data.floors.has(e)){this.generator=new d({width:80,height:50},e);const a=this.generator.generate(t);if(e>1&&a.rooms.length>0){const r=a.rooms[0];a.stairsUp={x:r.position.x+Math.floor(r.dimensions.width/2),y:r.position.y+Math.floor(r.dimensions.height/2)};const n=a.stairsUp;a.tiles[n.y]&&a.tiles[n.y][n.x]&&(a.tiles[n.y][n.x]={position:{...n},type:"stairs",char:"<",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}if(e<10&&a.rooms.length>0){const r=a.rooms[a.rooms.length-1];a.stairsDown={x:r.position.x+Math.floor(r.dimensions.width/2),y:r.position.y+Math.floor(r.dimensions.height/2)};const n=a.stairsDown;a.tiles[n.y]&&a.tiles[n.y][n.x]&&(a.tiles[n.y][n.x]={position:{...n},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}this.data.floors.set(e,a),e>this.data.maxFloor&&(this.data.maxFloor=e)}const s=this.data.floors.get(e),i=this.data.currentFloor;if(this.data.currentFloor=e,e>i&&s.stairsUp?t.position={...s.stairsUp}:e<i&&s.stairsDown&&(t.position={...s.stairsDown}),t.position){const a=s.tiles[t.position.y]?.[t.position.x];(!a||a.blocking)&&(t.position=this.findNearestValidPosition(s,t.position))}return s}findNearestValidPosition(e,t){for(let s=1;s<=5;s++)for(let i=-s;i<=s;i++)for(let a=-s;a<=s;a++){if(Math.abs(i)!==s&&Math.abs(a)!==s)continue;const r={x:t.x+i,y:t.y+a};if(r.x<0||r.x>=e.dimensions.width||r.y<0||r.y>=e.dimensions.height)continue;const n=e.tiles[r.y]?.[r.x];if(n&&!n.blocking)return r}return t}hasStairsAt(e){const t=this.getCurrentDungeon();return t?t.stairsUp&&t.stairsUp.x===e.x&&t.stairsUp.y===e.y?"up":t.stairsDown&&t.stairsDown.x===e.x&&t.stairsDown.y===e.y?"down":null:null}getCurrentFloor(){return this.data.currentFloor}getMaxFloor(){return this.data.maxFloor}saveDungeonState(e){this.data.floors.set(this.data.currentFloor,{...e})}}const E={ja:{gameTitle:"ターミナル・ディセント",gameSubtitle:"ディストピア・ローグライク v1.0",controls:"WASDで移動 | Fで調べる | Iでインベントリ | ESCでメニュー",welcome:"ターミナル・ディセントへようこそ。WASDで移動してください。",cannotMoveThere:"そこには移動できません。",pickedUpItem:"を手に入れた。",nothingToInteract:"調べるものがありません。",enemyAttacks:"グレムリンが攻撃してきた！",youDied:"あなたは死亡しました。",gameOver:"ゲームオーバー。",levelCleared:"フロアクリア！勝利です！",gamePaused:"ゲームを一時停止しました。ESCで再開。",gameResumed:"ゲームを再開しました。",menuNotImplemented:"メニューは未実装です。",searchingForExit:"ターミナル・ディセントを開始。出口を探索中...",playerAttacks:"を攻撃した！",enemyDefeated:"を倒した！",level:"レベル",health:"HP",energy:"エネルギー",accessLevel:"アクセス権",turn:"ターン",inventoryFull:"インベントリが満杯です。",inventoryEmpty:"インベントリは空です。",useItem:"を使用した。"},en:{gameTitle:"TERMINAL DESCENT",gameSubtitle:"DYSTOPIAN ROGUELIKE v1.0",controls:"Use WASD to move | Press F to interact | I for inventory | ESC for menu",welcome:"Welcome to Terminal Descent. Use WASD to move.",cannotMoveThere:"You cannot move there.",pickedUpItem:"You picked up ",nothingToInteract:"There is nothing here to interact with.",enemyAttacks:"The gremlin attacks you!",youDied:"You have died.",gameOver:"Game Over.",levelCleared:"Level cleared! You win!",gamePaused:"Game paused. Press ESC to resume.",gameResumed:"Game resumed.",menuNotImplemented:"Menu not implemented yet.",searchingForExit:"Terminal Descent initiated. Searching for exit...",playerAttacks:"You attack ",enemyDefeated:"You defeated ",level:"Level",health:"Health",energy:"Energy",accessLevel:"Access",turn:"Turn",inventoryFull:"Inventory is full.",inventoryEmpty:"Your inventory is empty.",useItem:"You used "}};class P{currentLanguage="ja";setLanguage(e){this.currentLanguage=e}getCurrentLanguage(){return this.currentLanguage}getMessage(e){return E[this.currentLanguage][e]}getMessages(){return E[this.currentLanguage]}}const T=new P,p=l=>T.getMessage(l);function A(l){const e=l.equipment;return{weapon:e.mainHand?.name||"なし",head:e.head?.name||"なし",chest:e.chest?.name||"なし",legs:e.legs?.name||"なし",feet:e.feet?.name||"なし",shield:e.offHand?.name||"なし"}}function $(l){let e=0;return["head","chest","legs","feet","offHand"].forEach(s=>{const i=l.equipment[s];i&&"defense"in i&&(e+=i.defense)}),e}function R(l){const t=l.equipment.mainHand;return 10+(t&&"damage"in t?t.damage:0)}function H(l){const e=$(l),t=R(l),s=Object.values(l.equipment).filter(i=>i!==void 0).length;return{totalDefense:e,attackPower:t,equipmentCount:s}}class F{canvas;ctx;config;camera;constructor(e,t){this.canvas=e;const s=e.getContext("2d");if(!s)throw new Error("Failed to get 2D rendering context");this.ctx=s,this.config=t,this.camera={position:{x:0,y:0},viewport:t.viewport,target:{x:0,y:0}},this.setupCanvas()}setupCanvas(){this.canvas.width=this.config.viewport.width,this.canvas.height=this.config.viewport.height,this.ctx.imageSmoothingEnabled=!1,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.textBaseline="middle"}clear(){this.ctx.fillStyle=this.config.colors.background,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}updateCamera(e){this.camera.target=e;const t=Math.floor(this.config.viewport.width/this.config.tileSize),s=Math.floor(this.config.viewport.height/this.config.tileSize);this.camera.position={x:e.x-Math.floor(t/2),y:e.y-Math.floor(s/2)}}worldToScreen(e){return{x:(e.x-this.camera.position.x)*this.config.tileSize,y:(e.y-this.camera.position.y)*this.config.tileSize}}isVisible(e){const t=this.worldToScreen(e);return t.x>=-this.config.tileSize&&t.x<this.config.viewport.width&&t.y>=-this.config.tileSize&&t.y<this.config.viewport.height}renderCharacter(e,t,s,i){i&&(this.ctx.fillStyle=i,this.ctx.fillRect(t.x,t.y,this.config.tileSize,this.config.tileSize)),this.ctx.fillStyle=s,this.ctx.fillText(e,t.x+this.config.tileSize/2,t.y+this.config.tileSize/2)}renderTile(e){if(!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);if(!e.explored)return;const s=e.visible?e.color:this.config.colors.explored,i=e.visible?e.backgroundColor:void 0;this.renderCharacter(e.char,t,s,i)}renderEntity(e){if(!e.visible||!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);this.renderCharacter(e.char,t,e.color,e.backgroundColor)}render(e){if(this.clear(),e.status==="welcome"){this.renderWelcomeScreen(e);return}const t=e.currentDungeon;this.updateCamera(t.player.position);for(let s=0;s<t.dimensions.height;s++)for(let i=0;i<t.dimensions.width;i++){const a=t.tiles[s][i];a&&this.renderTile(a)}t.entities.filter(s=>s.type!=="player").forEach(s=>this.renderEntity(s)),this.renderEntity(t.player),this.renderUI(e),e.overlay.isVisible&&this.renderOverlay(e)}renderUI(e){const t=e.player,s=10,i=20;if(this.ctx.save(),this.ctx.font=`14px ${this.config.fontFamily}`,this.ctx.textAlign="left",this.ctx.fillStyle=this.config.colors.text,[`${p("level")}: ${t.level}`,`${p("health")}: ${t.health}/${t.maxHealth}`,`${p("energy")}: ${t.energy}/${t.maxEnergy}`,`${p("accessLevel")}: ${t.accessLevel}`,`${p("turn")}: ${e.turn}`].forEach((r,n)=>{this.ctx.fillText(r,s,s+n*i)}),e.messages.length>0){const r=Math.floor(this.canvas.height*.6/i),n=e.messages.slice(-r);n.forEach((h,o)=>{const c=this.canvas.height-s-(n.length-o)*i;this.ctx.fillText(h,s,c)})}this.ctx.restore()}getCameraPosition(){return{...this.camera.position}}screenToWorld(e){return{x:Math.floor(e.x/this.config.tileSize)+this.camera.position.x,y:Math.floor(e.y/this.config.tileSize)+this.camera.position.y}}renderOverlay(e){switch(this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),e.overlay.type){case"inventory":this.renderInventoryOverlay(e);break;case"status":this.renderStatusOverlay(e);break}this.ctx.restore()}renderInventoryOverlay(e){const s=e.player.inventory,i=400,a=Math.min(500,s.length*30+100),r=(this.canvas.width-i)/2,n=(this.canvas.height-a)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(r,n,i,a),this.ctx.strokeRect(r,n,i,a),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText("=== インベントリ ===",r+20,n+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText("数字キー(1-9)でアイテム使用 | Iキーで閉じる",r+20,n+50),this.ctx.font="14px Courier New, monospace";const h=n+80;s.length===0?(this.ctx.fillStyle="#666666",this.ctx.fillText("インベントリが空です",r+20,h)):s.forEach((o,c)=>{const u=h+c*25;e.overlay.selectedIndex===c&&(this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.fillRect(r+10,u-15,i-20,20)),this.ctx.fillStyle="#ffff00",this.ctx.fillText(`${c+1}.`,r+20,u),this.ctx.fillStyle=o.color,this.ctx.fillText(o.char,r+50,u),this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${o.name} x${o.quantity}`,r+70,u),this.ctx.font="10px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(o.description,r+70,u+12),this.ctx.font="14px Courier New, monospace"})}renderStatusOverlay(e){const t=e.player,s=350,i=400,a=(this.canvas.width-s)/2,r=(this.canvas.height-i)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(a,r,s,i),this.ctx.strokeRect(a,r,s,i),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText("=== ステータス ===",a+20,r+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText("Sキーで閉じる",a+20,r+50),this.ctx.font="14px Courier New, monospace",this.ctx.fillStyle="#00ff00";const n=[{label:"レベル",value:`${t.level}`,color:"#ffff00"},{label:"HP",value:`${t.health}/${t.maxHealth}`,color:t.health<t.maxHealth*.3?"#ff4444":"#00ff00"},{label:"エネルギー",value:`${t.energy}/${t.maxEnergy}`,color:t.energy<t.maxEnergy*.3?"#ffaa00":"#00ff00"},{label:"経験値",value:`${t.experience}/${t.experienceToNext}`,color:"#88ff88"},{label:"アクセスレベル",value:`${t.accessLevel}`,color:"#00ffff"},{label:"ターン",value:`${e.turn}`,color:"#888888"},{label:"スコア",value:`${e.score}`,color:"#ffff00"}],h=r+80;n.forEach((M,C)=>{const w=h+C*25;this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${M.label}:`,a+20,w),this.ctx.fillStyle=M.color,this.ctx.fillText(M.value,a+150,w)}),this.ctx.font="16px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.ctx.fillText("=== 装備 ===",a+20,r+260),this.renderEquipmentDetails(t,a+20,r+285);const o=200,c=12,u=r+320;this.ctx.fillStyle="#333333",this.ctx.fillRect(a+20,u,o,c),this.ctx.fillStyle=t.health<t.maxHealth*.3?"#ff4444":"#00ff00";const S=t.health/t.maxHealth;this.ctx.fillRect(a+20,u,o*S,c),this.ctx.fillStyle="#333333",this.ctx.fillRect(a+20,u+20,o,c),this.ctx.fillStyle=t.energy<t.maxEnergy*.3?"#ffaa00":"#00aaff";const v=t.energy/t.maxEnergy;this.ctx.fillRect(a+20,u+20,o*v,c)}renderEquipmentDetails(e,t,s){this.ctx.font="12px Courier New, monospace";const i=A(e),a=[{key:"weapon",label:"武器"},{key:"head",label:"頭"},{key:"chest",label:"胸"},{key:"legs",label:"脚"},{key:"feet",label:"足"},{key:"shield",label:"盾"}];let r=s;a.forEach(h=>{const o=i[h.key];this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${h.label}:`,t,r),this.ctx.fillStyle=o!=="なし"?"#ffff00":"#666666",this.ctx.fillText(o,t+60,r),r+=15}),r+=10,this.ctx.fillStyle="#00ff00",this.ctx.fillText("=== 装備統計 ===",t,r),r+=20;const n=H(e);this.ctx.fillStyle="#88ff88",this.ctx.fillText(`総防御力: ${n.totalDefense}`,t,r),r+=15,this.ctx.fillStyle="#ff8888",this.ctx.fillText(`攻撃力: ${n.attackPower}`,t,r)}resize(e){this.config.viewport=e,this.canvas.width=e.width,this.canvas.height=e.height,this.setupCanvas()}renderWelcomeScreen(e){const t=this.canvas.width/2,s=this.canvas.height/2;if(e.welcome.showPrologue){this.renderPrologue();return}this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize*2}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.fillText("ターミナル・ディセント",t,s-120),this.ctx.fillText("Terminal Descent",t,s-90),this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.fillText("ナイトシティ地下施設からの脱出劇",t,s-50),[{key:"start",text:"[スタート] ゲームを開始"},{key:"tutorial",text:"[チュートリアル] 操作を学ぶ"},{key:"settings",text:"[設定] オプション設定"}].forEach((a,r)=>{const n=s+r*30,h=e.welcome.selectedOption===a.key;this.ctx.fillStyle=h?this.config.colors.player:this.config.colors.text,h&&(this.ctx.fillText(">",t-150,n),this.ctx.fillText("<",t+150,n)),this.ctx.fillText(a.text,t,n)}),this.ctx.fillStyle=this.config.colors.explored,this.ctx.fillText("↑↓ または WS: 選択    Enter または F: 決定",t,s+120),e.welcome.selectedOption||(e.welcome.selectedOption="start")}renderPrologue(){const e=this.canvas.width/2,t=this.canvas.height/2;this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",["年は2087年。ナイトシティの地下研究施設で","あなたは目を覚ました。","","警備システムが暴走し、施設は封鎖された。","生き残るには地上への脱出しかない。","","装備を集め、敵を避け、10階層の地下から","脱出せよ。","","[Enterキーで開始]"].forEach((i,a)=>{this.ctx.fillText(i,e,t-100+a*25)})}}class O{keyMapping;pressedKeys;actionCallbacks;element;keyRepeatTimer;REPEAT_DELAY=300;REPEAT_RATE=100;constructor(e){this.element=e,this.pressedKeys=new Set,this.actionCallbacks=new Map,this.keyRepeatTimer=new Map,this.keyMapping={KeyW:"move_north",ArrowUp:"move_north",ArrowDown:"move_south",KeyA:"move_west",ArrowLeft:"move_west",KeyD:"move_east",ArrowRight:"move_east",KeyF:"interact",Enter:"interact",Space:"attack",KeyX:"attack",KeyI:"inventory",KeyS:"status",Digit1:"use_item_1",Digit2:"use_item_2",Digit3:"use_item_3",Digit4:"use_item_4",Digit5:"use_item_5",Digit6:"use_item_6",Digit7:"use_item_7",Digit8:"use_item_8",Digit9:"use_item_9",Escape:"pause",KeyM:"menu"},this.setupEventListeners()}setupEventListeners(){this.element.tabIndex<0&&(this.element.tabIndex=0),this.element.focus();const e=s=>{s.preventDefault();const i=s.code;if(!this.pressedKeys.has(i)){this.pressedKeys.add(i),this.handleKeyPress(i);const a=this.keyMapping[i];this.isMovementAction(a)&&this.setupKeyRepeat(i)}},t=s=>{s.preventDefault();const i=s.code;this.pressedKeys.delete(i),this.clearKeyRepeat(i)};this.element.addEventListener("keydown",e),this.element.addEventListener("keyup",t),this.element.addEventListener("blur",()=>{this.element.focus()}),this.element.addEventListener("click",()=>{this.element.focus()})}handleKeyPress(e){const t=this.keyMapping[e];if(t&&this.actionCallbacks.has(t)){const s=this.actionCallbacks.get(t);s&&s()}}onAction(e,t){this.actionCallbacks.set(e,t)}offAction(e){this.actionCallbacks.delete(e)}setKeyMapping(e){Object.assign(this.keyMapping,e)}getKeyMapping(){return{...this.keyMapping}}isKeyPressed(e){return this.pressedKeys.has(e)}isMovementKeyPressed(){return["KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].some(t=>this.pressedKeys.has(t))}getPressedKeys(){return Array.from(this.pressedKeys)}isMovementAction(e){return e==="move_north"||e==="move_south"||e==="move_east"||e==="move_west"}setupKeyRepeat(e){this.clearKeyRepeat(e);const t=setTimeout(()=>{const s=setInterval(()=>{this.pressedKeys.has(e)?this.handleKeyPress(e):this.clearKeyRepeat(e)},this.REPEAT_RATE);this.keyRepeatTimer.set(e,s)},this.REPEAT_DELAY);this.keyRepeatTimer.set(e,t)}clearKeyRepeat(e){const t=this.keyRepeatTimer.get(e);t!==void 0&&(clearTimeout(t),clearInterval(t),this.keyRepeatTimer.delete(e))}clearPressedKeys(){this.pressedKeys.clear(),this.keyRepeatTimer.forEach(e=>{clearTimeout(e),clearInterval(e)}),this.keyRepeatTimer.clear()}disable(){this.clearPressedKeys()}focus(){this.element.focus()}getActionForKey(e){return this.keyMapping[e]}getKeyForAction(e){for(const[t,s]of Object.entries(this.keyMapping))if(s===e)return t}keyToDisplayString(e){return{KeyW:"W",KeyA:"A",KeyS:"S",KeyD:"D",KeyF:"F",KeyI:"I",KeyM:"M",Enter:"Enter",Digit1:"1",Digit2:"2",Digit3:"3",Digit4:"4",Digit5:"5",Digit6:"6",Digit7:"7",Digit8:"8",Digit9:"9",ArrowUp:"↑",ArrowDown:"↓",ArrowLeft:"←",ArrowRight:"→",Space:"Space",Escape:"Esc"}[e]||e}}class g{gameState;playerController;dungeonGenerator;dungeonManager;renderer;inputHandler;lastUpdateTime;animationFrameId;attackMode=!1;static ITEM_EFFECTS={HEALTH_POTION:30,HEALING_HERB:15,ENERGY_BAR:20,ENERGY_CORE:50,MYSTERY_SCROLL_HEALTH:20,MYSTERY_SCROLL_ENERGY:30,MYSTERY_SCROLL_SCORE:50};constructor(e){this.playerController=new I({x:0,y:0}),this.dungeonGenerator=new d({width:80,height:50},1),this.dungeonManager=new k;const t={tileSize:16,fontSize:14,fontFamily:"Courier New, monospace",viewport:{width:e.width,height:e.height},colors:{background:"#000000",text:"#00ff00",player:"#00ff00",enemy:"#ff4444",wall:"#444444",floor:"#666666",explored:"#333333",visible:"#ffffff"}};this.renderer=new F(e,t),this.inputHandler=new O(e),this.setupInputHandlers(),this.gameState=this.createInitialGameState(),this.lastUpdateTime=0}createInitialGameState(){const e=this.playerController.getPlayer(),t=this.dungeonManager.generateInitialFloor(e);return this.playerController.setPosition(t.player.position),d.updateFieldOfView(t,t.player.position),{status:"welcome",currentDungeon:t,dungeonData:this.dungeonManager.getDungeonData(),player:t.player,turn:0,score:0,messages:[],tutorial:{isActive:!1,currentStep:"welcome",stepProgress:0,showHint:!1,hintText:""},welcome:{showPrologue:!0,selectedOption:null},overlay:{type:"none",isVisible:!1},levelCleared:!1}}setupInputHandlers(){this.inputHandler.onAction("move_north",()=>this.handleDirectionalInput("north")),this.inputHandler.onAction("move_south",()=>this.handleDirectionalInput("south")),this.inputHandler.onAction("move_east",()=>this.handleDirectionalInput("east")),this.inputHandler.onAction("move_west",()=>this.handleDirectionalInput("west")),this.inputHandler.onAction("attack",()=>this.toggleAttackMode()),this.inputHandler.onAction("interact",()=>this.handleInteract()),this.inputHandler.onAction("inventory",()=>this.toggleInventoryOverlay()),this.inputHandler.onAction("status",()=>this.toggleStatusOverlay());for(let e=1;e<=9;e++)this.inputHandler.onAction(`use_item_${e}`,()=>this.handleItemAction(e-1));this.inputHandler.onAction("pause",()=>this.togglePause()),this.inputHandler.onAction("menu",()=>this.showMenu())}handleDirectionalInput(e){if(this.gameState.status==="welcome"){this.handleWelcomeNavigation(e);return}this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||this.gameState.overlay.isVisible||(this.attackMode?this.handleAttack(e):this.handlePlayerMove(e))}toggleAttackMode(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||this.gameState.overlay.isVisible||(this.attackMode=!this.attackMode,this.attackMode?this.addMessage("攻撃モード：方向キーで攻撃方向を選択"):this.addMessage("移動モード"),this.gameState.status==="tutorial"&&this.updateTutorialProgress("combat"))}handleAttack(e){this.playerController.getPosition();const t=this.playerController.move(e),s=this.getEnemyAt(t);s?(this.handleCombat(s),this.processTurn()):this.addMessage("そこには敵がいません。"),this.attackMode=!1,this.addMessage("移動モード")}handlePlayerMove(e){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;this.playerController.getPosition();const t=this.playerController.move(e);this.isValidMove(t)?(this.playerController.confirmMove(t),this.gameState.player.position=t,d.updateFieldOfView(this.gameState.currentDungeon,t),this.gameState.status==="tutorial"&&this.updateTutorialProgress("movement"),this.processTurn()):this.addMessage(p("cannotMoveThere"))}isValidMove(e){const t=this.gameState.currentDungeon;return!f(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(a=>a.position.x===e.x&&a.position.y===e.y&&a.blocking&&a.type!=="player"&&a.type!=="enemy")}getEnemyAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="enemy")}handleCombat(e){if(!this.playerController.rollAttackHit()){this.addMessage(`${e.char}への攻撃が外れた！`);return}const{damage:t,isCritical:s}=this.playerController.rollDamage();if("health"in e&&"maxHealth"in e){if(e.health-=t,s?this.addMessage(`クリティカルヒット！ ${e.char}に${t}ダメージ！ HP: ${Math.max(0,e.health)}/${e.maxHealth}`):this.addMessage(`${e.char}に${t}ダメージ！ HP: ${Math.max(0,e.health)}/${e.maxHealth}`),e.health<=0){const i=this.gameState.currentDungeon.entities.findIndex(a=>a.id===e.id);if(i!==-1){this.gameState.currentDungeon.entities.splice(i,1),this.addMessage(`${e.char}${p("enemyDefeated")}`);const a=this.calculateExperienceReward(e),r=this.playerController.addExperience(a);this.gameState.score+=10,this.addMessage(`経験値 +${a}`),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,r&&this.addMessage(`レベルアップ！ Lv.${this.gameState.player.level}`)}}}else{s?this.addMessage(`クリティカルヒット！ ${e.char}に${t}ダメージ！`):this.addMessage(`${e.char}に${t}ダメージ！`);const i=this.gameState.currentDungeon.entities.findIndex(a=>a.id===e.id);if(i!==-1){this.gameState.currentDungeon.entities.splice(i,1),this.addMessage(`${e.char}${p("enemyDefeated")}`);const a=this.calculateExperienceReward(e),r=this.playerController.addExperience(a);this.gameState.score+=10,this.addMessage(`経験値 +${a}`),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,r&&this.addMessage(`レベルアップ！ Lv.${this.gameState.player.level}`)}}}calculateExperienceReward(e){const s={G:25,R:20,S:22,O:40,T:45,W:50,D:100,L:90,M:85}[e.char]||20,i="maxHealth"in e?Math.floor(e.maxHealth/10):0;return s+i}handleInteract(){if(this.gameState.status==="welcome"){this.handleWelcomeInteract();return}if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||this.gameState.overlay.isVisible)return;const e=this.gameState.player.position,t=this.gameState.currentDungeon,s=this.dungeonManager.hasStairsAt(e);if(s){this.handleStairsInteraction(s);return}const i=t.entities.find(a=>a.position.x===e.x&&a.position.y===e.y&&a.type==="item");if(i){const a=i;if(this.playerController.addItem(a)){this.addMessage(`${i.char}${a.name}を拾った`);const r=t.entities.findIndex(n=>n.id===i.id);r!==-1&&t.entities.splice(r,1),this.processTurn()}else this.addMessage("インベントリが満杯だ")}else this.addMessage("相互作用できるものがない")}handleStairsInteraction(e){const t=this.dungeonManager.getCurrentFloor();let s;if(e==="down")s=t+1,this.addMessage(`階層${s}へ降りる...`);else{if(s=t-1,s<1){this.addMessage("これ以上上には行けません。");return}this.addMessage(`階層${s}へ戻る...`)}const i=this.attackMode;this.dungeonManager.saveDungeonState(this.gameState.currentDungeon);const a=this.playerController.getPlayer(),r=this.dungeonManager.moveToFloor(s,a);this.gameState.currentDungeon=r,this.gameState.dungeonData=this.dungeonManager.getDungeonData(),this.gameState.player.position=a.position,this.gameState.currentDungeon.player=this.gameState.player,this.gameState.levelCleared=!1,this.playerController.setPosition(a.position),this.attackMode=i,d.updateFieldOfView(r,a.position),this.addMessage(`階層${s}に到着しました。`)}getCurrentEquipmentDisplay(){const t=this.playerController.getPlayer().equipment,s=[];if(t.mainHand){const r=t.mainHand;s.push(`右手: ${r.char} ${r.name}`),s.push(`      効果: 攻撃力+${r.damage}, 命中率+${r.accuracy}%`)}else s.push("右手: (装備なし)");[{slot:"head",name:"頭"},{slot:"chest",name:"胸"},{slot:"legs",name:"脚"},{slot:"feet",name:"足"},{slot:"offHand",name:"左手"}].forEach(r=>{const n=t[r.slot];n?(s.push(`${r.name}: ${n.char} ${n.name}`),s.push(`      効果: 防御力+${n.defense}`)):s.push(`${r.name}: (装備なし)`)});const a=this.playerController.getTotalDefense();return s.push(`総防御力: ${a}`),s}showInventory(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.playerController.getPlayer().inventory;if(e.length===0){this.addMessage(p("inventoryEmpty")),this.gameState.status==="tutorial"&&this.updateTutorialProgress("inventory");return}const t=[];t.push("=== インベントリ ==="),e.forEach((i,a)=>{if(t.push(`[${a+1}] ${i.char} ${i.name} x${i.quantity}`),t.push(`     ${i.description}`),i.itemType==="weapon"){const r=i;t.push(`     効果: 攻撃力+${r.damage}, 命中率+${r.accuracy}%`)}else if(i.itemType==="armor"){const r=i;t.push(`     効果: 防御力+${r.defense}`)}}),t.push("=== 現在の装備 ==="),this.getCurrentEquipmentDisplay().forEach(i=>{t.push(i)}),t.push("=== 使用方法 ==="),t.push("数字キー(1-9)でアイテム使用/装備"),t.push("例: 1キー = [1]番目のアイテム"),this.addMessages(t),this.gameState.status==="tutorial"&&this.updateTutorialProgress("inventory")}useItem(e){this.useItemInternal(e,!0)}useItemInternal(e,t){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const s=this.playerController.getPlayer().inventory;if(e<0||e>=s.length){this.addMessage(`スロット${e+1}にアイテムがありません。`);return}const i=s[e];this.applyItemEffect(i)&&(this.playerController.removeItem(i.id,1),this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment")),t&&this.processTurn()}applyItemEffect(e){if(!e)return this.addMessage("無効なアイテムです。"),!1;if(!e.char||!e.name)return this.addMessage("無効なアイテムです。"),!1;if(e.itemType==="weapon")return this.equipWeapon(e);if(e.itemType==="armor")return this.equipArmor(e);switch(e.char){case"!":return this.playerController.heal(g.ITEM_EFFECTS.HEALTH_POTION),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${e.name}${p("useItem")} HP+${g.ITEM_EFFECTS.HEALTH_POTION}回復！`),!0;case"+":return this.playerController.heal(g.ITEM_EFFECTS.HEALING_HERB),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${e.name}${p("useItem")} HP+${g.ITEM_EFFECTS.HEALING_HERB}回復！`),!0;case"%":return this.playerController.restoreEnergy(g.ITEM_EFFECTS.ENERGY_BAR),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${e.name}${p("useItem")} エネルギー+${g.ITEM_EFFECTS.ENERGY_BAR}回復！`),!0;case"*":return this.playerController.restoreEnergy(g.ITEM_EFFECTS.ENERGY_CORE),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${e.name}${p("useItem")} エネルギー+${g.ITEM_EFFECTS.ENERGY_CORE}回復！`),!0;case"?":const t=[()=>(this.playerController.heal(g.ITEM_EFFECTS.MYSTERY_SCROLL_HEALTH),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,"HP回復効果が発動！"),()=>(this.playerController.restoreEnergy(g.ITEM_EFFECTS.MYSTERY_SCROLL_ENERGY),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,"エネルギー回復効果が発動！"),()=>(this.gameState.score+=g.ITEM_EFFECTS.MYSTERY_SCROLL_SCORE,"スコアボーナス+50！"),()=>{const a=this.gameState.currentDungeon,r=this.gameState.player.position;return d.updateFieldOfView(a,r,15),"マップ探索効果が発動！"}],s=t[Math.floor(Math.random()*t.length)],i=s();return this.addMessage(`${e.name}${p("useItem")} ${i}`),!0;default:return this.addMessage(`${e.name}は使用できません。`),!1}}equipWeapon(e){return this.playerController.equipWeapon(e)?(this.addMessage(`${e.name}を装備しました。`),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,!0):(this.addMessage("武器を装備できませんでした。"),!1)}equipArmor(e){return this.playerController.equipArmor(e)?(this.addMessage(`${e.name}を装備しました。`),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,!0):(this.addMessage("防具を装備できませんでした。"),!1)}processTurn(){this.gameState.turn++,this.processEnemies(),this.checkGameState()}updateTutorialProgress(e){const t=this.gameState.tutorial;if(e)switch(t.currentStep){case"welcome":e==="movement"&&this.advanceTutorialStep("movement");break;case"movement":e==="movement"&&(t.stepProgress++,t.stepProgress>=3&&this.advanceTutorialStep("combat"));break;case"combat":e==="combat"&&this.advanceTutorialStep("inventory");break;case"inventory":e==="inventory"&&this.advanceTutorialStep("equipment");break;case"equipment":e==="equipment"&&this.advanceTutorialStep("complete");break}t.currentStep==="complete"&&this.completeTutorial()}advanceTutorialStep(e){this.gameState.tutorial.currentStep=e,this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.hintText=this.getTutorialHintText(e),this.addMessage(this.getTutorialStepMessage(e))}getTutorialHintText(e){switch(e){case"welcome":return"ターミナル・ディセントへようこそ！WASDキーで移動してみましょう。";case"movement":return"よくできました！WASDで自由に移動できます。もう少し探索してみましょう。";case"combat":return"Spaceキーで攻撃モードに切り替えられます。試してみてください！";case"inventory":return"Iキーでインベントリを開いて、アイテムを確認しましょう。";case"equipment":return"数字キー(1-9)でアイテムを使用できます。アイテムを使ってみましょう！";case"complete":return"チュートリアル完了！すべての機能を覚えました。";default:return""}}getTutorialStepMessage(e){switch(e){case"movement":return"✓ 移動をマスターしました！";case"combat":return"✓ 次は戦闘システムを学びましょう。";case"inventory":return"✓ 戦闘の基本を理解しました！";case"equipment":return"✓ インベントリの使い方を覚えました！";case"complete":return"✓ 装備システムも完璧です！";default:return""}}completeTutorial(){this.gameState.tutorial.isActive=!1,this.gameState.tutorial.showHint=!1,this.gameState.status="playing",this.addMessage("🎉 チュートリアル完了！ゲーム開始です！")}skipTutorial(){this.completeTutorial()}processEnemies(){const e=this.gameState.currentDungeon,t=this.gameState.player.position;e.entities.filter(s=>s.type==="enemy").forEach(s=>{const i=Math.abs(s.position.x-t.x)+Math.abs(s.position.y-t.y);if(i<=3)if(i===1){const a="damage"in s?s.damage:10,r=this.playerController.getTotalDefense(),n=Math.max(1,a-r);this.playerController.takeDamage(n),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health;const h=this.playerController.getPlayer().health,o=this.playerController.getPlayer().maxHealth;r>0?this.addMessage(`${s.char}の攻撃！ ${n}ダメージ！(防御力-${r}) HP: ${Math.max(0,h)}/${o}`):this.addMessage(`${s.char}の攻撃！ ${n}ダメージ！ HP: ${Math.max(0,h)}/${o}`),this.playerController.isDead()&&this.playerController.getPlayer().health<=-10&&(this.gameState.status="gameOver",this.addMessage(`${p("youDied")} ${p("gameOver")}`))}else{const a=Math.sign(t.x-s.position.x),r=Math.sign(t.y-s.position.y),n={x:s.position.x+a,y:s.position.y+r};this.isValidEnemyMove(n)&&(s.position=n)}})}isValidEnemyMove(e){const t=this.gameState.currentDungeon;return!f(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(a=>a.position.x===e.x&&a.position.y===e.y&&a.blocking&&a.type!=="player")}checkGameState(){const e=this.playerController.getPlayer().health;if(this.playerController.isDead()&&e<=-10){this.gameState.status="gameOver",this.addMessage(p("gameOver"));return}if(this.gameState.currentDungeon.entities.filter(s=>s.type==="enemy").length===0&&!this.gameState.levelCleared){this.gameState.score+=100,this.gameState.levelCleared=!0,this.addMessage(p("levelCleared"));const s=this.gameState.dungeonData.currentFloor,i=this.gameState.dungeonData.maxFloor;s<i?(this.addExitStairs(),this.addMessage("次のフロアへの階段が現れました！ (Fキーで移動)")):this.addMessage("全フロアクリア！おめでとうございます！")}}addExitStairs(){const e=this.gameState.currentDungeon,t=e.rooms;if(t.length===0)return;const s=t[t.length-1],i={x:s.position.x+Math.floor(s.dimensions.width/2),y:s.position.y+Math.floor(s.dimensions.height/2)};if(e.entities.find(n=>n.position.x===i.x&&n.position.y===i.y)){const n=[{x:i.x+1,y:i.y},{x:i.x-1,y:i.y},{x:i.x,y:i.y+1},{x:i.x,y:i.y-1}];for(const h of n)if(h.x>=s.position.x&&h.x<s.position.x+s.dimensions.width&&h.y>=s.position.y&&h.y<s.position.y+s.dimensions.height&&!e.entities.find(c=>c.position.x===h.x&&c.position.y===h.y)){i.x=h.x,i.y=h.y;break}}const r=e.tiles[i.y][i.x];r&&(r.type="stairs",r.char=">",r.color="#ffff00",r.backgroundColor="#000000",r.blocking=!1)}togglePause(){this.gameState.status==="playing"?(this.gameState.status="paused",this.addMessage(p("gamePaused"))):this.gameState.status==="paused"&&(this.gameState.status="playing",this.addMessage(p("gameResumed")))}showMenu(){this.addMessage(p("menuNotImplemented"))}addMessage(e){this.gameState.messages.push(e),this.gameState.messages.length>5&&this.gameState.messages.shift()}addMessages(e){this.gameState.messages=[],e.forEach(t=>this.gameState.messages.push(t))}gameLoop=e=>{const t=e-this.lastUpdateTime;this.update(t),this.render(),this.lastUpdateTime=e,this.animationFrameId=requestAnimationFrame(this.gameLoop)};update(e){}render(){this.renderer.render(this.gameState)}start(){this.addMessage(p("searchingForExit")),this.lastUpdateTime=performance.now(),this.animationFrameId=requestAnimationFrame(this.gameLoop)}stop(){this.animationFrameId!==void 0&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=void 0)}reset(){this.stop(),this.playerController.reset({x:0,y:0}),this.gameState=this.createInitialGameState()}getGameState(){return{...this.gameState}}getPlayerStats(){return this.playerController.getStats()}pause(){this.gameState.status==="playing"&&(this.gameState.status="paused",this.addMessage(p("gamePaused")))}resume(){this.gameState.status==="paused"&&(this.gameState.status="playing",this.addMessage(p("gameResumed")))}movePlayer(e){this.handlePlayerMove(e)}toggleAttack(){this.toggleAttackMode()}showInventoryTest(){this.showInventory()}useItemTest(e){this.useItem(e)}addItemToPlayer(e){return this.playerController.addItem(e)}attackEnemy(e){this.handleAttack(e)}forceMissAttack(e){this.playerController.getPosition(),this.playerController.move(e),this.addMessage("そこには敵がいません。"),this.attackMode=!1,this.addMessage("移動モード")}testHandleInteract(){this.handleInteract()}testCastEntityToItem(e){return e}testShowInventory(){this.showInventory()}testUseItem(e){this.useItemInternal(e,!1)}testApplyItemEffect(e){return this.applyItemEffect(e)}testTakeDamage(e){this.playerController.takeDamage(e),this.gameState.player.health=this.playerController.getPlayer().health}handleWelcomeNavigation(e){const t=["start","tutorial","settings"],s=this.gameState.welcome.selectedOption?t.indexOf(this.gameState.welcome.selectedOption):0;let i=s;e==="north"?i=Math.max(0,s-1):e==="south"&&(i=Math.min(t.length-1,s+1)),this.gameState.welcome.selectedOption=t[i]}handleWelcomeInteract(){if(this.gameState.status!=="welcome")return;if(this.gameState.welcome.showPrologue){this.skipPrologue();return}switch(this.gameState.welcome.selectedOption){case"start":this.startGame();break;case"tutorial":this.startTutorial();break;case"settings":this.showSettings();break}}startGame(){this.gameState.status="playing",this.addMessage("ナイトシティ地下施設へようこそ。脱出を目指してください。")}startTutorial(){this.gameState.status="tutorial",this.gameState.tutorial.isActive=!0,this.gameState.tutorial.currentStep="welcome",this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.showHint=!0,this.gameState.tutorial.hintText="ターミナル・ディセントへようこそ！WASDキーで移動してみましょう。",this.addMessage("チュートリアルを開始します。")}showSettings(){this.addMessage("設定メニューは開発中です。")}showPrologue(){this.gameState.welcome.showPrologue=!0}skipPrologue(){this.gameState.welcome.showPrologue=!1,this.gameState.welcome.selectedOption="start"}startTutorialForTesting(){this.startTutorial()}handleInteractTest(){this.handleInteract()}testGetPlayer(){return this.playerController.getPlayer()}testSetPlayerEnergy(e){this.playerController.getPlayerDirect().energy=e,this.gameState.player.energy=e}toggleInventoryOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="inventory"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showInventoryOverlay())}toggleStatusOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="status"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showStatusOverlay())}showInventoryOverlay(){this.gameState.overlay={type:"inventory",isVisible:!0,selectedIndex:0}}showStatusOverlay(){this.gameState.overlay={type:"status",isVisible:!0}}hideOverlay(){this.gameState.overlay={type:"none",isVisible:!1}}handleItemAction(e){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="inventory"&&this.gameState.overlay.isVisible?this.useItemFromOverlay(e):this.useItem(e))}useItemFromOverlay(e){const t=this.playerController.getPlayer().inventory;if(e>=t.length)return;const s=t[e];this.applyItemEffect(s),this.playerController.removeItem(s.id,1),e>=t.length-1&&(this.gameState.overlay.selectedIndex=Math.max(0,t.length-2)),this.processTurn()}}const _={BASE_URL:"/terminal-descent-demo/",DEV:!1,MODE:"production",PROD:!0,SSR:!1};document.addEventListener("DOMContentLoaded",()=>{const l=document.getElementById("gameTitle"),e=document.getElementById("gameSubtitle"),t=document.getElementById("gameInfo");l&&(l.textContent=p("gameTitle")),e&&(e.textContent=p("gameSubtitle")),t&&(t.textContent=p("controls"));const s=document.getElementById("gameCanvas");if(!s){console.error("Could not find game canvas element");return}const i=new g(s);try{}catch{}i.start(),window.game=i,window.localization=T,document.addEventListener("keydown",a=>{a.ctrlKey&&a.key==="t"&&(a.preventDefault(),i.getGameState().status==="tutorial"&&(console.log("Skipping tutorial (Ctrl+T)"),i.skipTutorial()))}),console.log("Terminal Descent initialized successfully"),console.log("Use WASD keys to move, F to interact, ESC to pause"),console.log("Ctrl+T to skip tutorial")});
