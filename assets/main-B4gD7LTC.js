(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const i of a)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function t(a){const i={};return a.integrity&&(i.integrity=a.integrity),a.referrerPolicy&&(i.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?i.credentials="include":a.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(a){if(a.ep)return;a.ep=!0;const i=t(a);fetch(a.href,i)}})();const $={ja:{gameTitle:"ターミナル・ディセント",gameSubtitle:"ディストピア・ローグライク v1.0",controls:"WASDで移動 | Fで調べる | Iでインベントリ | Cでステータス | Lで言語切替 | ESCでメニュー",welcome:"ターミナル・ディセントへようこそ。WASDで移動してください。",cannotMoveThere:"そこには移動できません。",pickedUpItem:"を手に入れた。",nothingToInteract:"調べるものがありません。",enemyAttacks:"グレムリンが攻撃してきた！",youDied:"あなたは死亡しました。",gameOver:"ゲームオーバー。",levelCleared:"フロアクリア！勝利です！",gamePaused:"ゲームを一時停止しました。ESCで再開。",gameResumed:"ゲームを再開しました。",menuNotImplemented:"メニューは未実装です。",searchingForExit:"ターミナル・ディセントを開始。出口を探索中...",languageSwitched:"言語が切り替わりました。",playerAttacks:"を攻撃した！",enemyDefeated:"を倒した！",attackModeOn:"攻撃モード：方向キーで攻撃方向を選択",attackModeOff:"移動モード",noEnemyThere:"そこには敵がいません。",attackMissed:"{{enemy}}への攻撃が外れた！",criticalHit:"クリティカルヒット！ {{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",experienceGained:"経験値 +{{exp}}",levelUp:"レベルアップ！ Lv.{{level}}",enemyAttackWithDefense:"{{enemy}}の攻撃！ {{damage}}ダメージ！(防御力-{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}}の攻撃！ {{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",level:"レベル",health:"HP",energy:"エネルギー",accessLevel:"アクセス権",turn:"ターン",inventoryFull:"インベントリが満杯です。",inventoryEmpty:"インベントリは空です。",useItem:"を使用した。",pickedUpItemWithName:"{{item}}を拾った",cannotInteract:"そこには何もなかった",invalidItem:"無効なアイテムです。",noItemInSlot:"スロット{{slot}}にアイテムがありません。",ironSword:"鉄の剣",battleAxe:"バトルアックス",hunterBow:"ハンターボウ",magicStaff:"マジックスタッフ",steelDagger:"スチールダガー",ironHelmet:"鉄のヘルメット",steelChestplate:"スチール胸当て",leatherLeggings:"レザーレギンス",combatBoots:"コンバットブーツ",towerShield:"タワーシールド",healthPotion:"ヘルスポーション",energyBar:"エネルギーバー",mysteryScroll:"謎の巻物",healingHerb:"回復薬",energyCore:"エネルギーコア",ironSwordDesc:"標準的な鉄製の剣",battleAxeDesc:"強力な戦闘用斧",hunterBowDesc:"狩猟用の弓",magicStaffDesc:"魔法を増幅する杖",steelDaggerDesc:"軽量で素早い短剣",ironHelmetDesc:"鉄製の頭部防具",steelChestplateDesc:"スチール製の胸部防具",leatherLeggingsDesc:"レザー製の脚部防具",combatBootsDesc:"戦闘用ブーツ",towerShieldDesc:"大型の防御用盾",healthPotionDesc:"HP+30回復",energyBarDesc:"エネルギー+20回復",tutorialHealthPotion:"チュートリアル ポーション",tutorialHealthPotionDesc:"チュートリアル用の回復アイテム（HP+10回復）",tutorialSword:"チュートリアル ソード",tutorialSwordDesc:"チュートリアル用の練習剣（攻撃力+3）",mysteryScrollDesc:"ランダム効果",healingHerbDesc:"HP+15回復",energyCoreDesc:"エネルギー+50回復",weaponDescriptionFormat:"{{description}} (攻撃力: {{damage}})",armorDescriptionFormat:"{{description}} (防御力: {{defense}})",inventoryHeader:"=== インベントリ ===",currentEquipmentHeader:"=== 現在の装備 ===",usageInstructionsHeader:"=== 使用方法 ===",itemUsageInstructions:"数字キー(1-9)でアイテム使用/装備",itemUsageExample:"例: 1キー = [1]番目のアイテム",effectLabel:"効果",attackPowerEffect:"攻撃力+{{damage}}, 命中率+{{accuracy}}%",defenseEffect:"防御力+{{defense}}",totalDefense:"総防御力: {{total}}",rightHand:"右手",head:"頭",chest:"胸",legs:"脚",feet:"足",leftHand:"左手",noEquipment:"(装備なし)",pauseMenuTitle:"ポーズメニュー",continueGame:"ゲームを続ける",saveGame:"セーブ",loadGame:"ロード",languageSwitch:"言語切り替え",returnToTitle:"タイトルに戻る",descendingToFloor:"階層{{floor}}へ降りる...",cannotGoUp:"これ以上上には行けません。",returningToFloor:"階層{{floor}}へ戻る...",arrivedAtFloor:"階層{{floor}}に到着しました。",healthRestored:"HP+{{amount}}回復！",energyRestored:"エネルギー+{{amount}}回復！",itemCannotBeUsed:"{{item}}は使用できません。",weaponEquipped:"{{weapon}}を装備しました。",armorEquipped:"{{armor}}を装備しました。",cannotEquipWeapon:"武器を装備できませんでした。",cannotEquipArmor:"防具を装備できませんでした。",noEnemyInThatDirection:"そこには敵がいません。",movementMode:"移動モード",stairsAppeared:"次のフロアへの階段が現れました！ (Fキーで移動)",allFloorsCleared:"全フロアクリア！おめでとうございます！",welcomeToFacility:"ナイトシティ地下施設へようこそ。脱出を目指してください。",tutorialStarted:"チュートリアルを開始します。",tutorialComplete:"🎉 チュートリアル完了！ゲーム開始です！",settingsUnderDevelopment:"設定メニューは開発中です。",loadGameOption:"[ロード] セーブデータから再開",mysteryScrollHealth:"HP回復効果が発動！",mysteryScrollEnergy:"エネルギー回復効果が発動！",mysteryScrollScore:"スコアボーナス+50！",mysteryScrollMap:"マップ探索効果が発動！",tutorialWelcome:"ターミナル・ディセントへようこそ！WASDキーで移動してみましょう。",tutorialMovement:"よくできました！WASDで自由に移動できます。もう少し探索してみましょう。",tutorialCombat:"Spaceキーで攻撃モードに切り替えられます。試してみてください！",tutorialInventory:"Iキーでインベントリを開いて、アイテムを確認しましょう。",tutorialEquipment:"数字キー(1-9)でアイテムを使用できます。アイテムを使ってみましょう！",tutorialCompleted:"チュートリアル完了！すべての機能を覚えました。",tutorialProgressMovement:"✓ 移動をマスターしました！",tutorialProgressCombat:"✓ 次は戦闘システムを学びましょう。",tutorialProgressCombatComplete:"✓ 戦闘の基本を理解しました！",tutorialProgressInventory:"✓ インベントリの使い方を覚えました！",tutorialProgressEquipment:"✓ 装備システムも完璧です！",attackPowerLabel:"攻撃力",defenseLabel:"防御力",experienceLabel:"経験値",closeInstruction:"数字キー(1-9)でアイテム使用 | Iキーで閉じる",statusHeader:"=== ステータス ===",statusCloseInstruction:"Sキーで閉じる",equipmentHeader:"=== 装備 ===",equipmentStatsHeader:"=== 装備統計 ===",totalDefenseLabel:"総防御力",welcomeTitle:"ターミナル・ディセント",welcomeSubtitle:"ナイトシティ地下施設からの脱出劇",menuInstructions:"↑↓ または WS: 選択    Enter または F: 決定",prologueLines:["年は2087年。ナイトシティの地下研究施設で","あなたは目を覚ました。","","警備システムが暴走し、施設は封鎖された。","生き残るには地上への脱出しかない。","","装備を集め、敵を避け、10階層の地下から","脱出せよ。","","[Enterキーで開始]"],menuOptions:["[スタート] ゲームを開始","[チュートリアル] 操作を学ぶ","[設定] オプション設定（未実装）"],emptyInventoryMessage:"インベントリが空です",weaponSlot:"武器",headSlot:"頭",chestSlot:"胸",legsSlot:"脚",feetSlot:"足",shieldSlot:"盾",noItem:"なし",gremlin:"グレムリン",goblin:"ゴブリン",orc:"オーク",troll:"トロル",takeoffHeader:"=== 装備を外す ===",takeoffInstruction:"外したい装備を選んでください",takeoffControls:"↑↓キー: 選択 | Enterキー: 外す | Tキー: 閉じる",noEquipmentToRemove:"外せる装備がありません。",weaponUnequipped:"{{weapon}}を外しました。",armorUnequipped:"{{armor}}を外しました。"},en:{gameTitle:"TERMINAL DESCENT",gameSubtitle:"DYSTOPIAN ROGUELIKE v1.0",controls:"Use WASD to move | Press F to interact | I for inventory | C for character | L for language | ESC for menu",welcome:"Welcome to Terminal Descent. Use WASD to move.",cannotMoveThere:"You cannot move there.",pickedUpItem:"You picked up ",nothingToInteract:"There is nothing here to interact with.",enemyAttacks:"The gremlin attacks you!",youDied:"You have died.",gameOver:"Game Over.",levelCleared:"Level cleared! You win!",gamePaused:"Game paused. Press ESC to resume.",gameResumed:"Game resumed.",menuNotImplemented:"Menu not implemented yet.",searchingForExit:"Terminal Descent initiated. Searching for exit...",languageSwitched:"Language switched.",playerAttacks:"You attack ",enemyDefeated:"You defeated ",attackModeOn:"Attack mode: Use arrow keys to select attack direction",attackModeOff:"Movement mode",noEnemyThere:"There is no enemy there.",attackMissed:"Your attack on {{enemy}} missed!",criticalHit:"Critical hit! {{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",experienceGained:"Experience +{{exp}}",levelUp:"Level up! Lv.{{level}}",enemyAttackWithDefense:"{{enemy}} attacks! {{damage}} damage! (Defense -{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}} attacks! {{damage}} damage! HP: {{health}}/{{maxHealth}}",level:"Level",health:"Health",energy:"Energy",accessLevel:"Access",turn:"Turn",inventoryFull:"Inventory is full.",inventoryEmpty:"Your inventory is empty.",useItem:"You used ",pickedUpItemWithName:"You picked up {{item}}",cannotInteract:"There is nothing to interact with",invalidItem:"Invalid item.",noItemInSlot:"No item in slot {{slot}}.",ironSword:"Iron Sword",battleAxe:"Battle Axe",hunterBow:"Hunter Bow",magicStaff:"Magic Staff",steelDagger:"Steel Dagger",ironHelmet:"Iron Helmet",steelChestplate:"Steel Chestplate",leatherLeggings:"Leather Leggings",combatBoots:"Combat Boots",towerShield:"Tower Shield",healthPotion:"Health Potion",energyBar:"Energy Bar",mysteryScroll:"Mystery Scroll",healingHerb:"Healing Herb",energyCore:"Energy Core",ironSwordDesc:"A standard iron sword",battleAxeDesc:"A powerful battle axe",hunterBowDesc:"A bow for hunting",magicStaffDesc:"A staff that amplifies magic",steelDaggerDesc:"A light and fast dagger",ironHelmetDesc:"Iron head protection",steelChestplateDesc:"Steel chest protection",leatherLeggingsDesc:"Leather leg protection",combatBootsDesc:"Combat boots",towerShieldDesc:"Large defensive shield",healthPotionDesc:"Restores 30 HP",energyBarDesc:"Restores 20 energy",tutorialHealthPotion:"Tutorial Potion",tutorialHealthPotionDesc:"Tutorial healing item (Restores 10 HP)",tutorialSword:"Tutorial Sword",tutorialSwordDesc:"Tutorial practice sword (Attack +3)",mysteryScrollDesc:"Random effect",healingHerbDesc:"Restores 15 HP",energyCoreDesc:"Restores 50 energy",weaponDescriptionFormat:"{{description}} (Damage: {{damage}})",armorDescriptionFormat:"{{description}} (Defense: {{defense}})",inventoryHeader:"=== INVENTORY ===",currentEquipmentHeader:"=== CURRENT EQUIPMENT ===",usageInstructionsHeader:"=== USAGE ===",itemUsageInstructions:"Press number keys (1-9) to use/equip items",itemUsageExample:"Example: Key 1 = Item [1]",effectLabel:"Effect",attackPowerEffect:"Attack +{{damage}}, Accuracy +{{accuracy}}%",defenseEffect:"Defense +{{defense}}",totalDefense:"Total Defense: {{total}}",rightHand:"Right Hand",head:"Head",chest:"Chest",legs:"Legs",feet:"Feet",leftHand:"Left Hand",noEquipment:"(No equipment)",pauseMenuTitle:"Pause Menu",continueGame:"Continue",saveGame:"Save",loadGame:"Load",languageSwitch:"Language",returnToTitle:"Return to Title",descendingToFloor:"Descending to floor {{floor}}...",cannotGoUp:"Cannot go up any further.",returningToFloor:"Returning to floor {{floor}}...",arrivedAtFloor:"Arrived at floor {{floor}}.",healthRestored:"HP+{{amount}} restored!",energyRestored:"Energy+{{amount}} restored!",itemCannotBeUsed:"{{item}} cannot be used.",weaponEquipped:"{{weapon}} equipped.",armorEquipped:"{{armor}} equipped.",cannotEquipWeapon:"Cannot equip weapon.",cannotEquipArmor:"Cannot equip armor.",noEnemyInThatDirection:"No enemy there.",movementMode:"Movement mode",stairsAppeared:"Stairs to next floor appeared! (Press F to move)",allFloorsCleared:"All floors cleared! Congratulations!",welcomeToFacility:"Welcome to Night City underground facility. Aim for escape.",tutorialStarted:"Tutorial started.",tutorialComplete:"🎉 Tutorial complete! Game start!",settingsUnderDevelopment:"Settings menu is under development.",loadGameOption:"[Load] Continue from save",mysteryScrollHealth:"HP recovery effect activated!",mysteryScrollEnergy:"Energy recovery effect activated!",mysteryScrollScore:"Score bonus +50!",mysteryScrollMap:"Map exploration effect activated!",tutorialWelcome:"Welcome to Terminal Descent! Use WASD keys to move.",tutorialMovement:"Well done! You can move freely with WASD. Try exploring a bit more.",tutorialCombat:"You can switch to attack mode with Space key. Try it!",tutorialInventory:"Press I key to open inventory and check items.",tutorialEquipment:"Use number keys (1-9) to use items. Try using an item!",tutorialCompleted:"Tutorial complete! You have learned all functions.",tutorialProgressMovement:"✓ Movement mastered!",tutorialProgressCombat:"✓ Next, let's learn the combat system.",tutorialProgressCombatComplete:"✓ Combat basics understood!",tutorialProgressInventory:"✓ Inventory usage learned!",tutorialProgressEquipment:"✓ Equipment system perfect!",attackPowerLabel:"Attack Power",defenseLabel:"Defense",experienceLabel:"Experience",closeInstruction:"Press number keys (1-9) to use items | Press I to close",statusHeader:"=== STATUS ===",statusCloseInstruction:"Press S to close",equipmentHeader:"=== EQUIPMENT ===",equipmentStatsHeader:"=== EQUIPMENT STATS ===",totalDefenseLabel:"Total Defense",welcomeTitle:"TERMINAL DESCENT",welcomeSubtitle:"Escape from Night City underground facility",menuInstructions:"↑↓ or WS: Select    Enter or F: Confirm",prologueLines:["The year is 2087. In an underground research facility","in Night City, you wake up.","","Security systems have gone haywire, and the facility is sealed.","To survive, you must escape to the surface.","","Gather equipment, avoid enemies, and escape from","10 underground levels.","","[Press Enter to start]"],menuOptions:["[Start] Begin game","[Tutorial] Learn controls","[Settings] Options (Not implemented)"],emptyInventoryMessage:"Inventory is empty",weaponSlot:"Weapon",headSlot:"Head",chestSlot:"Chest",legsSlot:"Legs",feetSlot:"Feet",shieldSlot:"Shield",noItem:"None",gremlin:"Gremlin",goblin:"Goblin",orc:"Orc",troll:"Troll",takeoffHeader:"=== Remove Equipment ===",takeoffInstruction:"Select equipment to remove",takeoffControls:"↑↓ keys: Select | Enter: Remove | T key: Close",noEquipmentToRemove:"No equipment to remove.",weaponUnequipped:"{{weapon}} unequipped.",armorUnequipped:"{{armor}} unequipped."}};class j{currentLanguage="ja";setLanguage(e){this.currentLanguage=e}getCurrentLanguage(){return this.currentLanguage}getMessage(e){return $[this.currentLanguage][e]}getMessages(){return $[this.currentLanguage]}}const w=new j,o=l=>{const e=w.getMessage(l);return Array.isArray(e)?e.join(`
`):e},G=l=>{const e=w.getMessage(l);return Array.isArray(e)?e:[e]};function f(l){return l.nameKey?o(l.nameKey):l.name}function Q(l){if(l.descriptionKey){const e=o(l.descriptionKey);return l.itemType==="weapon"&&l.descriptionParams?.damage!==void 0?o("weaponDescriptionFormat").replace("{{description}}",e).replace("{{damage}}",String(l.descriptionParams.damage)):l.itemType==="armor"&&l.descriptionParams?.defense!==void 0?o("armorDescriptionFormat").replace("{{description}}",e).replace("{{defense}}",String(l.descriptionParams.defense)):e}return l.description}function J(l){const e=l.equipment;return{weapon:e.mainHand?f(e.mainHand):o("noItem"),head:e.head?f(e.head):o("noItem"),chest:e.chest?f(e.chest):o("noItem"),legs:e.legs?f(e.legs):o("noItem"),feet:e.feet?f(e.feet):o("noItem"),shield:e.offHand?f(e.offHand):o("noItem")}}function Z(l){let e=0;return["head","chest","legs","feet","offHand"].forEach(s=>{const a=l.equipment[s];a&&"defense"in a&&(e+=a.defense)}),e}function ee(l){const t=l.equipment.mainHand;return 10+(t&&"damage"in t?t.damage:0)}function K(l){const e=Z(l),t=ee(l),s=Object.values(l.equipment).filter(a=>a!==void 0).length;return{totalDefense:e,attackPower:t,equipmentCount:s}}function te(l){return"key"in l}function se(l){if(typeof l=="string")return l;if(te(l)){let e=o(l.key);return l.params&&Object.entries(l.params).forEach(([t,s])=>{const a=`{{${t}}}`;e=e.replace(a,String(s))}),e}else return l.text}function p(l,e){const t={key:l,timestamp:Date.now()};return e&&(t.params=e),t}function U(l){return{text:l,timestamp:Date.now()}}function P(){return Math.random().toString(36).substring(2)+Date.now().toString(36)}function T(l,e){return l.x>=0&&l.x<e.width&&l.y>=0&&l.y<e.height}function ae(l){switch(l){case"north":return{x:0,y:-1};case"south":return{x:0,y:1};case"east":return{x:1,y:0};case"west":return{x:-1,y:0}}}function ie(l,e){return{x:l.x+e.x,y:l.y+e.y}}function C(l,e){return Math.floor(Math.random()*(e-l+1))+l}function E(l){return l[Math.floor(Math.random()*l.length)]}function A(l){const t={g:"gremlin",G:"goblin",o:"orc",T:"troll"}[l.char];return t?o(t):l.char}class Y{player;constructor(e){this.player=this.createPlayer(e)}createPlayer(e){return{id:P(),position:{...e},char:"@",color:"#00ff00",type:"player",blocking:!0,visible:!0,level:1,experience:0,experienceToNext:100,health:100,maxHealth:100,energy:100,maxEnergy:100,accessLevel:1,inventory:[],equipment:{}}}getPlayer(){return{...this.player}}getPlayerDirect(){return this.player}getPosition(){return{...this.player.position}}setPosition(e){this.player.position={...e}}move(e){const t=ae(e);return ie(this.player.position,t)}confirmMove(e){this.player.position={...e}}takeDamage(e){this.player.health=Math.max(0,this.player.health-e)}heal(e){this.player.health=Math.min(this.player.maxHealth,this.player.health+e)}useEnergy(e){return this.player.energy>=e?(this.player.energy-=e,!0):!1}restoreEnergy(e){this.player.energy=Math.min(this.player.maxEnergy,this.player.energy+e)}isAlive(){return this.player.health>0}isDead(){return this.player.health<=0}addItem(e){if(e.stackable){const t=this.player.inventory.find(s=>s.name===e.name&&s.itemType===e.itemType);if(t)return t.quantity+=e.quantity,!0}return this.player.inventory.length<20?(this.player.inventory.push({...e}),!0):!1}removeItem(e,t=1){const s=this.player.inventory.findIndex(i=>i.id===e);if(s===-1)return null;const a=this.player.inventory[s];return a.quantity<=t?(this.player.inventory.splice(s,1),a):(a.quantity-=t,{...a,id:P(),quantity:t})}getInventory(){return[...this.player.inventory]}findItem(e){return this.player.inventory.find(s=>s.id===e)||null}hasItem(e){return this.player.inventory.some(t=>t.id===e)}calculateExperienceToNext(e){return Math.floor(100*Math.pow(1.5,e-1))}addExperience(e){this.player.experience+=e;let t=!1;for(;this.player.experience>=this.player.experienceToNext;)this.player.experience-=this.player.experienceToNext,this.levelUp(),t=!0;return t}levelUp(){this.player.level++,this.player.experienceToNext=this.calculateExperienceToNext(this.player.level),this.player.maxHealth+=10,this.player.maxEnergy+=5,this.player.health=this.player.maxHealth,this.player.energy=this.player.maxEnergy}increaseAccessLevel(){this.player.accessLevel++}getStats(){return{level:this.player.level,experience:this.player.experience,experienceToNext:this.player.experienceToNext,experienceProgress:Math.floor(this.player.experience/this.player.experienceToNext*100),health:this.player.health,maxHealth:this.player.maxHealth,energy:this.player.energy,maxEnergy:this.player.maxEnergy,accessLevel:this.player.accessLevel,inventoryCount:this.player.inventory.length}}serialize(){return JSON.stringify(this.player)}deserialize(e){try{const t=JSON.parse(e);if(typeof t.level=="number"&&typeof t.health=="number"&&typeof t.maxHealth=="number"&&typeof t.position=="object"&&typeof t.position.x=="number"&&typeof t.position.y=="number")this.player={...t};else throw new Error("Invalid player data format")}catch(t){console.error("Failed to deserialize player data:",t),this.player=this.createPlayer({x:0,y:0})}}reset(e){this.player=this.createPlayer(e)}equipWeapon(e){return console.log("=== PlayerController.equipWeapon START ==="),console.log("Weapon to equip:",e),console.log("Current equipment before:",this.player.equipment),this.player.equipment.mainHand&&(console.log("Previous weapon exists, returning to inventory:",this.player.equipment.mainHand),this.addItem(this.player.equipment.mainHand)),this.player.equipment.mainHand=e,console.log("Weapon equipped to mainHand"),console.log("Current equipment after:",this.player.equipment),console.log("=== PlayerController.equipWeapon END ==="),!0}unequipWeapon(){const e=this.player.equipment.mainHand;return e?(delete this.player.equipment.mainHand,e):null}getEquippedWeapon(){return this.player.equipment.mainHand||null}equipArmor(e){const t=e.slot;if(t==="mainHand"||t==="accessory")return!1;const s=this.player.equipment[t];return s&&this.addItem(s),this.player.equipment[t]=e,!0}unequipArmor(e){if(e==="mainHand"||e==="accessory")return null;const t=this.player.equipment[e];return t?(delete this.player.equipment[e],t):null}getEquippedArmor(e){return e==="mainHand"||e==="accessory"?null:this.player.equipment[e]||null}getTotalDefense(){let e=0;const t=["offHand","head","chest","legs","feet"];for(const s of t){const a=this.getEquippedArmor(s);a&&(e+=a.defense)}return e}getAttackDamage(){const e=this.player.equipment.mainHand,t=10;return e?t+e.damage:t}getAttackAccuracy(){const e=this.player.equipment.mainHand,t=80;return e?Math.min(95,t+e.accuracy):t}getCriticalChance(){const e=this.player.equipment.mainHand,t=5;return e?Math.min(50,t+e.criticalChance):t}rollAttackHit(){const e=this.getAttackAccuracy();return Math.random()*100<e}rollCriticalHit(){const e=this.getCriticalChance();return Math.random()*100<e}rollDamage(){const e=this.getAttackDamage(),t=this.rollCriticalHit();return{damage:t?Math.floor(e*1.5):e,isCritical:t}}}class b{dimensions;level;constructor(e,t=1){this.dimensions=e,this.level=t}generate(e){const t=this.createEmptyTiles(),s=this.generateRooms();if(s.forEach(i=>this.carveRoom(t,i)),this.connectRooms(t,s),s.length>0){const i=s[0];e.position={x:i.position.x+Math.floor(i.dimensions.width/2),y:i.position.y+Math.floor(i.dimensions.height/2)},console.log(`Player placed at (${e.position.x},${e.position.y}) in room at (${i.position.x},${i.position.y})`),console.log(`Generated ${s.length} rooms`)}else console.error("No rooms generated! Player will be stuck in walls.");const a=this.generateEntities(s,e.position);return a.push(e),{level:this.level,dimensions:this.dimensions,tiles:t,rooms:s,entities:a,player:e}}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let s=0;s<this.dimensions.width;s++)e[t][s]=this.createWallTile({x:s,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}generateRooms(){const e=[];for(let n=0;n<50&&e.length<8;n++){const r=C(4,10),c=C(4,10),h=C(1,this.dimensions.width-r-1),g=C(1,this.dimensions.height-c-1),u={position:{x:h,y:g},dimensions:{width:r,height:c},tiles:[],connected:!1};e.some(y=>this.roomsOverlap(u,y))||e.push(u)}return e}roomsOverlap(e,t){return!(e.position.x+e.dimensions.width+1<t.position.x||t.position.x+t.dimensions.width+1<e.position.x||e.position.y+e.dimensions.height+1<t.position.y||t.position.y+t.dimensions.height+1<e.position.y)}carveRoom(e,t){for(let s=t.position.y;s<t.position.y+t.dimensions.height;s++)for(let a=t.position.x;a<t.position.x+t.dimensions.width;a++)T({x:a,y:s},this.dimensions)&&(e[s][a]=this.createFloorTile({x:a,y:s}))}connectRooms(e,t){if(t.length<2)return;for(let a=0;a<t.length-1;a++){const i=t[a],n=t[a+1];this.createCorridor(e,i,n),i.connected=!0,n.connected=!0}const s=Math.floor(t.length/3);for(let a=0;a<s;a++){const i=E(t),n=E(t);i!==n&&this.createCorridor(e,i,n)}}createCorridor(e,t,s){const a={x:t.position.x+Math.floor(t.dimensions.width/2),y:t.position.y+Math.floor(t.dimensions.height/2)},i={x:s.position.x+Math.floor(s.dimensions.width/2),y:s.position.y+Math.floor(s.dimensions.height/2)};C(0,1)===0?(this.carveHorizontalCorridor(e,a.x,i.x,a.y),this.carveVerticalCorridor(e,i.x,a.y,i.y)):(this.carveVerticalCorridor(e,a.x,a.y,i.y),this.carveHorizontalCorridor(e,a.x,i.x,i.y))}carveHorizontalCorridor(e,t,s,a){const i=Math.min(t,s),n=Math.max(t,s);for(let r=i;r<=n;r++)T({x:r,y:a},this.dimensions)&&(e[a][r]=this.createFloorTile({x:r,y:a}))}carveVerticalCorridor(e,t,s,a){const i=Math.min(s,a),n=Math.max(s,a);for(let r=i;r<=n;r++)T({x:t,y:r},this.dimensions)&&(e[r][t]=this.createFloorTile({x:t,y:r}))}generateEntities(e,t){const s=[],a=e.slice(1);a.forEach(h=>{const g=Math.min(.3+this.level*.05,.7);if(Math.random()<g){const m=this.createEnemy(h);s.push(m)}const u=Math.min(.2+this.level*.02,.4);if(Math.random()<u){const m=this.createItem(h);s.push(m)}});const i=s.filter(h=>h.type==="enemy").length,n=Math.max(1,Math.floor(a.length/3));if(i<n){const h=a.filter(u=>!s.some(m=>m.type==="enemy"&&m.position.x>=u.position.x&&m.position.x<u.position.x+u.dimensions.width&&m.position.y>=u.position.y&&m.position.y<u.position.y+u.dimensions.height)),g=n-i;for(let u=0;u<g&&u<h.length;u++){const m=h[u],y=this.createEnemy(m);s.push(y)}}const r=s.filter(h=>h.type==="item").length,c=Math.max(1,Math.floor(a.length/4));if(r<c){const h=a.filter(u=>!s.some(m=>m.type==="item"&&m.position.x>=u.position.x&&m.position.x<u.position.x+u.dimensions.width&&m.position.y>=u.position.y&&m.position.y<u.position.y+u.dimensions.height)),g=c-r;for(let u=0;u<g&&u<h.length;u++){const m=h[u],y=this.createItem(m);s.push(y)}}return s}createEnemy(e){const t=C(e.position.x+1,e.position.x+e.dimensions.width-2),s=C(e.position.y+1,e.position.y+e.dimensions.height-2),a=20,i=5,n=Math.floor(this.level*1.5),r=Math.floor(this.level*.8),c=a+n,h=i+r,g=this.getEnemyTypes(),u=E(g);return{id:`enemy_${Date.now()}_${Math.random()}`,position:{x:t,y:s},char:u.char,color:u.color,type:"enemy",blocking:!0,visible:!0,health:c,maxHealth:c,damage:h,aiType:"aggressive"}}getEnemyTypes(){const e=[{char:"G",color:"#ff4444",name:"Gremlin"},{char:"R",color:"#8b4513",name:"Rat"},{char:"S",color:"#32cd32",name:"Slime"}],t=[{char:"O",color:"#ff6600",name:"Orc"},{char:"T",color:"#daa520",name:"Troll"},{char:"W",color:"#483d8b",name:"Wraith"}],s=[{char:"D",color:"#dc143c",name:"Dragon"},{char:"L",color:"#8b008b",name:"Lich"},{char:"M",color:"#ff1493",name:"Minotaur"}];return this.level<=3?e:this.level<=6?[...e,...t]:[...e,...t,...s]}createItem(e){const t=C(e.position.x+1,e.position.x+e.dimensions.width-2),s=C(e.position.y+1,e.position.y+e.dimensions.height-2),a=Math.random();return a<.25?this.createWeapon(t,s):a<.45?this.createArmor(t,s):this.createConsumable(t,s)}createWeapon(e,t){const s=[{char:")",color:"#cccccc",nameKey:"ironSword",descKey:"ironSwordDesc",weaponType:"sword",damage:8+Math.floor(this.level*1.2),accuracy:10,criticalChance:5,range:1},{char:"/",color:"#8b4513",nameKey:"battleAxe",descKey:"battleAxeDesc",weaponType:"axe",damage:12+Math.floor(this.level*1.5),accuracy:5,criticalChance:8,range:1},{char:"}",color:"#654321",nameKey:"hunterBow",descKey:"hunterBowDesc",weaponType:"bow",damage:6+Math.floor(this.level*1),accuracy:15,criticalChance:10,range:3},{char:"\\",color:"#4b0082",nameKey:"magicStaff",descKey:"magicStaffDesc",weaponType:"staff",damage:5+Math.floor(this.level*.8),accuracy:12,criticalChance:3,range:2},{char:"-",color:"#a9a9a9",nameKey:"steelDagger",descKey:"steelDaggerDesc",weaponType:"dagger",damage:4+Math.floor(this.level*.7),accuracy:20,criticalChance:15,range:1}],a=E(s);let i;return this.level>=3&&Math.random()<.3&&(i={type:E(["fire","ice","poison","stun","vampire"]),chance:15+Math.floor(this.level*2),value:Math.floor(this.level*1.5)}),{id:P(),position:{x:e,y:t},char:a.char,color:a.color,type:"item",blocking:!1,visible:!0,name:o(a.nameKey),nameKey:a.nameKey,description:`${o(a.descKey)} (攻撃力: ${a.damage})`,descriptionKey:a.descKey,descriptionParams:{damage:a.damage},stackable:!1,quantity:1,itemType:"weapon",weaponType:a.weaponType,damage:a.damage,accuracy:a.accuracy,criticalChance:a.criticalChance,range:a.range,...i&&{special:i}}}createArmor(e,t){const s=[{char:"[",color:"#8b4513",nameKey:"ironHelmet",descKey:"ironHelmetDesc",armorType:"helmet",slot:"head",defense:3+Math.floor(this.level*.8)},{char:"]",color:"#c0c0c0",nameKey:"steelChestplate",descKey:"steelChestplateDesc",armorType:"chestplate",slot:"chest",defense:5+Math.floor(this.level*1.2)},{char:"{",color:"#a0522d",nameKey:"leatherLeggings",descKey:"leatherLeggingsDesc",armorType:"leggings",slot:"legs",defense:4+Math.floor(this.level*1)},{char:"(",color:"#654321",nameKey:"combatBoots",descKey:"combatBootsDesc",armorType:"boots",slot:"feet",defense:2+Math.floor(this.level*.6)},{char:"&",color:"#8b7355",nameKey:"towerShield",descKey:"towerShieldDesc",armorType:"shield",slot:"offHand",defense:6+Math.floor(this.level*1.5)}],a=E(s),i=50+Math.floor(this.level*10);return{id:P(),position:{x:e,y:t},char:a.char,color:a.color,type:"item",blocking:!1,visible:!0,name:o(a.nameKey),nameKey:a.nameKey,description:`${o(a.descKey)} (防御力: ${a.defense})`,descriptionKey:a.descKey,descriptionParams:{defense:a.defense},stackable:!1,quantity:1,itemType:"armor",armorType:a.armorType,defense:a.defense,durability:i,maxDurability:i,slot:a.slot}}createConsumable(e,t){const a=E([{char:"!",color:"#ffff00",nameKey:"healthPotion",descKey:"healthPotionDesc"},{char:"%",color:"#ff8800",nameKey:"energyBar",descKey:"energyBarDesc"},{char:"?",color:"#8800ff",nameKey:"mysteryScroll",descKey:"mysteryScrollDesc"},{char:"+",color:"#00ffff",nameKey:"healingHerb",descKey:"healingHerbDesc"},{char:"*",color:"#ff00ff",nameKey:"energyCore",descKey:"energyCoreDesc"}]);return{id:P(),position:{x:e,y:t},char:a.char,color:a.color,type:"item",blocking:!1,visible:!0,name:o(a.nameKey),nameKey:a.nameKey,description:o(a.descKey),descriptionKey:a.descKey,stackable:!0,quantity:1,itemType:"consumable"}}static updateFieldOfView(e,t,s=8){for(let a=0;a<e.dimensions.height;a++)for(let i=0;i<e.dimensions.width;i++)e.tiles[a][i].visible=!1;for(let a=-s;a<=s;a++)for(let i=-s;i<=s;i++){const n=t.x+i,r=t.y+a;if(T({x:n,y:r},e.dimensions)&&Math.sqrt(i*i+a*a)<=s){const h=e.tiles[r][n];h.visible=!0,h.explored=!0}}}}const H={MAP_DIMENSIONS:{width:72,height:30},ROOM_DIMENSIONS:{width:8,height:6,spacing:12},getWelcomeRoomPosition(){return{x:2,y:Math.floor(this.MAP_DIMENSIONS.height/2)-Math.floor(this.ROOM_DIMENSIONS.height/2)}},getMovementTargetPosition(){const l=this.getWelcomeRoomPosition();return{x:l.x+Math.floor(this.ROOM_DIMENSIONS.width/2),y:l.y+Math.floor(this.ROOM_DIMENSIONS.height/2)}},getPlayerStartPosition(){const l=this.getWelcomeRoomPosition();return{x:l.x+2,y:l.y+2}}};var S=(l=>(l.NOT_STARTED="not_started",l.IN_PROGRESS="in_progress",l.COMPLETED="completed",l.SKIPPED="skipped",l))(S||{}),I=(l=>(l.PENDING="pending",l.ACTIVE="active",l.COMPLETED="completed",l.BLOCKED="blocked",l))(I||{});class O{constructor(e,t,s,a,i,n,r=[]){this.id=e,this.title=t,this.description=s,this.blockedActions=r,this.hint=a||"",this.targetAction=i||"",n&&(this.targetPosition=n)}state=I.PENDING;hint;targetAction;targetPosition;isActionAllowed(e){return!this.blockedActions.includes(e)}}class ne extends O{constructor(){super("step_movement","移動の練習","WASDキーを使って、マーカーの位置まで移動してください。","W:上, A:左, S:下, D:右","movement",H.getMovementTargetPosition(),["inventory","equipment","status"])}checkCompletion(e){const t=e.gameState.player,s=this.targetPosition;return s?t.position.x===s.x&&t.position.y===s.y:!1}}class re extends O{itemsUsedCount=0;requiredItemCount=2;constructor(){super("step_item_pickup","アイテムの使用","Fキーでアイテムを拾い、Iキーでインベントリを開いて使用してください。","ポーションを使うと体力が回復します","item_use",void 0,["equipment"])}checkCompletion(e){return this.itemsUsedCount>=this.requiredItemCount}markItemUsed(){this.itemsUsedCount++,console.log(`[Tutorial] Item used: ${this.itemsUsedCount}/${this.requiredItemCount}`),this.itemsUsedCount===1?this.description="よくできました！もう1つのポーションも使ってみましょう。":this.itemsUsedCount>=this.requiredItemCount&&(this.description="素晴らしい！アイテムの使い方をマスターしました。")}}class oe extends O{currentSequenceIndex=0;sequence=[{id:"pickup",completed:!1},{id:"open_equipment",completed:!1},{id:"open_takeoff",completed:!1},{id:"unequip",completed:!1}];constructor(){super("step_equipment","装備の管理","武器を拾って装備し、その後外してみましょう。","F:拾う, E:装備画面, T:着脱画面","equipment",void 0,["inventory","status"])}checkCompletion(e){const t=this.sequence[0].completed&&this.sequence[1].completed&&this.sequence[2].completed&&this.sequence[3].completed;return t&&(console.log("[EquipmentStep] checkCompletion: All sequences completed"),console.log("[EquipmentStep] Sequence status:",this.sequence.map(s=>({id:s.id,completed:s.completed})))),t}advanceSequence(e){console.log(`[EquipmentStep] advanceSequence called with action: ${e}`),console.log("[EquipmentStep] Before advance - Sequence:",JSON.stringify(this.sequence));const t=this.sequence[this.currentSequenceIndex];if(t){switch(e){case"pickup":t.id==="pickup"&&(t.completed=!0,this.currentSequenceIndex++);break;case"open_equipment":this.sequence[1].completed=!0,t.id==="open_equipment"&&this.currentSequenceIndex++;break;case"open_takeoff":this.sequence[2].completed=!0,t.id==="open_takeoff"&&this.currentSequenceIndex++;break;case"unequip":this.sequence[3].completed=!0,t.id==="unequip"&&(t.completed=!0,this.currentSequenceIndex++);break}console.log("[EquipmentStep] After advance - Sequence:",JSON.stringify(this.sequence))}}getCurrentAction(){const e=this.sequence[this.currentSequenceIndex];return e&&{pickup:"Fキーで武器を拾ってください",open_equipment:"Eキーで装備画面を開いてください",open_takeoff:"Tキーで着脱画面を開いてください",unequip:"装備を外してください"}[e.id]||""}isActionAllowed(e){return super.isActionAllowed(e)?(this.sequence[this.currentSequenceIndex],!this.sequence[0].completed&&(e==="equipment"||e==="takeoff")?(console.log(`[EquipmentStep] Blocking ${e} - pickup not completed`),!1):!(this.sequence[0].completed&&!this.sequence[1].completed&&e==="takeoff")):!1}}class le extends O{combatCompleted=!1;constructor(){super("step_combat","戦闘の基本","Spaceキーで攻撃モードに切り替え、敵を倒してください。","攻撃モード中は移動で攻撃します","combat",void 0,[])}checkCompletion(e){return this.combatCompleted}markCombatCompleted(){this.combatCompleted=!0}}class ce extends O{statusViewed=!1;constructor(){super("step_character_status","チュートリアル完了","Cキーでステータスを確認後、ESCメニューからタイトルに戻ってください。","おめでとう！チュートリアルは完了です","status",void 0,[])}checkCompletion(e){return this.statusViewed}markStatusViewed(){this.statusViewed=!0}}class d{static movementStep=null;static itemPickupStep=null;static equipmentStep=null;static combatStep=null;static statusStep=null;createMovementStep(){return d.movementStep||(d.movementStep=new ne),d.movementStep}createItemPickupStep(){return d.itemPickupStep||(d.itemPickupStep=new re),d.itemPickupStep}createEquipmentStep(){return d.equipmentStep||(d.equipmentStep=new oe),d.equipmentStep}createCombatStep(){return d.combatStep||(d.combatStep=new le),d.combatStep}createStatusStep(){return d.statusStep||(d.statusStep=new ce),d.statusStep}createAllSteps(){return[this.createMovementStep(),this.createItemPickupStep(),this.createEquipmentStep(),this.createCombatStep(),this.createStatusStep()]}static notifyAction(e,t){switch(e){case"step_item_pickup":t==="item_use"&&this.itemPickupStep&&this.itemPickupStep.markItemUsed();break;case"step_equipment":this.equipmentStep&&this.equipmentStep.advanceSequence(t);break;case"step_combat":t==="combat_complete"&&this.combatStep&&this.combatStep.markCombatCompleted();break;case"step_character_status":t==="status_view"&&this.statusStep&&this.statusStep.markStatusViewed();break}}}class z{enableHints=!0;hintDelay=1e4;autoAdvance=!1;debugMode=!1;steps;get totalSteps(){return this.steps.length}constructor(){const e=new d;this.steps=e.createAllSteps()}getStepIndex(e){return this.steps.findIndex(t=>t.id===e)}getStep(e){return this.steps.find(t=>t.id===e)||null}getTotalSteps(){return this.steps.length}setDebugMode(e){this.debugMode=e}updateHintSettings(e,t){this.enableHints=e,t!==void 0&&(this.hintDelay=t)}}class he{dimensions;constructor(e=H.MAP_DIMENSIONS){this.dimensions=e}getRoomConfigForStep(e){const t={step_movement:{type:"movement"},step_item_pickup:{type:"items"},step_equipment:{type:"equipment"},step_combat:{type:"combat"},step_character_status:{type:"status"}};return console.log(`[TutorialDungeonGenerator] getRoomConfigForStep(${e}) => ${JSON.stringify(t[e])}`),t[e]||{type:"movement"}}generate(e){console.log("[TutorialDungeonGenerator] generate() called");const t=this.createEmptyTiles(),s=this.generateTutorialRooms();if(s.forEach(i=>this.carveRoom(t,i)),this.connectRoomsLinear(t,s),s.length>0){const i=H.getPlayerStartPosition();e.position={...i},console.log(`Player positioned at (${i.x}, ${i.y}) using TUTORIAL_CONSTANTS`)}console.log(`[TutorialDungeonGenerator] Calling generateTutorialEntities with ${s.length} rooms`);const a=this.generateTutorialEntities(s);return console.log(`[TutorialDungeonGenerator] Generated ${a.length} entities`),a.push(e),{level:0,dimensions:this.dimensions,tiles:t,rooms:s,entities:a,player:e}}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let s=0;s<this.dimensions.width;s++)e[t][s]=this.createWallTile({x:s,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}createDoorTile(e,t=!1){return{position:{...e},type:"door",char:t?" ":"|",color:t?"#666666":"#ff8800",backgroundColor:"#000000",blocking:!t,explored:!1,visible:!1}}generateTutorialRooms(){const e=[],{width:t,height:s,spacing:a}=H.ROOM_DIMENSIONS,i=new z;return i.steps.forEach((r,c)=>{console.log(`[TutorialDungeonGenerator] Step ${c}: ${r.id}`)}),i.steps.map((r,c)=>({stepType:r.id,roomConfig:this.getRoomConfigForStep(r.id)})).forEach((r,c)=>{let h,g;if(c===0){const m=H.getWelcomeRoomPosition();h=m.x,g=m.y,console.log(`Welcome room positioned at (${h}, ${g}) using TUTORIAL_CONSTANTS`)}else{const m=H.getWelcomeRoomPosition();h=m.x+c*a,g=m.y,console.log(`Room ${c} positioned at (${h}, ${g}) relative to welcome room`)}const u={position:{x:h,y:g},dimensions:{width:t,height:s},tiles:[],connected:!1,tutorialStep:{id:r.stepType,type:r.roomConfig.type,required:!0}};e.push(u)}),e}carveRoom(e,t){for(let s=t.position.y;s<t.position.y+t.dimensions.height;s++)for(let a=t.position.x;a<t.position.x+t.dimensions.width;a++)T({x:a,y:s},this.dimensions)&&(e[s][a]=this.createFloorTile({x:a,y:s}))}connectRoomsLinear(e,t){for(let s=0;s<t.length-1;s++){const a=t[s],i=t[s+1],n=a.position.x+a.dimensions.width,r=i.position.x,c=a.position.y+Math.floor(a.dimensions.height/2);for(let u=n;u<r;u++)T({x:u,y:c},this.dimensions)&&(e[c][u]=this.createFloorTile({x:u,y:c}));const h=i.position.x-1,g=c;T({x:h,y:g},this.dimensions)&&(e[g][h]=this.createDoorTile({x:h,y:g},!1)),a.connected=!0}t.length>0&&(t[t.length-1].connected=!0)}generateTutorialEntities(e){const t=[];return e.forEach((s,a)=>{if(!s.tutorialStep){console.log(`[TutorialDungeonGenerator] Room ${a} has no tutorialStep`);return}const i=s.tutorialStep,n=i.type||i;switch(console.log(`[TutorialDungeonGenerator] Room ${a}: stepId=${i.id}, roomType=${n}`),n){case"movement":break;case"items":const r=this.createTutorialItem(s,"health-potion"),c=this.createTutorialItem(s,"health-potion");c.position.x+=2,t.push(r,c);break;case"combat":t.push(this.createTutorialEnemy(s));break;case"equipment":console.log(`[TutorialDungeonGenerator] Creating weapon for equipment room at position: ${s.position.x}, ${s.position.y}`);const h=this.createTutorialItem(s,"weapon");console.log("[TutorialDungeonGenerator] Created weapon:",h),t.push(h);break}}),t}createTutorialEnemy(e){const t=e.position.x+Math.floor(e.dimensions.width/2),s=e.position.y+Math.floor(e.dimensions.height/2);return{id:P(),position:{x:t,y:s},char:"g",color:"#ff4444",type:"enemy",blocking:!0,visible:!0,health:25,maxHealth:25,damage:2,aiType:"passive"}}createTutorialItem(e,t){const s=e.position.x+Math.floor(e.dimensions.width/2),a=e.position.y+Math.floor(e.dimensions.height/2),i={id:P(),position:{x:s,y:a},type:"item",blocking:!1,visible:!0,stackable:!0,quantity:1,itemType:"consumable"};switch(t){case"health-potion":return{...i,char:"!",color:"#ff0000",name:"チュートリアル回復薬",description:"HP回復の練習用",stackable:!0,quantity:1,itemType:"consumable"};case"weapon":return{...i,char:"/",color:"#ffff00",name:"トレーニング剣",description:"装備練習用の木剣",stackable:!1,quantity:1,itemType:"weapon",weaponType:"sword",damage:3,accuracy:10,criticalChance:5,range:1};default:return{...i,char:"?",color:"#ffffff",name:"チュートリアルアイテム",description:"練習用アイテム"}}}getRoomByStep(e,t){return e.find(s=>s.tutorialStep===t)}openDoorToNextRoom(e,t,s){const a=s.position.x-1,i=t.position.y+Math.floor(t.dimensions.height/2);T({x:a,y:i},this.dimensions)&&(e[i][a]=this.createDoorTile({x:a,y:i},!0))}}class ue{data;generator;tutorialGenerator;constructor(){this.data={floors:new Map,currentFloor:1,maxFloor:1,visitedFloors:[1],maxFloorsReached:1},this.generator=new b({width:80,height:50},1),this.tutorialGenerator=new he}getDungeonData(){return{floors:new Map(this.data.floors),currentFloor:this.data.currentFloor,maxFloor:this.data.maxFloor,visitedFloors:[...this.data.visitedFloors],maxFloorsReached:this.data.maxFloorsReached}}getCurrentDungeon(){return this.data.floors.get(this.data.currentFloor)}generateTutorialDungeon(e){const t=this.tutorialGenerator.generate(e);return this.data.floors.set(0,t),this.data.currentFloor=0,t}generateInitialFloor(e){this.generator=new b({width:80,height:50},1);const t=this.generator.generate(e);if(t.rooms.length>0){const s=t.rooms[t.rooms.length-1];t.stairsDown={x:s.position.x+Math.floor(s.dimensions.width/2),y:s.position.y+Math.floor(s.dimensions.height/2)};const a=t.stairsDown;t.tiles[a.y]&&t.tiles[a.y][a.x]&&(t.tiles[a.y][a.x]={position:{...a},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}return this.data.floors.set(1,t),this.data.currentFloor=1,this.data.maxFloor=1,t}moveToFloor(e,t){if(!this.data.floors.has(e)){this.generator=new b({width:80,height:50},e);const i=this.generator.generate(t);if(e>1&&i.rooms.length>0){const n=i.rooms[0];i.stairsUp={x:n.position.x+Math.floor(n.dimensions.width/2),y:n.position.y+Math.floor(n.dimensions.height/2)};const r=i.stairsUp;i.tiles[r.y]&&i.tiles[r.y][r.x]&&(i.tiles[r.y][r.x]={position:{...r},type:"stairs",char:"<",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}if(e<10&&i.rooms.length>0){const n=i.rooms[i.rooms.length-1];i.stairsDown={x:n.position.x+Math.floor(n.dimensions.width/2),y:n.position.y+Math.floor(n.dimensions.height/2)};const r=i.stairsDown;i.tiles[r.y]&&i.tiles[r.y][r.x]&&(i.tiles[r.y][r.x]={position:{...r},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}this.data.floors.set(e,i),e>this.data.maxFloor&&(this.data.maxFloor=e)}const s=this.data.floors.get(e),a=this.data.currentFloor;if(this.data.currentFloor=e,e>a&&s.stairsUp?t.position={...s.stairsUp}:e<a&&s.stairsDown&&(t.position={...s.stairsDown}),t.position){const i=s.tiles[t.position.y]?.[t.position.x];(!i||i.blocking)&&(t.position=this.findNearestValidPosition(s,t.position))}return s}findNearestValidPosition(e,t){for(let s=1;s<=5;s++)for(let a=-s;a<=s;a++)for(let i=-s;i<=s;i++){if(Math.abs(a)!==s&&Math.abs(i)!==s)continue;const n={x:t.x+a,y:t.y+i};if(n.x<0||n.x>=e.dimensions.width||n.y<0||n.y>=e.dimensions.height)continue;const r=e.tiles[n.y]?.[n.x];if(r&&!r.blocking)return n}return t}hasStairsAt(e){const t=this.getCurrentDungeon();return t?t.stairsUp&&t.stairsUp.x===e.x&&t.stairsUp.y===e.y?"up":t.stairsDown&&t.stairsDown.x===e.x&&t.stairsDown.y===e.y?"down":null:null}getCurrentFloor(){return this.data.currentFloor}getMaxFloor(){return this.data.maxFloor}saveDungeonState(e){this.data.floors.set(this.data.currentFloor,{...e})}}class x{constructor(e,t,s,a,i,n,r,c,h){this.gameState=e,this.playerController=t,this.addMessage=s,this.processTurn=a,this.updateTutorialProgress=i,this.equipItem=n,this.getCurrentEquipmentDisplay=r,this.addMessages=c,this.notifyEquipmentToggle=h}static ITEM_EFFECTS={HEALTH_POTION:30,HEALING_HERB:15,ENERGY_BAR:20,ENERGY_CORE:50,MYSTERY_SCROLL_HEALTH:20,MYSTERY_SCROLL_ENERGY:30,MYSTERY_SCROLL_SCORE:50};showInventory(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.playerController.getPlayer().inventory,t=[];t.push(o("inventoryHeader")),e.length===0?t.push(o("inventoryEmpty")):e.forEach((s,a)=>{const i=f(s),n=Q(s);if(t.push(`[${a+1}] ${s.char} ${i} x${s.quantity}`),t.push(`     ${n}`),s.itemType==="weapon"&&"damage"in s&&"accuracy"in s){const r=o("attackPowerEffect").replace("{{damage}}",String(s.damage)).replace("{{accuracy}}",String(s.accuracy));t.push(`      ${o("effectLabel")}: ${r}`)}else if(s.itemType==="armor"&&"defense"in s){const r=o("defenseEffect").replace("{{defense}}",String(s.defense));t.push(`      ${o("effectLabel")}: ${r}`)}}),this.getCurrentEquipmentDisplay&&(t.push(""),t.push(o("currentEquipmentHeader")),this.getCurrentEquipmentDisplay().forEach(a=>{t.push(a)})),t.push(""),t.push(o("usageInstructionsHeader")),t.push(o("itemUsageInstructions")),t.push(o("itemUsageExample")),this.addMessages?this.addMessages(t):t.forEach(s=>this.addMessage(s)),this.gameState.status==="tutorial"&&this.updateTutorialProgress("inventory")}useItem(e){return this.useItemInternal(e,!0)}useItemInternal(e,t){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return!1;const s=this.playerController.getPlayer().inventory;if(e<0||e>=s.length)return this.addMessage(p("noItemInSlot",{slot:(e+1).toString()})),!1;const a=s[e],i=this.applyItemEffect(a);return i&&(this.playerController.removeItem(a.id,1),t&&this.processTurn()),i}applyItemEffect(e){if(!e)return this.addMessage(p("invalidItem")),!1;if(!e.char)return this.addMessage(p("itemCannotBeUsed",{item:f(e)})),!1;if(e.itemType==="weapon"||e.itemType==="armor")if(this.equipItem){const t=this.equipItem(e);return t&&this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment"),t}else return this.addMessage(p("itemCannotBeUsed",{item:f(e)})),!1;switch(e.char){case"!":return this.playerController.heal(x.ITEM_EFFECTS.HEALTH_POTION),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${f(e)}${o("useItem")} ${o("healthRestored").replace("{{amount}}",x.ITEM_EFFECTS.HEALTH_POTION.toString())}`),this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment"),!0;case"+":return this.playerController.heal(x.ITEM_EFFECTS.HEALING_HERB),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${f(e)}${o("useItem")} ${o("healthRestored").replace("{{amount}}",x.ITEM_EFFECTS.HEALING_HERB.toString())}`),!0;case"%":return this.playerController.restoreEnergy(x.ITEM_EFFECTS.ENERGY_BAR),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${f(e)}${o("useItem")} ${o("energyRestored").replace("{{amount}}",x.ITEM_EFFECTS.ENERGY_BAR.toString())}`),!0;case"*":return this.playerController.restoreEnergy(x.ITEM_EFFECTS.ENERGY_CORE),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${f(e)}${o("useItem")} ${o("energyRestored").replace("{{amount}}",x.ITEM_EFFECTS.ENERGY_CORE.toString())}`),!0;case"?":const t=[()=>(this.playerController.heal(x.ITEM_EFFECTS.MYSTERY_SCROLL_HEALTH),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,o("mysteryScrollHealth")),()=>(this.playerController.restoreEnergy(x.ITEM_EFFECTS.MYSTERY_SCROLL_ENERGY),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,o("mysteryScrollEnergy")),()=>(this.gameState.score+=x.ITEM_EFFECTS.MYSTERY_SCROLL_SCORE,o("mysteryScrollScore")),()=>{const i=this.gameState.currentDungeon;for(let n=0;n<i.dimensions.height;n++)for(let r=0;r<i.dimensions.width;r++)Math.random()<.3&&(i.tiles[n][r].explored=!0);return o("mysteryScrollMap")}],s=t[Math.floor(Math.random()*t.length)],a=s();return this.addMessage(`${f(e)}${o("useItem")} ${a}`),!0;default:return this.addMessage(p("itemCannotBeUsed",{item:f(e)})),!1}}addMessagesIndividually(e){e.forEach(t=>this.addMessage(t))}}class ge{constructor(e,t,s,a,i){this.gameState=e,this.playerController=t,this.useItemCallback=s,this.removeEquipmentCallback=a,this.addMessage=i}toggleInventoryOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="inventory"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showInventoryOverlay())}toggleStatusOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="character"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showStatusOverlay())}toggleTakeoffOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="takeoff"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showTakeoffOverlay())}toggleEquipmentOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="equipment"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showEquipmentOverlay())}showInventoryOverlay(){this.gameState.overlay={type:"inventory",isVisible:!0,selectedIndex:0}}showStatusOverlay(){this.gameState.overlay={type:"character",isVisible:!0,selectedIndex:0}}showTakeoffOverlay(){console.log("[OverlayManager] showTakeoffOverlay called");const e=this.playerController.getPlayer(),t=[];if(e.equipment.mainHand&&t.push({slot:"weapon",item:e.equipment.mainHand}),e.equipment.head&&t.push({slot:"armor",item:e.equipment.head}),e.equipment.chest&&t.push({slot:"armor",item:e.equipment.chest}),e.equipment.legs&&t.push({slot:"armor",item:e.equipment.legs}),e.equipment.feet&&t.push({slot:"armor",item:e.equipment.feet}),e.equipment.offHand&&t.push({slot:"armor",item:e.equipment.offHand}),console.log("[OverlayManager] Equipped items:",t.length),t.length===0){console.log("[OverlayManager] No equipped items"),this.gameState.status==="tutorial"?(console.log("[OverlayManager] Tutorial mode - showing empty takeoff overlay"),this.gameState.overlay={type:"takeoff",isVisible:!0,selectedIndex:0},this.addMessage("着脱画面を開きました。外せる装備がありません。")):this.addMessage("外せる装備がありません。");return}this.gameState.overlay={type:"takeoff",isVisible:!0,selectedIndex:0}}showEquipmentOverlay(){this.gameState.overlay={type:"equipment",isVisible:!0,selectedIndex:0}}hideOverlay(){this.gameState.overlay={type:"none",isVisible:!1,selectedIndex:0}}handleNavigation(e){if(this.gameState.overlay.isVisible)switch(this.gameState.overlay.type){case"inventory":this.handleInventoryNavigation(e);break;case"character":break;case"takeoff":this.handleTakeoffNavigation(e);break}}handleInventoryNavigation(e){const t=this.playerController.getPlayer().inventory;if(t.length===0)return;const s=this.gameState.overlay.selectedIndex??0;let a=s;switch(e){case"north":a=Math.max(0,s-1);break;case"south":a=Math.min(t.length-1,s+1);break}this.gameState.overlay.selectedIndex=a}handleTakeoffNavigation(e){const t=this.playerController.getPlayer(),s=[];if(t.equipment.mainHand&&s.push({slot:"weapon",item:t.equipment.mainHand}),t.equipment.head&&s.push({slot:"armor",item:t.equipment.head,slotName:"head"}),t.equipment.chest&&s.push({slot:"armor",item:t.equipment.chest,slotName:"chest"}),t.equipment.legs&&s.push({slot:"armor",item:t.equipment.legs,slotName:"legs"}),t.equipment.feet&&s.push({slot:"armor",item:t.equipment.feet,slotName:"feet"}),t.equipment.offHand&&s.push({slot:"armor",item:t.equipment.offHand,slotName:"offHand"}),s.length===0)return;const a=this.gameState.overlay.selectedIndex||0;let i=a;switch(e){case"north":i=Math.max(0,a-1);break;case"south":i=Math.min(s.length-1,a+1);break}this.gameState.overlay.selectedIndex=i}handleInteraction(){if(this.gameState.overlay.isVisible)switch(this.gameState.overlay.type){case"inventory":this.handleInventoryInteraction();break;case"character":break;case"takeoff":this.handleTakeoffInteraction();break}}handleInventoryInteraction(){const e=this.playerController.getPlayer().inventory,t=this.gameState.overlay.selectedIndex??0;t<e.length&&(this.useItemCallback(t),this.hideOverlay())}handleTakeoffInteraction(){const e=this.playerController.getPlayer(),t=this.gameState.overlay.selectedIndex??0,s=[];if(e.equipment.mainHand&&s.push({slot:"weapon",item:e.equipment.mainHand}),e.equipment.head&&s.push({slot:"armor",item:e.equipment.head,slotName:"head"}),e.equipment.chest&&s.push({slot:"armor",item:e.equipment.chest,slotName:"chest"}),e.equipment.legs&&s.push({slot:"armor",item:e.equipment.legs,slotName:"legs"}),e.equipment.feet&&s.push({slot:"armor",item:e.equipment.feet,slotName:"feet"}),e.equipment.offHand&&s.push({slot:"armor",item:e.equipment.offHand,slotName:"offHand"}),t<s.length){const a=s[t];a.slot==="armor"&&a.slotName?this.removeEquipmentCallback("armor"):this.removeEquipmentCallback(a.slot),this.hideOverlay()}}useItemFromOverlay(e){const t=this.playerController.getPlayer().inventory;if(e>=t.length)return;const s=t[e],a=s&&(s.itemType==="weapon"||s.itemType==="armor"),i=s&&s.itemType==="consumable";this.useItemCallback(e),a||i?this.hideOverlay():e>=t.length-1&&(this.gameState.overlay.selectedIndex=Math.max(0,t.length-2))}handlePauseOrClose(){return this.gameState.overlay.isVisible?(this.hideOverlay(),!0):!1}getOverlayState(){return this.gameState.overlay}isVisible(){return this.gameState.overlay.isVisible}isType(e){return this.gameState.overlay.type===e&&this.gameState.overlay.isVisible}}class B{constructor(e,t,s){this.configuration=e,this.eventBus=t,this.effectHandler=s,this.steps=e.steps}state=S.NOT_STARTED;steps;currentStepIndex=-1;completedStepIds=new Set;start(){if(this.state!==S.NOT_STARTED){console.warn("Tutorial already started");return}this.state=S.IN_PROGRESS,this.currentStepIndex=0,this.completedStepIds.clear(),this.steps.length>0&&(this.steps[0].state=I.ACTIVE,this.eventBus.emitTutorialStarted(),this.eventBus.emitStepStarted(this.steps[0].id),this.effectHandler.showStepStartMessage(this.steps[0]))}complete(){this.state===S.IN_PROGRESS&&(this.state=S.COMPLETED,this.eventBus.emitTutorialCompleted(),this.effectHandler.showTutorialCompletionMessage(),this.effectHandler.updateUI(this.state,null))}reset(){this.state=S.NOT_STARTED,this.currentStepIndex=-1,this.completedStepIds.clear(),this.steps.forEach(e=>{e.state=I.PENDING})}skip(){this.state===S.IN_PROGRESS&&(this.state=S.SKIPPED,this.eventBus.emitTutorialCompleted())}isActive(){return this.state===S.IN_PROGRESS}isCompleted(){return this.state===S.COMPLETED||this.state===S.SKIPPED}getCurrentStep(){return this.currentStepIndex<0||this.currentStepIndex>=this.steps.length?null:this.steps[this.currentStepIndex]}getStepById(e){return this.steps.find(t=>t.id===e)||null}moveToNextStep(){if(!this.isActive())return!1;const e=this.getCurrentStep();if(e&&(e.state=I.COMPLETED,this.completedStepIds.add(e.id),this.eventBus.emitStepCompleted(e.id),this.effectHandler.showStepCompletionMessage(e)),this.currentStepIndex++,this.currentStepIndex>=this.steps.length)return this.complete(),!1;const t=this.getCurrentStep();return t&&(t.state=I.ACTIVE,this.eventBus.emitStepStarted(t.id),this.effectHandler.showStepStartMessage(t),this.effectHandler.updateUI(this.state,t)),!0}isStepCompleted(e){return this.completedStepIds.has(e)}updateProgress(e){if(!this.isActive())return;const t=this.getCurrentStep();if(!t)return;const s={gameState:e,eventBus:this.eventBus,effectHandler:this.effectHandler},a=t.checkCompletion(s);console.log(`[SimpleTutorialOrchestrator] Step ${t.id} completion check: ${a}`),a&&(console.log(`[Tutorial] Step ${t.id} completed, advancing to next step`),console.log(`[Tutorial] Opening door for step: ${t.id}`),this.effectHandler.openDoorForStep(t.id,e),this.eventBus.emitDoorOpened(t.id),this.moveToNextStep())}checkCompletionConditions(){const e=this.getCurrentStep();return e?e.state===I.COMPLETED:!1}isActionAllowed(e){if(!this.isActive())return!0;const t=this.getCurrentStep();if(!t)return!0;const s=t.isActionAllowed(e);return s||(this.eventBus.emitActionBlocked(e,"このアクションは現在のチュートリアルステップでは実行できません"),this.effectHandler.showActionBlockedMessage(e,`${t.title}を完了してください`)),s}getState(){return{isActive:this.state===S.IN_PROGRESS,currentStepId:this.currentStepIndex>=0&&this.currentStepIndex<this.steps.length?this.steps[this.currentStepIndex].id:null,currentStepIndex:this.currentStepIndex,completedSteps:this.completedStepIds.size,isCompleted:this.state===S.COMPLETED}}getCompletedStepIds(){return Array.from(this.completedStepIds)}}class me{listeners=new Map;onceListeners=new Map;on(e,t){this.listeners.has(e)||this.listeners.set(e,new Set),this.listeners.get(e).add(t)}off(e,t){const s=this.listeners.get(e);s&&(s.delete(t),s.size===0&&this.listeners.delete(e));const a=this.onceListeners.get(e);a&&(a.delete(t),a.size===0&&this.onceListeners.delete(e))}once(e,t){this.onceListeners.has(e)||this.onceListeners.set(e,new Set),this.onceListeners.get(e).add(t)}emit(e,t){const s={type:e,timestamp:Date.now(),data:t},a=this.listeners.get(e);a&&a.forEach(n=>{try{n(s)}catch(r){console.error(`Error in event handler for ${e}:`,r)}});const i=this.onceListeners.get(e);i&&(i.forEach(n=>{try{n(s)}catch(r){console.error(`Error in once handler for ${e}:`,r)}}),this.onceListeners.delete(e))}publish(e){this.emit(e.type,e)}emitTutorialStarted(){this.emit("tutorial:started",{})}emitTutorialCompleted(){this.emit("tutorial:completed",{})}emitStepStarted(e){this.emit("tutorial:step:started",{stepId:e})}emitStepCompleted(e){this.emit("tutorial:step:completed",{stepId:e})}emitActionBlocked(e,t){this.emit("tutorial:action:blocked",{action:e,reason:t})}emitDoorOpened(e){this.emit("tutorial:door:opened",{stepId:e})}clear(){this.listeners.clear(),this.onceListeners.clear()}}class W{constructor(e,t,s){this.addMessage=e,this.updateTiles=t,this.setGameStatus=s}openedDoors=new Set;openDoorForStep(e,t){if(this.openedDoors.has(e))return;const s=t.currentDungeon?.tiles;if(!s){console.warn("Cannot open door: tiles not available");return}const i={step_movement:{x:13,y:15},step_item_pickup:{x:25,y:15},step_equipment:{x:37,y:15},step_combat:{x:49,y:15}}[e];i&&(this.openDoorAt(s,i),this.openedDoors.add(e),this.updateTiles&&this.updateTiles(s))}isDoorOpenForStep(e){return this.openedDoors.has(e)}calculateDoorPosition(e,t){const s=t.position.x-1,a=e.position.y+Math.floor(e.dimensions.height/2);return{x:s,y:a}}openDoorAt(e,t){e[t.y]&&e[t.y][t.x]&&(e[t.y][t.x]={...e[t.y][t.x],type:"floor",char:".",blocking:!1},console.log(`Door opened at (${t.x}, ${t.y})`))}getStepIndexFromId(e){return{step_movement:0,step_item_pickup:1,step_equipment:2,step_combat:3,step_character_status:4}[e]??-1}showStepStartMessage(e){this.addMessage(`=== ${e.title} ===`),this.addMessage(e.description),e.hint&&this.addMessage(`ヒント: ${e.hint}`)}showStepCompletionMessage(e){const s={step_movement:"移動チュートリアル完了！扉が開きました。",step_item_pickup:"アイテム使用完了！扉が開きました。",step_equipment:"装備着脱完了！扉が開きました。",step_combat:"戦闘チュートリアル完了！扉が開きました。",step_character_status:"ステータス確認完了！これで全ての基本操作を学びました。"}[e.id]||`${e.title}を完了しました！`;this.addMessage(s)}showHintMessage(e){e.hint&&this.addMessage(`💡 ヒント: ${e.hint}`)}showActionBlockedMessage(e,t){this.addMessage(`⚠️ ${t}`)}showTutorialCompletionMessage(){this.addMessage(""),this.addMessage("★━━━━━━━━━━━━━━━━━━━━━━★"),this.addMessage("   チュートリアル完了！"),this.addMessage("★━━━━━━━━━━━━━━━━━━━━━━★"),this.addMessage(""),this.addMessage("おめでとうございます！全ての基本操作をマスターしました。"),this.addMessage(""),this.addMessage("ESCキーでメニューを開き、「タイトルに戻る」を選択してください。"),this.addMessage("本編でお会いしましょう！"),this.addMessage("")}reset(){this.openedDoors.clear()}updateUI(e,t){this.setGameStatus&&(e===S.IN_PROGRESS?this.setGameStatus("tutorial"):(e===S.COMPLETED||e===S.SKIPPED)&&this.setGameStatus("tutorial"))}placeItemForStep(e,t){const a={step_item_pickup:{type:"health_potion",position:{x:15,y:10}},step_equipment:{type:"sword",position:{x:25,y:10}}}[e.id];if(a&&t.currentDungeon){const i={id:`tutorial_${a.type}`,type:"item",char:a.type.includes("potion")?"!":"S",name:a.type,itemType:a.type.includes("potion")?"consumable":"weapon",position:a.position};t.currentDungeon.entities||(t.currentDungeon.entities=[]),t.currentDungeon.entities.push(i)}}}class pe{steps=[{id:"pickup",action:"F",description:"武器を拾う",completed:!1},{id:"open_equipment",action:"E",description:"装備画面を開く",completed:!1},{id:"open_takeoff",action:"T",description:"着脱画面を開く",completed:!1},{id:"unequip",action:"Click",description:"装備を外す",completed:!1}];currentStepIndex=0;advanceStep(){const e=this.getCurrentStep();e&&!e.completed&&(e.completed=!0),this.currentStepIndex<this.steps.length-1&&this.currentStepIndex++}getCurrentStep(){return this.steps[this.currentStepIndex]||null}isCompleted(){return this.steps.every(e=>e.completed)}reset(){this.currentStepIndex=0,this.steps.forEach(e=>{e.completed=!1})}handlePickup(){const e=this.steps.find(t=>t.id==="pickup");e&&this.currentStepIndex===0&&(e.completed=!0,this.currentStepIndex=1,console.log("Equipment picked up, moving to equipment view step"))}handleEquipmentOpen(){console.log("[EquipmentFlow] handleEquipmentOpen called, currentStepIndex:",this.currentStepIndex);const e=this.steps.find(t=>t.id==="open_equipment");e&&this.currentStepIndex===1?(e.completed=!0,this.currentStepIndex=2,console.log("[EquipmentFlow] Equipment view opened, moving to takeoff view step, new index:",this.currentStepIndex)):console.log("[EquipmentFlow] Equipment open condition not met:",{hasStep:!!e,currentStepIndex:this.currentStepIndex,expectedIndex:1})}handleTakeoffOpen(){console.log("[EquipmentFlow] handleTakeoffOpen called, currentStepIndex:",this.currentStepIndex);const e=this.steps.find(t=>t.id==="open_takeoff");console.log("[EquipmentFlow] open_takeoff step found:",!!e),console.log("[EquipmentFlow] Steps status:",this.steps.map(t=>({id:t.id,completed:t.completed}))),e&&this.currentStepIndex===2?(e.completed=!0,this.currentStepIndex=3,console.log("Takeoff view opened, moving to unequip step")):console.log("[EquipmentFlow] Condition not met:",{hasStep:!!e,currentStepIndex:this.currentStepIndex,expectedIndex:2})}handleUnequip(){const e=this.steps.find(t=>t.id==="unequip");e&&this.currentStepIndex===3&&(e.completed=!0,console.log("Equipment unequipped, flow completed"))}getCurrentDescription(){const e=this.getCurrentStep();return e?`${e.description}（${e.action}キー）`:this.isCompleted()?"装備チュートリアル完了！":""}getProgress(){const e=this.steps.filter(s=>s.completed).length,t=this.steps.length;return{current:e,total:t,percentage:Math.round(e/t*100)}}isActionRequired(e){const t=this.getCurrentStep();return!t||t.completed?!1:{pickup:"F",open_equipment:"E",open_takeoff:"T",unequip:"Click"}[t.id]===e}forceComplete(){this.steps.forEach(e=>{e.completed=!0}),this.currentStepIndex=this.steps.length-1,console.log("Equipment flow force completed")}}class de{timers=new Map;hintsEnabled=!0;messagePresenter;constructor(e){this.messagePresenter=e}startHintTimer(e,t,s){if(!this.hintsEnabled){t.logger?.debug(`Hints disabled, skipping timer for step: ${e}`);return}this.cancelHintTimer(e);const a=setTimeout(()=>{this.messagePresenter.showHint(e,t,{metadata:{level:s.hintLevel,triggered:"timer"}}),this.removeTimer(e,a)},s.delay),i=this.timers.get(e)||[];i.push(a),this.timers.set(e,i),t.logger?.debug(`Hint timer started for step ${e}, delay: ${s.delay}ms`)}startProgressiveHints(e,t,s){if(console.log("[HintTimerManager] startProgressiveHints called:",{stepId:e,hintsCount:s.length,hintsEnabled:this.hintsEnabled}),!this.hintsEnabled){t.logger?.debug(`Hints disabled, skipping progressive hints for step: ${e}`),console.log("[HintTimerManager] Hints disabled globally");return}this.cancelHintTimer(e);const a=[];s.forEach(i=>{console.log(`[HintTimerManager] Setting timer for step ${e}, level ${i.level}, delay: ${i.delay}ms`);const n=setTimeout(()=>{if(console.log(`[HintTimerManager] Timer fired for step ${e}, level ${i.level}`),console.log("[HintTimerManager] messagePresenter exists:",!!this.messagePresenter),this.messagePresenter){console.log(`[HintTimerManager] Calling showHint for step ${e}`);try{this.messagePresenter.showHint(e,t,{metadata:{level:i.level,triggered:"timer"}}),console.log("[HintTimerManager] showHint called successfully")}catch(r){console.log("[HintTimerManager] ERROR calling showHint:",r)}}else console.log("[HintTimerManager] ERROR: No messagePresenter available!");this.removeTimer(e,n)},i.delay);a.push(n)}),this.timers.set(e,a),t.logger?.debug(`Progressive hints started for step ${e}, ${s.length} levels`)}configureStepHints(e,t){if(console.log("[HintTimerManager] configureStepHints called:",{stepId:e.stepId,enabled:e.hints.enabled,progressive:e.hints.progressive,single:e.hints.single}),!e.hints.enabled){t.logger?.debug(`Hints disabled in config for step: ${e.stepId}`),console.log("[HintTimerManager] Hints disabled for step:",e.stepId);return}e.hints.progressive?(console.log("[HintTimerManager] Starting progressive hints for step:",e.stepId),this.startProgressiveHints(e.stepId,t,e.hints.progressive)):e.hints.single&&(console.log("[HintTimerManager] Starting single hint for step:",e.stepId),this.startHintTimer(e.stepId,t,e.hints.single))}cancelHintTimer(e){const t=this.timers.get(e);t&&(t.forEach(s=>clearTimeout(s)),this.timers.delete(e))}cancelAllTimers(){this.timers.forEach((e,t)=>{e.forEach(s=>clearTimeout(s))}),this.timers.clear()}setHintsEnabled(e){this.hintsEnabled=e,e||this.cancelAllTimers()}isHintsEnabled(){return this.hintsEnabled}getActiveTimerCount(){let e=0;return this.timers.forEach(t=>{e+=t.length}),e}removeTimer(e,t){const s=this.timers.get(e);if(s){const a=s.indexOf(t);a>-1&&s.splice(a,1),s.length===0&&this.timers.delete(e)}}cleanup(){this.cancelAllTimers()}}function V(l,e,t,s){return{type:l,timestamp:Date.now(),source:e,data:t,stepId:s}}class fe{type="message-presenter";id="tutorial-message-presenter";name="Tutorial Message Presenter";isInitialized=!0;messages=new Map;displayQueue=[];currentMessage=null;shownHints=new Set;logger;addMessageCallback;isProcessing=!1;defaultDisplayDuration=5e3;defaultHintDelay=1e4;stepMessages=new Map([["movement",{instruction:"WASDキーまたは矢印キーでプレイヤーを移動させてください。",hint:"移動のコツ: 一歩ずつ確実に進みましょう。",success:"移動完了！次のエリアへ進めます。",error:"その方向には移動できません。別の方向を試してください。"}],["step_movement",{instruction:"WASDキーまたは矢印キーでプレイヤーを移動させてください。",hintLevels:{1:"ヒント: WASDキーまたは矢印キーで移動できます",2:"ヒント: 壁にぶつからないように、緑のタイルを目指して移動してください",3:"ヒント: W/↑(上), A/←(左), S/↓(下), D/→(右) で移動します。緑のゴールタイルに到達しましょう！"},success:"移動完了！次のエリアへ進めます。",error:"その方向には移動できません。別の方向を試してください。"}],["item-pickup",{instruction:"アイテムの上で Spaceキー を押してアイテムを拾ってください。",hint:"アイテムは黄色で表示されています。近づいてSpaceキーを押しましょう。",success:"アイテムを取得しました！インベントリに追加されました。",error:"アイテムが見つかりません。アイテムの上に立ってからSpaceキーを押してください。"}],["step_item_pickup",{instruction:"アイテムの上に移動してアイテムを拾ってください。",hintLevels:{1:"ヒント: アイテムの上に移動すると自動的に拾います",2:"ヒント: 黄色いタイルがアイテムです。その上に移動してください"},success:"アイテムを取得しました！",error:"アイテムが見つかりません。"}],["step_item_use",{instruction:"数字キー(1-9)でアイテムを選択して使用してください。",hintLevels:{1:"ヒント: 数字キー(1-9)でインベントリのアイテムを使用できます",2:"ヒント: インベントリの最初のアイテムは1キー、2番目は2キーで使用します",3:"ヒント: Iキーでインベントリを開いて確認し、対応する数字キーで使用してください"},success:"アイテムを使用しました！",error:"アイテムを使用できません。"}],["equipment",{instruction:"Eキーで装備画面を開き、拾ったアイテムを装備してください。",hint:"装備すると攻撃力や防御力が上がります。",success:"装備完了！ステータスが向上しました。",error:"装備に失敗しました。インベントリにアイテムがあるか確認してください。"}],["combat",{instruction:"敵に近づいて攻撃してください。",hint:"敵の隣に移動すると自動で攻撃が発動します。",success:"戦闘勝利！経験値を獲得しました。",error:"戦闘で苦戦しています。装備を確認するか、アイテムを使用してください。"}],["status",{instruction:"Cキーでステータス画面を開き、成長を確認してください。",hint:"レベルアップや装備効果でステータスが変化します。",success:"チュートリアル完了！お疲れ様でした。",error:"ステータス画面が開けません。Cキーを押してください。"}]]);constructor(e,t){this.logger=e,this.addMessageCallback=t,this.logger.debug("TutorialMessagePresenter initialized")}setMessageCallback(e){this.addMessageCallback=e,this.logger.debug("Message callback updated")}showStepInstruction(e,t,s){const a=this.stepMessages.get(e);if(!a||!a.instruction){this.logger.warn(`No instruction message found for step: ${e}`);return}this.showMessage(a.instruction,t,{type:"instruction",priority:"high",stepId:e,clearPrevious:!0,...s})}registerHintMessage(e,t,s){this.stepMessages.has(e)||this.stepMessages.set(e,{});const a=this.stepMessages.get(e);a.hint||(a.hint=s),a.hintLevels||(a.hintLevels={}),a.hintLevels[t]=s}showHint(e,t,s){console.log("[TutorialMessagePresenter] showHint called:",{stepId:e,options:s,hasStepMessages:this.stepMessages.has(e)});const a=`${e}-hint`;if(s?.showOnce&&this.shownHints.has(a)){this.logger.debug(`Hint already shown for step: ${e}`),console.log("[TutorialMessagePresenter] Hint already shown, skipping");return}const i=this.stepMessages.get(e);if(console.log("[TutorialMessagePresenter] Step messages:",i),!i||!i.hint&&!i.hintLevels){this.logger.warn(`No hint message found for step: ${e}`),console.log("[TutorialMessagePresenter] No hint message found for step:",e);return}const n=()=>{let r=i.hint;s?.metadata?.level&&i.hintLevels&&(r=i.hintLevels[s.metadata.level]||r),this.showMessage(r,t,{type:"hint",priority:"normal",stepId:e,metadata:s?.metadata}),this.shownHints.add(a);const c=V("hint.shown","MessagePresenter",{stepId:e,content:i.hint,triggerReason:"request"},e);t.eventBus.publish(c)};s?.delay&&s.delay>0?setTimeout(n,s.delay):n()}showSuccess(e,t,s){const a=this.stepMessages.get(e),i=s||a?.success||"ステップ完了！";this.showMessage(i,t,{type:"success",priority:"high",stepId:e,duration:3e3})}showError(e,t,s){let i=this.stepMessages.get(e)?.error||"エラーが発生しました。";s&&(i+=` (${s})`),this.showMessage(i,t,{type:"error",priority:"critical",stepId:e,duration:7e3})}showMessage(e,t,s={}){const a=this.generateMessageId(),i={id:a,type:s.type||"info",priority:s.priority||"normal",content:e,stepId:s.stepId,timestamp:Date.now(),displayDuration:s.duration||this.defaultDisplayDuration,isLocalized:!1,metadata:s.metadata};s.clearPrevious&&this.clearCurrentMessage(),this.messages.set(a,i),this.addToDisplayQueue(i);const n=V("message.shown","MessagePresenter",{messageId:a,content:i.content,priority:i.priority,duration:i.displayDuration||3e3},i.stepId);t.eventBus.publish(n),this.logger.debug(`Message queued: ${i.type}`,{messageId:a,stepId:i.stepId,priority:i.priority}),this.processDisplayQueue()}addCustomStepMessage(e,t,s){this.stepMessages.has(e)||this.stepMessages.set(e,{});const a=this.stepMessages.get(e);a[t]=s,this.logger.debug(`Added custom message for step ${e}: ${t}`)}updateStepMessages(e,t){this.stepMessages.set(e,{...t}),this.logger.debug(`Updated messages for step: ${e}`)}clearCurrentMessage(){this.currentMessage&&(this.logger.debug(`Clearing current message: ${this.currentMessage.id}`),this.currentMessage=null)}clearAllMessages(){this.messages.clear(),this.displayQueue.length=0,this.currentMessage=null,this.logger.debug("All messages cleared")}resetHints(){this.shownHints.clear(),this.logger.debug("Hint history reset")}getMessageHistory(e){const t=Array.from(this.messages.values());return e?t.filter(s=>s.stepId===e):t.sort((s,a)=>s.timestamp-a.timestamp)}getHintShowCount(e){const t=`${e}-hint`;return this.shownHints.has(t)?1:0}getStats(){const e=Array.from(this.messages.values()),t=new Map,s=new Map;for(const a of e){const i=t.get(a.type)||0;if(t.set(a.type,i+1),a.stepId){const n=s.get(a.stepId)||0;s.set(a.stepId,n+1)}}return{totalMessages:e.length,queueSize:this.displayQueue.length,hintsShown:this.shownHints.size,messagesByType:Object.fromEntries(t),messagesByStep:Object.fromEntries(s),currentMessage:this.currentMessage?.id,isProcessing:this.isProcessing}}generateMessageId(){return`msg_${Date.now()}_${Math.random().toString(36).substr(2,6)}`}addToDisplayQueue(e){const t={critical:4,high:3,normal:2,low:1},s=t[e.priority],a=this.displayQueue.findIndex(i=>t[i.priority]<s);a===-1?this.displayQueue.push(e):this.displayQueue.splice(a,0,e)}async processDisplayQueue(){if(!(this.isProcessing||this.displayQueue.length===0)){this.isProcessing=!0;try{for(;this.displayQueue.length>0;){const e=this.displayQueue.shift();await this.displayMessage(e)}}catch(e){this.logger.error("Error processing display queue",e)}finally{this.isProcessing=!1}}}async displayMessage(e){this.currentMessage=e,console.log("[TutorialMessagePresenter] displayMessage called:",{content:e.content,type:e.type,hasCallback:!!this.addMessageCallback}),this.addMessageCallback?(console.log("[TutorialMessagePresenter] Calling addMessageCallback with:",e.content),this.addMessageCallback({text:e.content,type:e.type,priority:e.priority})):console.log("[TutorialMessagePresenter] No addMessageCallback set!"),this.logger.debug(`Displaying message: ${e.id}`,{type:e.type,content:e.content}),e.displayDuration&&e.displayDuration>0&&await new Promise(t=>setTimeout(t,e.displayDuration))}update(e){}initialize(e){this.logger.debug("TutorialMessagePresenter initialize() called")}getState(){return{messagesCount:this.messages.size,queueLength:this.displayQueue.length,currentMessage:this.currentMessage?{id:this.currentMessage.id,type:this.currentMessage.type,priority:this.currentMessage.priority,stepId:this.currentMessage.stepId}:null,shownHintsCount:this.shownHints.size,isProcessing:this.isProcessing,hasCallback:!!this.addMessageCallback}}cleanup(){this.clearAllMessages(),this.resetHints(),this.addMessageCallback=void 0,this.logger.debug("TutorialMessagePresenter cleaned up")}}class R{static DEFAULT_HINT_DELAY=5e3;static PROGRESSIVE_DELAYS=[5e3,1e4,15e3];static STEP_HINTS={step_movement:{enabled:!0,progressive:[{delay:5e3,level:1},{delay:1e4,level:2},{delay:15e3,level:3}],messages:{level1:"ヒント: WASDキーまたは矢印キーで移動できます",level2:"ヒント: 壁にぶつからないように、緑のタイルを目指して移動してください",level3:"ヒント: W/↑(上), A/←(左), S/↓(下), D/→(右) で移動します。緑のゴールタイルに到達しましょう！"}},step_item_pickup:{enabled:!0,progressive:[{delay:7e3,level:1},{delay:14e3,level:2}],messages:{level1:"ヒント: アイテムの上に移動すると自動的に拾います",level2:"ヒント: 黄色いタイルがアイテムです。その上に移動してください"}},step_item_use:{enabled:!0,progressive:[{delay:5e3,level:1},{delay:1e4,level:2},{delay:2e4,level:3}],messages:{level1:"ヒント: 数字キー(1-9)でインベントリのアイテムを使用できます",level2:"ヒント: インベントリの最初のアイテムは1キー、2番目は2キーで使用します",level3:"ヒント: Iキーでインベントリを開いて確認し、対応する数字キーで使用してください"}},step_door_opening:{enabled:!0,progressive:[{delay:6e3,level:1},{delay:12e3,level:2}],messages:{level1:"ヒント: 鍵を持っていればドアに触れると開きます",level2:"ヒント: まず鍵を拾ってから、茶色のドアタイルに移動してください"}},step_combat:{enabled:!0,progressive:[{delay:8e3,level:1},{delay:15e3,level:2},{delay:25e3,level:3}],messages:{level1:"ヒント: 敵に隣接して移動すると攻撃します",level2:"ヒント: 赤いタイルが敵です。隣接して移動方向キーを押すと攻撃できます",level3:"ヒント: 敵の隣で敵の方向に移動キーを押すと攻撃します。HPに注意しながら戦いましょう"}},step_equipment:{enabled:!0,progressive:[{delay:7e3,level:1},{delay:14e3,level:2}],messages:{level1:"ヒント: Eキーで装備画面を開きます",level2:"ヒント: Tキーで着脱画面を開いて装備を外すこともできます"}}};static GLOBAL_SETTINGS={hintsEnabledByDefault:!0,showHintToggleKey:"H",hintDisplayDuration:5e3,maxHintLevel:3};static getStepHintConfig(e){return this.STEP_HINTS[e]}static getHintMessage(e,t){const s=this.STEP_HINTS[e];if(!(!s||!s.messages))switch(t){case 1:return s.messages.level1;case 2:return s.messages.level2;case 3:return s.messages.level3;default:return s.messages.level1}}static isHintEnabledForStep(e){const t=this.STEP_HINTS[e];return t?t.enabled:!1}static getProgressiveHints(e){return this.STEP_HINTS[e]?.progressive}}class ye{orchestrator;eventBus;effectHandler;configuration;equipmentFlow;hintTimerManager;messagePresenter;hintsEnabled=!0;constructor(){this.configuration=new z,this.eventBus=new me,this.effectHandler=new W(()=>{},void 0,void 0),this.orchestrator=new B(this.configuration,this.eventBus,this.effectHandler),this.equipmentFlow=new pe,this.setupEventListeners()}setCallbacks(e){this.effectHandler=new W(e.addMessage,e.updateTiles,e.setGameStatus);const t={info:(s,a)=>console.log(s,a),debug:(s,a)=>console.debug(s,a),warn:(s,a)=>console.warn(s,a),error:(s,a)=>console.error(s,a),setLevel:()=>{},getLevel:()=>"info",clear:()=>{}};this.messagePresenter=new fe(t,e.addMessage),this.hintTimerManager=new de(this.messagePresenter),this.hintTimerManager.setHintsEnabled(this.hintsEnabled),this.orchestrator=new B(this.configuration,this.eventBus,this.effectHandler),this.eventBus.on("tutorial:step:started",s=>{const a=s.data?.stepId;if(console.log("[HintTimer] Step started event received:",a),!a||!this.hintsEnabled)return;console.log("[HintTimer] Looking for config key:",a);const i=R.getStepHintConfig(a);if(i&&this.hintTimerManager){const n={messagePresenter:this.messagePresenter,logger:t,eventBus:this.eventBus},r={stepId:a,hints:{enabled:i.enabled,progressive:i.progressive||[]}};this.hintTimerManager.configureStepHints(r,n)}}),this.eventBus.on("tutorial:step:completed",s=>{s.data?.stepId&&this.hintTimerManager&&this.hintTimerManager.cancelAllTimers()})}start(){if(console.log("[CleanTutorialSystem] start() called"),this.orchestrator.start(),this.hintsEnabled){const e=this.orchestrator.getCurrentStep();if(console.log("[CleanTutorialSystem] Current step:",e?.id),console.log("[CleanTutorialSystem] HintTimerManager exists:",!!this.hintTimerManager),e&&this.hintTimerManager){const t=e.id;console.log("[HintTimer] Starting hints for initial step:",t);const s=R.getStepHintConfig(t);if(console.log("[HintTimer] Step config:",s),s){const a={messagePresenter:this.messagePresenter,logger:{debug:n=>console.log("[Tutorial]",n),info:n=>console.log("[Tutorial]",n),warn:n=>console.warn("[Tutorial]",n),error:n=>console.error("[Tutorial]",n)},eventBus:this.eventBus},i={stepId:t,hints:{enabled:s.enabled,progressive:s.progressive||[]}};this.hintTimerManager.configureStepHints(i,a)}}}}complete(){this.orchestrator.complete()}reset(){this.orchestrator.reset(),this.equipmentFlow.reset(),this.effectHandler.reset(),this.eventBus.clear()}skip(){this.orchestrator.skip()}updateProgress(e){this.orchestrator.updateProgress(e)}isActionAllowed(e){return this.orchestrator.isActionAllowed(e)}isActive(){return this.orchestrator.isActive()}isCompleted(){return this.orchestrator.isCompleted()}getCurrentStep(){return this.orchestrator.getCurrentStep()}getCurrentStepId(){return this.orchestrator.getCurrentStep()?.id||""}getState(){return this.orchestrator.getState()}setHintsEnabled(e){this.hintsEnabled=e,this.hintTimerManager&&this.hintTimerManager.setHintsEnabled(e)}getHintsEnabled(){return this.hintsEnabled}resetHintTimerOnAction(){if(this.hintTimerManager){const e=this.orchestrator.getCurrentStep();if(e){this.hintTimerManager.cancelHintTimer(e.id);const t=R.getStepHintConfig(e.id);if(t&&t.enabled){const s={messagePresenter:this.messagePresenter,logger:{debug:i=>console.log("[Tutorial]",i),info:i=>console.log("[Tutorial]",i),warn:i=>console.warn("[Tutorial]",i),error:i=>console.error("[Tutorial]",i)},eventBus:this.eventBus},a={stepId:e.id,hints:{enabled:t.enabled,progressive:t.progressive||[]}};this.hintTimerManager.configureStepHints(a,s)}}}}markItemUsed(){const e=this.orchestrator.getCurrentStep();console.log("[Tutorial] markItemUsed called, current step:",e?.id),e?.id==="step_item_pickup"?(console.log("[Tutorial] Notifying item use action"),d.notifyAction("step_item_pickup","item_use")):console.log("[Tutorial] Not in item pickup step, ignoring markItemUsed")}markCombatCompleted(){this.orchestrator.getCurrentStep()?.id==="step_combat"&&d.notifyAction("step_combat","combat_complete")}markStatusViewed(){this.orchestrator.getCurrentStep()?.id==="step_character_status"&&d.notifyAction("step_character_status","status_view")}markEquipmentPickedUp(){this.orchestrator.getCurrentStep()?.id==="step_equipment"&&(this.equipmentFlow.handlePickup(),d.notifyAction("step_equipment","pickup"))}markEquipmentViewOpened(){console.log("[Tutorial] markEquipmentViewOpened called");const e=this.orchestrator.getCurrentStep();console.log("[Tutorial] Current step:",e?.id),e?.id==="step_equipment"&&(console.log("[Tutorial] Calling equipmentFlow.handleEquipmentOpen"),this.equipmentFlow.handleEquipmentOpen(),d.notifyAction("step_equipment","open_equipment"),console.log("[Tutorial] After handleEquipmentOpen, phases:",this.equipmentFlow.steps.map(t=>({id:t.id,completed:t.completed}))))}markTakeoffViewOpened(){console.log("[Tutorial] markTakeoffViewOpened called");const e=this.orchestrator.getCurrentStep();console.log("[Tutorial] Current step in markTakeoffViewOpened:",e?.id),e?.id==="step_equipment"&&(console.log("[Tutorial] Processing takeoff view open"),this.equipmentFlow.handleTakeoffOpen(),d.notifyAction("step_equipment","open_takeoff"),console.log("[Tutorial] After handleTakeoffOpen, phases:",this.equipmentFlow.steps.map(t=>({id:t.id,completed:t.completed}))))}markEquipmentToggled(){console.log("[Tutorial] markEquipmentToggled called");const e=this.orchestrator.getCurrentStep();if(console.log("[Tutorial] Current step:",e?.id),e?.id==="step_equipment"){console.log("[Tutorial] Processing equipment toggle"),this.equipmentFlow.handleUnequip(),d.notifyAction("step_equipment","unequip");const t=this.equipmentFlow.isCompleted();console.log("[Tutorial] Equipment flow completed:",t),console.log("[Tutorial] Equipment flow phases:",this.equipmentFlow.steps.map(s=>({id:s.id,completed:s.completed}))),t&&(console.log("[Tutorial] Equipment step completed, opening door to combat room"),this.openDoorToCombatRoom(),this.orchestrator.moveToNextStep())}}markStepComplete(e){console.log("[Tutorial] markStepComplete called for:",e);const t=this.orchestrator.getCurrentStep();if(t&&t.id===e)switch(console.log("[Tutorial] Marking step as complete:",e),e){case"step_movement":this.orchestrator.moveToNextStep();break;case"step_item_pickup":d.notifyAction("step_item_pickup","item_use"),this.orchestrator.moveToNextStep(),this.openDoorToEquipmentRoom();break;case"step_equipment":this.equipmentFlow.forceComplete(),d.notifyAction("step_equipment","complete"),this.orchestrator.moveToNextStep();break;case"step_combat":d.notifyAction("step_combat","combat_complete"),this.orchestrator.moveToNextStep();break;case"step_character_status":d.notifyAction("step_character_status","status_view"),this.orchestrator.moveToNextStep();break;default:console.warn("[Tutorial] Unknown step ID:",e)}else console.log("[Tutorial] Step ID does not match current step:",{requested:e,current:t?.id})}getEquipmentTutorialMessage(){return this.orchestrator.getCurrentStep()?.id==="step_equipment"?this.equipmentFlow.getCurrentDescription():""}markActionCompleted(e){console.log(`Action completed: ${e}`)}getStepInfo(){const e=this.orchestrator.getCurrentStep();return e?{id:e.id,title:e.title,description:e.description,targetAction:e.targetAction,targetPosition:e.targetPosition}:null}getCurrentStepInfo(){return this.getStepInfo()}getProgress(){return{currentStep:this.orchestrator.getState().currentStepIndex+1,totalSteps:this.configuration.totalSteps}}getCompletedStepIds(){return this.orchestrator.getCompletedStepIds()}checkStepCompletion(e){return this.orchestrator.isStepCompleted(e)}get state(){const e=this.orchestrator.getState();return{isActive:e.isActive,currentStep:e.currentStepId,currentStepId:e.currentStepId,currentStepIndex:e.currentStepIndex,totalSteps:this.configuration.totalSteps,completedSteps:e.completedSteps,isCompleted:e.isCompleted,progress:{current:e.currentStepIndex,total:this.configuration.totalSteps}}}getCoordinateInfo(){const e=this.orchestrator.getCurrentStep();return{currentStep:e?.id,targetPosition:e?.targetPosition,welcomeRoomPosition:{x:2,y:12},playerStartPosition:{x:4,y:14},movementTargetPosition:{x:6,y:15},roomDimensions:{width:8,height:6}}}openDoorToEquipmentRoom(){const e=globalThis.game||window.game,t=e?.getGameState?.()||e?.gameState;if(!t)return;const s=t.currentDungeon?.rooms;if(s&&s.length>=3){const i=s[2];if(i){const n=i.position.x-1,r=i.position.y+Math.floor(i.dimensions.height/2),c=t.currentDungeon.tiles;c[r]&&c[r][n]&&c[r][n].type==="door"&&(c[r][n].blocking=!1,c[r][n].char=" ")}}}openDoorToCombatRoom(){const e=globalThis.game||window.game,t=e?.getGameState?.()||e?.gameState;if(!t)return;const s=t.currentDungeon?.rooms;if(s&&s.length>=4){const i=s[3];if(i){const n=i.position.x-1,r=i.position.y+Math.floor(i.dimensions.height/2),c=t.currentDungeon.tiles;c[r]&&c[r][n]&&c[r][n].type==="door"&&(c[r][n].blocking=!1,c[r][n].char=" ",console.log("[Tutorial] Opening door to combat room at:",n,r))}}}setupEventListeners(){this.eventBus.on("tutorial:step:started",e=>{if(e.data.stepId==="step_equipment"&&this.openDoorToEquipmentRoom(),this.hintsEnabled&&this.hintTimerManager&&this.messagePresenter){const t=e.data.stepId,s=R.getStepHintConfig(t);if(s&&s.enabled){const a={gameState:{},eventBus:this.eventBus,services:{getService:()=>null},logger:{info:(i,n)=>console.log(i,n),debug:(i,n)=>console.debug(i,n),warn:(i,n)=>console.warn(i,n),error:(i,n)=>console.error(i,n),setLevel:()=>{},getLevel:()=>"info",clear:()=>{}},metrics:{recordEvent:()=>{},incrementCounter:()=>{},setGauge:()=>{},recordDuration:()=>{},getMetrics:()=>({})}};s.messages&&Object.entries(s.messages).forEach(([i,n])=>{const r=parseInt(i.replace("level",""));n&&this.messagePresenter.registerHintMessage(t,r,n)}),this.hintTimerManager.configureStepHints({stepId:t,hints:s},a)}}}),this.eventBus.on("tutorial:step:completed",e=>{console.log(`Tutorial step completed: ${e.data.stepId}`),this.hintTimerManager&&this.hintTimerManager.cancelHintTimer(e.data.stepId)}),this.eventBus.on("tutorial:completed",()=>{console.log("Tutorial completed!"),this.hintTimerManager&&this.hintTimerManager.cleanup()}),this.eventBus.on("tutorial:action:blocked",e=>{console.log(`Action blocked: ${e.data.action} - ${e.data.reason}`)})}}class Se{constructor(e,t,s,a,i){this.gameState=e,this.addMessage=t,this.startGameCallback=s,this.startTutorialCallback=a,this.loadGameCallback=i}showMenu(){this.addMessage(o("menuNotImplemented"))}handleLanguageSwitch(){const t=w.getCurrentLanguage()==="ja"?"en":"ja";w.setLanguage(t),this.updateUITexts(),this.addMessage(o("languageSwitched"))}updateUITexts(){}showSettings(){this.addMessage(o("settingsUnderDevelopment"))}showPrologue(){this.gameState.welcome.showPrologue=!0}skipPrologue(){this.gameState.welcome.showPrologue=!1,this.gameState.welcome.selectedOption||(this.gameState.welcome.selectedOption="start")}handleWelcomeInteract(){if(this.gameState.status!=="welcome")return;if(this.gameState.welcome.showPrologue){this.skipPrologue();return}const e=this.gameState.welcome.selectedOption;if(e)switch(e){case"start":this.startGameCallback();break;case"load":this.loadGameCallback();break;case"tutorial":this.startTutorialCallback();break;case"settings":this.showSettings();break}}navigateWelcomeMenu(e){if(this.gameState.status!=="welcome"||this.gameState.welcome.showPrologue)return;const t=["start","tutorial","settings"],s=t.indexOf(this.gameState.welcome.selectedOption||"start");let a=s;e==="up"?a=Math.max(0,s-1):a=Math.min(t.length-1,s+1),this.gameState.welcome.selectedOption=t[a]}getCurrentLanguage(){return w.getCurrentLanguage()}setLanguage(e){w.setLanguage(e),this.updateUITexts()}showGameOver(e){this.addMessage(p("gameOver")),this.addMessage(p("finalScore",{score:e.toString()}))}showVictory(e){this.addMessage(p("victory")),this.addMessage(p("finalScore",{score:e.toString()}))}isUIElementVisible(e){switch(e){case"prologue":return this.gameState.welcome.showPrologue;case"menu":return this.gameState.status==="menu";case"settings":return!1;default:return!1}}}class ve{keyMapping;pressedKeys;actionCallbacks;element;keyRepeatTimer;REPEAT_DELAY=300;REPEAT_RATE=100;constructor(e){this.element=e,this.pressedKeys=new Set,this.actionCallbacks=new Map,this.keyRepeatTimer=new Map,this.keyMapping={KeyW:"move_north",ArrowUp:"move_north",KeyS:"move_south",ArrowDown:"move_south",KeyA:"move_west",ArrowLeft:"move_west",KeyD:"move_east",ArrowRight:"move_east",KeyF:"interact",Enter:"interact",Space:"attack",KeyX:"attack",KeyI:"inventory",KeyE:"equipment",KeyC:"character",Comma:"pickup",KeyG:"pickup",KeyQ:"quaff",KeyR:"read",KeyT:"takeoff",Digit1:"use_item_1",Digit2:"use_item_2",Digit3:"use_item_3",Digit4:"use_item_4",Digit5:"use_item_5",Digit6:"use_item_6",Digit7:"use_item_7",Digit8:"use_item_8",Digit9:"use_item_9",Escape:"pause",KeyM:"menu",KeyL:"language_switch"},this.setupEventListeners()}setupEventListeners(){this.element.tabIndex<0&&(this.element.tabIndex=0),this.element.focus();const e=s=>{s.preventDefault();const a=s.code;if(!this.pressedKeys.has(a)){this.pressedKeys.add(a),this.handleKeyPress(a);const i=this.keyMapping[a];this.isMovementAction(i)&&this.setupKeyRepeat(a)}},t=s=>{s.preventDefault();const a=s.code;this.pressedKeys.delete(a),this.clearKeyRepeat(a)};this.element.addEventListener("keydown",e),this.element.addEventListener("keyup",t),this.element.addEventListener("blur",()=>{this.element.focus()}),this.element.addEventListener("click",()=>{this.element.focus()})}handleKeyPress(e){const t=this.keyMapping[e];if(t&&this.actionCallbacks.has(t)){const s=this.actionCallbacks.get(t);s&&s()}}onAction(e,t){this.actionCallbacks.set(e,t)}offAction(e){this.actionCallbacks.delete(e)}setKeyMapping(e){Object.assign(this.keyMapping,e)}getKeyMapping(){return{...this.keyMapping}}isKeyPressed(e){return this.pressedKeys.has(e)}isMovementKeyPressed(){return["KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].some(t=>this.pressedKeys.has(t))}getPressedKeys(){return Array.from(this.pressedKeys)}isMovementAction(e){return e==="move_north"||e==="move_south"||e==="move_east"||e==="move_west"}setupKeyRepeat(e){this.clearKeyRepeat(e);const t=setTimeout(()=>{const s=setInterval(()=>{this.pressedKeys.has(e)?this.handleKeyPress(e):this.clearKeyRepeat(e)},this.REPEAT_RATE);this.keyRepeatTimer.set(e,s)},this.REPEAT_DELAY);this.keyRepeatTimer.set(e,t)}clearKeyRepeat(e){const t=this.keyRepeatTimer.get(e);t!==void 0&&(clearTimeout(t),clearInterval(t),this.keyRepeatTimer.delete(e))}clearPressedKeys(){this.pressedKeys.clear(),this.keyRepeatTimer.forEach(e=>{clearTimeout(e),clearInterval(e)}),this.keyRepeatTimer.clear()}disable(){this.clearPressedKeys()}focus(){this.element.focus()}getActionForKey(e){return this.keyMapping[e]}getKeyForAction(e){for(const[t,s]of Object.entries(this.keyMapping))if(s===e)return t}keyToDisplayString(e){return{KeyW:"W",KeyA:"A",KeyS:"S",KeyD:"D",KeyE:"E",KeyC:"C",KeyF:"F",KeyG:"G",KeyI:"I",KeyL:"L",KeyM:"M",KeyQ:"Q",KeyR:"R",KeyT:"T",KeyX:"X",Comma:",",Enter:"Enter",Digit1:"1",Digit2:"2",Digit3:"3",Digit4:"4",Digit5:"5",Digit6:"6",Digit7:"7",Digit8:"8",Digit9:"9",ArrowUp:"↑",ArrowDown:"↓",ArrowLeft:"←",ArrowRight:"→",Space:"Space",Escape:"Esc"}[e]||e}}class xe{constructor(e,t){this.gameState=t,this.inputHandler=new ve(e),this.setupInputHandlers()}inputHandler;handleDirectionalInputCallback=()=>{};toggleAttackModeCallback=()=>{};handleInteractCallback=()=>{};toggleInventoryOverlayCallback=()=>{};toggleStatusOverlayCallback=()=>{};toggleTakeoffOverlayCallback=()=>{};handleItemActionCallback=()=>{};togglePauseCallback=()=>{};showMenuCallback=()=>{};handleLanguageSwitchCallback=()=>{};handleEquipmentToggleCallback=()=>{};setupInputHandlers(){this.inputHandler.onAction("move_north",()=>this.handleDirectionalInputCallback("north")),this.inputHandler.onAction("move_south",()=>this.handleDirectionalInputCallback("south")),this.inputHandler.onAction("move_east",()=>this.handleDirectionalInputCallback("east")),this.inputHandler.onAction("move_west",()=>this.handleDirectionalInputCallback("west")),this.inputHandler.onAction("attack",()=>this.toggleAttackModeCallback()),this.inputHandler.onAction("interact",()=>this.handleInteractCallback()),this.inputHandler.onAction("inventory",()=>this.toggleInventoryOverlayCallback()),this.inputHandler.onAction("character",()=>this.toggleStatusOverlayCallback()),this.inputHandler.onAction("takeoff",()=>this.toggleTakeoffOverlayCallback()),this.inputHandler.onAction("equipment",()=>this.handleEquipmentToggleCallback());for(let e=1;e<=9;e++)this.inputHandler.onAction(`use_item_${e}`,()=>this.handleItemActionCallback(e-1));this.inputHandler.onAction("pause",()=>this.togglePauseCallback()),this.inputHandler.onAction("menu",()=>this.showMenuCallback()),this.inputHandler.onAction("language_switch",()=>this.handleLanguageSwitchCallback())}getInputHandler(){return this.inputHandler}disable(){this.inputHandler.disable()}clearPressedKeys(){this.inputHandler.clearPressedKeys()}focus(){this.inputHandler.focus()}setKeyMapping(e){this.inputHandler.setKeyMapping(e)}getKeyMapping(){return this.inputHandler.getKeyMapping()}isKeyPressed(e){return this.inputHandler.isKeyPressed(e)}isMovementKeyPressed(){return this.inputHandler.isMovementKeyPressed()}getPressedKeys(){return this.inputHandler.getPressedKeys()}getKeyForAction(e){return this.inputHandler.getKeyForAction(e)}getActionForKey(e){return this.inputHandler.getActionForKey(e)}keyToDisplayString(e){return this.inputHandler.keyToDisplayString(e)}}class Te{constructor(e,t){this.playerController=e,this.dungeonManager=t}createInitialGameState(){const e=this.playerController.getPlayer(),t=this.dungeonManager.generateInitialFloor(e);return this.playerController.setPosition(t.player.position),{status:"welcome",player:e,currentDungeon:t,dungeonData:this.dungeonManager.getDungeonData(),turn:0,score:0,messages:[],levelCleared:!1,tutorial:{isActive:!1,currentStep:"welcome",stepProgress:0,showHint:!1,hintText:""},welcome:{showPrologue:!0,selectedOption:"start"},overlay:{type:"none",isVisible:!1,selectedIndex:0}}}updateGameState(e,t){Object.assign(e,t)}updatePlayerState(e,t){Object.assign(e.player,t)}updateDungeonState(e,t){e.currentDungeon=t,e.dungeonData=this.dungeonManager.getDungeonData()}updateTutorialState(e,t){Object.assign(e.tutorial,t)}updateWelcomeState(e,t){Object.assign(e.welcome,t)}updateOverlayState(e,t){Object.assign(e.overlay,t)}incrementTurn(e){e.turn++}addMessage(e,t){e.messages.push(t),e.messages.length>100&&(e.messages=e.messages.slice(-100))}clearMessages(e){e.messages=[]}getGameStats(e){return{turnCount:e.turn,score:e.score}}calculateScore(e){const t=e.player;let s=0;return s+=t.level*100,s+=Math.max(0,1e3-e.turn),Math.max(0,s)}validateGameState(e){try{return!(!e.player||!e.currentDungeon||e.player.health<=0&&e.status!=="paused"||!e.currentDungeon.tiles||!e.currentDungeon.entities)}catch(t){return console.error("Game state validation error:",t),!1}}cloneGameState(e){return JSON.parse(JSON.stringify(e))}createSaveData(e){return{version:"1.0.0",timestamp:Date.now(),gameState:this.cloneGameState(e),playerStats:this.getGameStats(e),score:this.calculateScore(e)}}restoreFromSaveData(e){try{if(!e||!e.gameState)return null;const t=e.gameState;return this.validateGameState(t)?t:null}catch(t){return console.error("Failed to restore game state:",t),null}}resetGameState(){return this.createInitialGameState()}}class Me{constructor(e,t,s,a,i,n,r){this.gameState=e,this.playerController=t,this.addMessage=s,this.getEnemyAtCallback=a,this.processTurnCallback=i,this.updateTutorialProgressCallback=n,this.onCombatCompletedCallback=r}attackMode=!1;toggleAttackMode(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.attackMode=!this.attackMode,this.attackMode?this.addMessage(p("attackModeOn")):this.addMessage(p("movementMode")),this.updateTutorialProgressCallback&&this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback("combat"))}isAttackMode(){return this.attackMode}disableAttackMode(){this.attackMode=!1}handleAttack(e){this.playerController.getPosition();const t=this.playerController.move(e),s=this.getEnemyAtCallback(t);s?(this.handleCombat(s),this.processTurnCallback()):this.addMessage(p("noEnemyInThatDirection")),this.updateTutorialProgressCallback&&this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback("combat"),this.attackMode=!1,this.addMessage(p("movementMode"))}handleCombat(e){if(!(this.gameState.status==="tutorial")&&!this.playerController.rollAttackHit()){this.addMessage(p("attackMissed",{enemy:A(e)}));return}const{damage:s,isCritical:a}=this.playerController.rollDamage();"health"in e&&"maxHealth"in e?this.applyDamageToEnemy(e,s,a):this.handleLegacyEnemyCombat(e,s,a)}applyDamageToEnemy(e,t,s){"health"in e&&typeof e.health=="number"&&(e.health-=t);const a=s?"criticalHit":"normalHit";this.addMessage(p(a,{enemy:A(e),damage:t.toString(),health:"health"in e&&typeof e.health=="number"?Math.max(0,e.health).toString():"0",maxHealth:"maxHealth"in e&&typeof e.maxHealth=="number"?e.maxHealth.toString():"100"})),"health"in e&&typeof e.health=="number"&&e.health<=0&&this.handleEnemyDefeat(e)}handleLegacyEnemyCombat(e,t,s){const a=s?"criticalHit":"normalHit";this.addMessage(p(a,{enemy:A(e),damage:t.toString(),health:"0",maxHealth:"100"})),this.handleEnemyDefeat(e)}handleEnemyDefeat(e){const t=this.gameState.currentDungeon.entities.findIndex(s=>s.id===e.id);if(t!==-1){this.gameState.currentDungeon.entities.splice(t,1),this.addMessage(p("enemyDefeated",{enemy:A(e)}));const s=this.calculateExperienceReward(e),a=this.playerController.addExperience(s);this.gameState.score+=10,this.addMessage(p("experienceGained",{exp:s.toString()})),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,a&&this.addMessage(p("levelUp",{level:this.gameState.player.level.toString()})),this.onCombatCompletedCallback&&this.onCombatCompletedCallback()}}calculateExperienceReward(e){const s={G:25,R:20,S:22,O:40,T:45,W:50,D:100,L:90,M:85}[e.char]||20,a="maxHealth"in e?Math.floor(e.maxHealth/10):0;return s+a}getCombatStats(){const e=this.playerController.getPlayer();return{attackMode:this.attackMode,playerLevel:e.level,playerHealth:e.health,playerMaxHealth:e.maxHealth}}canEngageCombat(){return this.playerController.getPlayer().health>0&&(this.gameState.status==="playing"||this.gameState.status==="tutorial")}getPlayerDamageCapability(){const e=this.playerController.getPlayer(),t=e.equipment.mainHand,s=t?t.damage:5,a=t?t.accuracy:70;return{minDamage:Math.max(1,s-2),maxDamage:s+e.level,accuracy:a,criticalChance:10+Math.floor(e.level/2)}}evaluateEnemyThreat(e){const t=this.playerController.getPlayer().level;return["D","L","M"].includes(e.char)?t<5?"extreme":"high":["O","T","W"].includes(e.char)?t<3?"high":"medium":t<2?"medium":"low"}}class be{constructor(e,t,s){this.gameState=e,this.playerController=t,this.addMessage=s}notifyEquipmentToggle;setEquipmentToggleCallback(e){this.notifyEquipmentToggle=e}equipItemFromInventory(e){return e.itemType==="weapon"?this.equipWeapon(e):e.itemType==="armor"?this.equipArmor(e):!1}equipWeapon(e){return this.playerController.equipWeapon(e)?(this.addMessage(p("weaponEquipped",{weapon:f(e)})),this.syncPlayerData(),!0):(this.addMessage(p("cannotEquipWeapon")),!1)}equipArmor(e){return this.playerController.equipArmor(e)?(this.addMessage(p("armorEquipped",{armor:f(e)})),this.syncPlayerData(),!0):(this.addMessage(p("cannotEquipArmor")),!1)}removeEquipment(e){e==="weapon"?this.removeWeapon():e==="armor"&&this.removeArmor(),this.syncPlayerData(),this.notifyEquipmentToggle&&(console.log("[EquipmentManager] Calling notifyEquipmentToggle"),this.notifyEquipmentToggle())}removeWeapon(){this.playerController.getPlayer();const e=this.playerController.unequipWeapon();e&&(this.playerController.addItem(e)||console.error("Failed to add weapon back to inventory - inventory might be full"),this.addMessage(p("weaponUnequipped",{weapon:f(e)})),this.syncPlayerData(),this.notifyEquipmentToggle&&this.notifyEquipmentToggle())}removeArmor(){if(this.playerController.getPlayer().equipment.head){const t=this.playerController.unequipArmor("head");t&&(this.playerController.addItem(t)||console.error("Failed to add armor back to inventory - inventory might be full"),this.addMessage(p("armorUnequipped",{armor:f(t)})),this.syncPlayerData(),this.notifyEquipmentToggle&&this.notifyEquipmentToggle())}}getCurrentEquipmentDisplay(){const t=this.playerController.getPlayer().equipment,s=[];if(t.mainHand){const r=t.mainHand,c=f(r);s.push(`${o("rightHand")}: ${r.char} ${c}`);const h=o("attackPowerEffect").replace("{{damage}}",String(r.damage)).replace("{{accuracy}}",String(r.accuracy));s.push(`      ${o("effectLabel")}: ${h}`)}else s.push(`${o("rightHand")}: ${o("noEquipment")}`);[{slot:"head",name:o("head")},{slot:"chest",name:o("chest")},{slot:"legs",name:o("legs")},{slot:"feet",name:o("feet")},{slot:"offHand",name:o("leftHand")}].forEach(r=>{const c=t[r.slot];if(c){const h=f(c);s.push(`${r.name}: ${c.char} ${h}`);const g=o("defenseEffect").replace("{{defense}}",String(c.defense));s.push(`      ${o("effectLabel")}: ${g}`)}else s.push(`${r.name}: ${o("noEquipment")}`)});const i=this.playerController.getTotalDefense(),n=o("totalDefense").replace("{{total}}",String(i));return s.push(n),s}canEquipItem(e){return!e||!e.itemType?!1:e.itemType==="weapon"?this.canEquipWeapon(e):e.itemType==="armor"?this.canEquipArmor(e):!1}canEquipWeapon(e){return e&&typeof e.damage=="number"&&typeof e.accuracy=="number"&&e.damage>0&&e.accuracy>0}canEquipArmor(e){return e&&typeof e.defense=="number"&&e.defense>0&&["head","chest","legs","feet","offHand"].includes(e.armorType)}getEquipmentStats(){const t=this.playerController.getPlayer().equipment,s=!!t.mainHand,a=t.mainHand?t.mainHand.damage:0,i=t.mainHand?t.mainHand.accuracy:0,n=this.playerController.getTotalDefense();let r=0;return t.head&&r++,t.chest&&r++,t.legs&&r++,t.feet&&r++,t.offHand&&r++,{weaponEquipped:s,weaponDamage:a,weaponAccuracy:i,totalDefense:n,armorPieces:r}}getEquipmentEffects(){const t=this.playerController.getPlayer().equipment;let s=0,a=0;const i=[];return t.mainHand&&(s+=t.mainHand.damage,t.mainHand.accuracy>90&&i.push("高精度")),[t.head,t.chest,t.legs,t.feet,t.offHand].filter(n=>n).forEach(n=>{n&&(a+=n.defense,n.defense>=10&&i.push("重装甲"))}),{attackBonus:s,defenseBonus:a,specialEffects:i}}syncPlayerData(){this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player}canUpgradeEquipment(e,t){return!e||!t?!0:e.itemType==="weapon"&&t.itemType==="weapon"?e.damage>t.damage:e.itemType==="armor"&&t.itemType==="armor"?e.defense>t.defense:!1}getEquipmentRecommendation(e){if(!this.canEquipItem(e))return null;const t=this.playerController.getPlayer();if(e.itemType==="weapon"){const s=t.equipment.mainHand;if(s){if(this.canUpgradeEquipment(e,s))return"武器をアップグレードすることを推奨します"}else return"武器を装備することを推奨します"}else if(e.itemType==="armor"){const s=t.equipment[e.armorType];if(s){if(this.canUpgradeEquipment(e,s))return"防具をアップグレードすることを推奨します"}else return"防具を装備することを推奨します"}return null}}class Ce{constructor(e,t,s,a,i){this.gameState=e,this.playerController=t,this.addMessage=s,this.processTurnCallback=a,this.updateTutorialProgressCallback=i}handlePlayerMove(e){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;this.playerController.getPosition();const t=this.playerController.move(e);this.isValidMove(t)?this.executeMove(t):this.addMessage(p("cannotMoveThere"))}executeMove(e){this.playerController.confirmMove(e),console.log("MovementManager.executeMove:",{newPosition:e,gameStatus:this.gameState.status}),b.updateFieldOfView(this.gameState.currentDungeon,e),this.gameState.status==="tutorial"&&(console.log("Calling updateTutorialProgressCallback..."),this.updateTutorialProgressCallback("movement")),this.processTurnCallback()}isValidMove(e){const t=this.gameState.currentDungeon;return!T(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player"&&i.type!=="enemy")}getEnemyAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="enemy")}getItemAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="item")}getEntityAt(e,t){return this.gameState.currentDungeon.entities.find(s=>s.position.x===e.x&&s.position.y===e.y&&(t?s.type===t:!0))}getPlayerPosition(){return this.playerController.getPosition()}calculateNextPosition(e){return this.playerController.move(e)}evaluateMovementRisk(e){const t=this.gameState.currentDungeon,s=this.getNearbyEnemies(e,1);if(s.length>=3)return"danger";if(s.length>=1)return"caution";const a=t.tiles[e.y]?.[e.x];return a&&!a.explored?"caution":"safe"}getNearbyEnemies(e,t=1){const s=[];for(let a=-t;a<=t;a++)for(let i=-t;i<=t;i++){if(i===0&&a===0)continue;const n={x:e.x+i,y:e.y+a},r=this.getEnemyAt(n);r&&s.push(r)}return s}suggestMovement(e){const t=this.getPlayerPosition(),s=[],a=e.x-t.x,i=e.y-t.y;return a>0?s.push("east"):a<0&&s.push("west"),i>0?s.push("south"):i<0&&s.push("north"),s}getValidDirections(){return this.getPlayerPosition(),["north","south","east","west"].filter(t=>{const s=this.calculateNextPosition(t);return this.isValidMove(s)})}getMovementStats(){const e=this.getPlayerPosition(),t=this.getValidDirections(),s=this.getNearbyEnemies(e),a=this.getNearbyItems(e),i=this.evaluateMovementRisk(e);return{currentPosition:e,validDirections:t,nearbyEnemies:s.length,nearbyItems:a.length,movementRisk:i}}getNearbyItems(e,t=1){const s=[];for(let a=-t;a<=t;a++)for(let i=-t;i<=t;i++){const n={x:e.x+i,y:e.y+a},r=this.getItemAt(n);r&&s.push(r)}return s}preventWallCollision(e){const t=this.calculateNextPosition(e),s=this.gameState.currentDungeon;return T(t,s.dimensions)?!s.tiles[t.y][t.x].blocking:!1}forceMove(e){this.playerController.setPosition(e),this.gameState.player.position=e,b.updateFieldOfView(this.gameState.currentDungeon,e)}}class we{constructor(e,t,s,a,i,n,r,c){this.gameState=e,this.playerController=t,this.dungeonManager=s,this.addMessage=a,this.processTurnCallback=i,this.getCombatAttackModeCallback=n,this.setCombatAttackModeCallback=r,this.updateTutorialProgressCallback=c}handleInteract(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.gameState.player.position,t=this.dungeonManager.hasStairsAt(e);if(t){this.handleStairsInteraction(t);return}this.handleItemPickup(e)}handleStairsInteraction(e){const t=this.dungeonManager.getCurrentFloor();let s;if(e==="down")s=t+1,this.addMessage(p("descendingToFloor",{floor:s.toString()}));else{if(s=t-1,s<1){this.addMessage(p("cannotGoUp"));return}this.addMessage(p("returningToFloor",{floor:s.toString()}))}this.moveToFloor(s)}moveToFloor(e){const t=this.getCombatAttackModeCallback();this.dungeonManager.saveDungeonState(this.gameState.currentDungeon);const s=this.playerController.getPlayer(),a=this.dungeonManager.moveToFloor(e,s);this.updateGameStateForNewFloor(a,s.position),t&&this.setCombatAttackModeCallback(),b.updateFieldOfView(a,s.position),this.addMessage(p("arrivedAtFloor",{floor:e.toString()}))}updateGameStateForNewFloor(e,t){this.gameState.currentDungeon=e,this.gameState.dungeonData=this.dungeonManager.getDungeonData(),this.gameState.player.position=t,this.gameState.currentDungeon.player=this.gameState.player,this.gameState.levelCleared=!1,this.playerController.setPosition(t)}handleItemPickup(e){const t=this.gameState.currentDungeon;console.log("[FloorManager] handleItemPickup called at position:",e),console.log("[FloorManager] Total entities:",t.entities.length);const s=t.entities.filter(i=>i.type==="item");console.log("[FloorManager] Items in dungeon:",s.length),s.forEach(i=>{console.log("[FloorManager] Item at:",i.position,"Type:",i.itemType)});const a=t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.type==="item");a?(console.log("[FloorManager] Found item at player position:",a),this.pickupItem(a)):(console.log("[FloorManager] No item found at position:",e),this.addMessage(p("cannotInteract")))}pickupItem(e){if(this.playerController.addItem(e)){if(this.gameState.status==="tutorial"){const s=(globalThis.game||window.game)?.getTutorialSystem?.(),a=s?.getTutorialItemPickupMessage?.(e.itemType||e.name||"unknown");a?this.addMessage(a):this.addMessage(p("pickedUpItemWithName",{char:e.char,item:f(e)})),s?.getCurrentStepId?.()==="step_equipment"&&(e.itemType==="weapon"||e.itemType==="armor")&&(s.markEquipmentPickedUp&&s.markEquipmentPickedUp(),s.updateProgress&&s.updateProgress(this.gameState))}else this.addMessage(p("pickedUpItemWithName",{char:e.char,item:f(e)}));this.removeItemFromDungeon(e),this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback&&this.updateTutorialProgressCallback("pickup"),this.processTurnCallback()}else this.addMessage(p("inventoryFull"))}removeItemFromDungeon(e){const t=this.gameState.currentDungeon,s=t.entities.findIndex(a=>a.id===e.id);s!==-1&&t.entities.splice(s,1)}getStairsAtPosition(e){return this.dungeonManager.hasStairsAt(e)}getItemAtPosition(e){return this.gameState.currentDungeon.entities.find(a=>a.position.x===e.x&&a.position.y===e.y&&a.type==="item")||null}getCurrentFloorInfo(){const e=this.dungeonManager.getCurrentFloor(),t=this.gameState.currentDungeon;let s=!1,a=!1,i=0,n=0;return t.entities.forEach(r=>{r.type==="item"&&i++,r.type==="enemy"&&n++}),s=e>1,a=!0,{currentFloor:e,hasUpStairs:s,hasDownStairs:a,itemsOnFloor:i,enemiesOnFloor:n}}checkFloorCompletion(){return this.gameState.currentDungeon.entities.filter(s=>s.type==="enemy").length===0}completeFloor(){this.checkFloorCompletion()&&(this.gameState.levelCleared=!0,this.addMessage(p("levelCleared")),this.gameState.score+=50,this.addMessage(p("floorBonus")))}emergencyExit(){this.moveToFloor(1),this.addMessage(p("emergencyExit"))}getFloorStats(){const e=this.dungeonManager.getCurrentFloor(),t=this.dungeonManager.getDungeonData();return{floorsVisited:Object.keys(t.floors).length,currentFloor:e,totalItems:0,totalEnemies:0,floorsCleared:0}}shouldPickupItem(e){return this.playerController.getPlayer().inventory.length>=10?{shouldPickup:!1,reason:"インベントリが満杯です"}:e.itemType==="consumable"?{shouldPickup:!0,reason:"消耗品は常に有用です"}:e.itemType==="weapon"||e.itemType==="armor"?{shouldPickup:!0,reason:"装備品はアップグレードの可能性があります"}:{shouldPickup:!0,reason:"アイテムを取得することを推奨します"}}getInteractableAtPosition(e){const t=this.getStairsAtPosition(e);if(t)return{type:"stairs",details:{direction:t}};const s=this.getItemAtPosition(e);return s?{type:"item",details:{item:s}}:{type:"none",details:null}}}class D{static SAVE_KEY="terminal-descent-save";static SAVE_VERSION="1.0.0";save(e){try{const t=this.createSaveData(e),s=JSON.stringify(t);return localStorage.setItem(D.SAVE_KEY,s),{success:!0,message:"ゲームを保存しました"}}catch(t){return{success:!1,message:"セーブに失敗しました",error:t instanceof Error?t.message:"Unknown error"}}}load(){try{const e=localStorage.getItem(D.SAVE_KEY);if(!e)return null;const t=JSON.parse(e);return this.isValidSaveData(t)?t:(console.warn("Invalid save data structure detected"),null)}catch(e){return console.error("Failed to load save data:",e),null}}hasSave(){return localStorage.getItem(D.SAVE_KEY)!==null}deleteSave(){try{return localStorage.removeItem(D.SAVE_KEY),{success:!0,message:"セーブデータを削除しました"}}catch(e){return{success:!1,message:"セーブデータの削除に失敗しました",error:e instanceof Error?e.message:"Unknown error"}}}createSaveData(e){return{version:D.SAVE_VERSION,timestamp:Date.now(),player:{position:{...e.player.position},hp:e.player.health,maxHp:e.player.maxHealth,energy:e.player.energy,maxEnergy:e.player.maxEnergy,level:e.player.level,exp:e.player.experience,inventory:[...e.player.inventory],equipment:{...e.player.equipment}},dungeon:{currentFloor:e.dungeonData.currentFloor,seed:0,exploredTiles:[],tiles:e.currentDungeon.tiles,entities:e.currentDungeon.entities,...e.currentDungeon.stairsDown&&{stairsDown:e.currentDungeon.stairsDown},...e.currentDungeon.stairsUp&&{stairsUp:e.currentDungeon.stairsUp}},gameStats:{turnCount:e.turn,score:e.score,enemiesDefeated:0},metadata:{playTime:0,lastSaveLocation:`floor_${e.dungeonData.currentFloor}_${e.player.position.x}_${e.player.position.y}`}}}isValidSaveData(e){return e&&typeof e.version=="string"&&typeof e.timestamp=="number"&&e.player&&typeof e.player.hp=="number"&&typeof e.player.level=="number"&&e.dungeon&&typeof e.dungeon.currentFloor=="number"&&e.gameStats&&typeof e.gameStats.turnCount=="number"}}class ke{canvas;ctx;config;camera;renderedTexts=[];constructor(e,t){this.canvas=e;const s=e.getContext("2d");if(!s)throw new Error("Failed to get 2D rendering context");this.ctx=s,this.config=t,this.camera={position:{x:0,y:0},viewport:t.viewport,target:{x:0,y:0}},this.setupCanvas()}trackableFillText(e,t,s){this.renderedTexts.push(e),this.ctx.fillText(e,t,s)}getRenderedTexts(){return[...this.renderedTexts]}clearRenderedTexts(){this.renderedTexts=[]}setupCanvas(){this.canvas.width=this.config.viewport.width,this.canvas.height=this.config.viewport.height,this.ctx.imageSmoothingEnabled=!1,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.textBaseline="middle"}clear(){this.ctx.fillStyle=this.config.colors.background,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}updateCamera(e){this.camera.target=e;const t=Math.floor(this.config.viewport.width/this.config.tileSize),s=Math.floor(this.config.viewport.height/this.config.tileSize);this.camera.position={x:e.x-Math.floor(t/2),y:e.y-Math.floor(s/2)}}worldToScreen(e){return{x:(e.x-this.camera.position.x)*this.config.tileSize,y:(e.y-this.camera.position.y)*this.config.tileSize}}isVisible(e){const t=this.worldToScreen(e);return t.x>=-this.config.tileSize&&t.x<this.config.viewport.width&&t.y>=-this.config.tileSize&&t.y<this.config.viewport.height}renderCharacter(e,t,s,a){a&&(this.ctx.fillStyle=a,this.ctx.fillRect(t.x,t.y,this.config.tileSize,this.config.tileSize)),this.ctx.fillStyle=s,this.trackableFillText(e,t.x+this.config.tileSize/2,t.y+this.config.tileSize/2)}renderTile(e){if(!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);if(!e.explored)return;const s=e.visible?e.color:this.config.colors.explored,a=e.visible?e.backgroundColor:void 0;this.renderCharacter(e.char,t,s,a)}renderEntity(e){if(!e.visible||!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);this.renderCharacter(e.char,t,e.color,e.backgroundColor)}render(e){if(this.clear(),this.clearRenderedTexts(),this.ctx.filter="none",e.status==="welcome"){this.renderWelcomeScreen(e);return}const t=e.currentDungeon;this.updateCamera(t.player.position);for(let s=0;s<t.dimensions.height;s++)for(let a=0;a<t.dimensions.width;a++){const i=t.tiles[s][a];i&&this.renderTile(i)}e.status==="tutorial"&&this.renderTutorialHighlights(e),t.entities.filter(s=>s.type!=="player").forEach(s=>this.renderEntity(s)),this.renderEntity(t.player),this.renderUI(e),e.overlay.isVisible&&this.renderOverlay(e),this.updateTestElements(e)}renderUI(e){const t=e.player,s=10,a=20;this.ctx.save(),this.ctx.font=`14px ${this.config.fontFamily}`,this.ctx.textAlign="left",this.ctx.fillStyle=this.config.colors.text;const i=[`${o("level")}: ${t.level}`,`${o("health")}: ${t.health}/${t.maxHealth}`,`${o("energy")}: ${t.energy}/${t.maxEnergy}`,`${o("accessLevel")}: ${t.accessLevel}`,`${o("turn")}: ${e.turn}`];i.forEach((h,g)=>{this.ctx.fillText(h,s,s+g*a)}),e.status==="tutorial"&&this.renderTutorialInfo(e,s,s+i.length*a+20);const n=K(t),r=[`${o("attackPowerLabel")}: ${n.attackPower}`,`${o("defenseLabel")}: ${n.totalDefense}`,`${o("experienceLabel")}: ${t.experience}/${t.experienceToNext}`],c=this.canvas.width-200;if(r.forEach((h,g)=>{this.ctx.fillText(h,c,s+g*a)}),e.messages.length>0){const h=Math.floor(this.canvas.height*.3/a),g=e.messages.slice(-h);g.forEach((u,m)=>{const y=this.canvas.height-s-(g.length-m)*a,k=se(u);this.ctx.fillText(k,s,y)})}this.ctx.restore()}getCameraPosition(){return{...this.camera.position}}screenToWorld(e){return{x:Math.floor(e.x/this.config.tileSize)+this.camera.position.x,y:Math.floor(e.y/this.config.tileSize)+this.camera.position.y}}renderOverlay(e){switch(this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),e.overlay.type){case"inventory":this.renderInventoryOverlay(e);break;case"character":this.renderStatusOverlay(e);break;case"takeoff":this.renderTakeoffOverlay(e);break;case"equipment":this.renderEquipmentOverlay(e);break;case"pauseMenu":this.renderPauseMenuOverlay(e);break}this.ctx.restore()}renderInventoryOverlay(e){const s=e.player.inventory,a=400,i=Math.min(500,s.length*30+100),n=(this.canvas.width-a)/2,r=(this.canvas.height-i)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(n,r,a,i),this.ctx.strokeRect(n,r,a,i),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.trackableFillText(o("inventoryHeader"),n+20,r+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(o("closeInstruction"),n+20,r+50),this.ctx.font="14px Courier New, monospace";const c=r+80;s.length===0?(this.ctx.fillStyle="#666666",this.ctx.fillText(o("emptyInventoryMessage"),n+20,c)):s.forEach((h,g)=>{const u=c+g*25;e.overlay.selectedIndex===g&&(this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.fillRect(n+10,u-15,a-20,20)),this.ctx.fillStyle="#ffff00",this.ctx.fillText(`${g+1}.`,n+20,u),this.ctx.fillStyle=h.color,this.ctx.fillText(h.char,n+50,u),this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${h.name} x${h.quantity}`,n+70,u),this.ctx.font="10px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(h.description,n+70,u+12),this.ctx.font="14px Courier New, monospace"})}renderStatusOverlay(e){const t=e.player,s=400,a=500,i=(this.canvas.width-s)/2,n=(this.canvas.height-a)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(i,n,s,a),this.ctx.strokeRect(i,n,s,a),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.trackableFillText(o("statusHeader"),i+20,n+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(o("statusCloseInstruction"),i+20,n+50),this.ctx.font="14px Courier New, monospace",this.ctx.fillStyle="#00ff00";const r=[{label:o("level"),value:`${t.level}`,color:"#ffff00"},{label:"HP",value:`${t.health}/${t.maxHealth}`,color:t.health<t.maxHealth*.3?"#ff4444":"#00ff00"},{label:o("energy"),value:`${t.energy}/${t.maxEnergy}`,color:t.energy<t.maxEnergy*.3?"#ffaa00":"#00ff00"},{label:"EXP",value:`${t.experience}/${t.experienceToNext}`,color:"#88ff88"},{label:o("accessLevel"),value:`${t.accessLevel}`,color:"#00ffff"},{label:o("turn"),value:`${e.turn}`,color:"#888888"},{label:"SCORE",value:`${e.score}`,color:"#ffff00"}],c=n+80;r.forEach((h,g)=>{const u=c+g*25;this.ctx.fillStyle="#00ff00",this.trackableFillText(`${h.label}:`,i+20,u),this.ctx.fillStyle=h.color,this.trackableFillText(h.value,i+150,u)}),this.ctx.font="16px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.trackableFillText(o("equipmentHeader"),i+20,n+260),this.renderEquipmentDetails(t,i+20,n+285)}renderEquipmentDetails(e,t,s){this.ctx.font="12px Courier New, monospace";const a=J(e),i=[{key:"weapon",label:o("weaponSlot")},{key:"head",label:o("headSlot")},{key:"chest",label:o("chestSlot")},{key:"legs",label:o("legsSlot")},{key:"feet",label:o("feetSlot")},{key:"shield",label:o("shieldSlot")}];let n=s;i.forEach(c=>{const h=a[c.key];this.ctx.fillStyle="#00ff00",this.trackableFillText(`${c.label}:`,t,n),this.ctx.fillStyle=h!==o("noItem")?"#ffff00":"#666666",this.trackableFillText(h,t+60,n),n+=15}),n+=10,this.ctx.fillStyle="#00ff00",this.trackableFillText(o("equipmentStatsHeader"),t,n),n+=20;const r=K(e);this.ctx.fillStyle="#88ff88",this.trackableFillText(`${o("totalDefenseLabel")}: ${r.totalDefense}`,t,n),n+=15,this.ctx.fillStyle="#ff8888",this.trackableFillText(`${o("attackPowerLabel")}: ${r.attackPower}`,t,n)}renderTakeoffOverlay(e){const t=e.player,s=["mainHand","head","chest","legs","feet","offHand"],a=[];s.forEach(g=>{const u=t.equipment[g];u&&a.push({slot:g,item:u,displayName:f(u)})});const i=400,n=Math.min(400,Math.max(a.length*30+150,150)),r=(this.canvas.width-i)/2,c=(this.canvas.height-n)/2;if(this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(r,c,i,n),this.ctx.strokeRect(r,c,i,n),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText(o("takeoffHeader"),r+20,c+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(o("takeoffInstruction"),r+20,c+50),this.ctx.font="14px Courier New, monospace",a.length===0)this.ctx.fillStyle="#888888",this.ctx.fillText("装備中のアイテムがありません",r+20,c+90);else{const g=e.overlay.selectedIndex||0;a.forEach((u,m)=>{const y=c+80+m*25,k=m===g;k&&(this.ctx.fillStyle="#333333",this.ctx.fillRect(r+15,y-12,i-30,20)),this.ctx.fillStyle="#00ff00";const M=this.getSlotDisplayName(u.slot);this.ctx.fillText(`${M}:`,r+20,y),this.ctx.fillStyle=k?"#ffff00":"#ffffff";const q=u.item.char||"?";this.ctx.fillText(`${q} ${u.displayName}`,r+100,y)})}this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888";const h=c+n-30;this.ctx.fillText(o("takeoffControls"),r+20,h)}renderEquipmentOverlay(e){const t=e.player,s=[{slot:"mainHand",label:"武器",item:t.equipment.mainHand},{slot:"head",label:"頭",item:t.equipment.head},{slot:"chest",label:"胴",item:t.equipment.chest},{slot:"legs",label:"脚",item:t.equipment.legs},{slot:"feet",label:"足",item:t.equipment.feet},{slot:"offHand",label:"盾",item:t.equipment.offHand}],a=600,i=380,n=(this.canvas.width-a)/2,r=(this.canvas.height-i)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(n,r,a,i),this.ctx.strokeRect(n,r,a,i),this.ctx.save(),this.ctx.font="bold 20px Courier New, monospace",this.ctx.textAlign="center",this.ctx.fillStyle="#00ff00";const c="装備一覧",h=n+a/2;this.trackableFillText(c,h,r+35),this.ctx.restore(),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.textBaseline="middle";let g=r+85;s.forEach(({label:k,item:M})=>{const q=n+40,_=60;this.ctx.fillStyle="#888888",this.ctx.textAlign="left",this.trackableFillText(`${k}:`,q,g);const F=q+_;if(M){this.ctx.fillStyle="#ffffff";const L=M.char||"?",N=f(M);let v="";"damage"in M?v=` (+${M.damage})`:"defense"in M&&(v=` (+${M.defense})`);const X=`${L} ${N}${v}`;this.ctx.textAlign="left",this.trackableFillText(X,F,g),g+=30}else this.ctx.fillStyle="#666666",this.ctx.textAlign="left",this.trackableFillText("なし",F,g),g+=30}),this.ctx.save(),this.ctx.font="12px Courier New, monospace",this.ctx.textAlign="center",this.ctx.fillStyle="#888888";const u="ESC: 閉じる, T: 装備を外す",m=n+a/2,y=r+i-20;this.trackableFillText(u,m,y),this.ctx.restore()}renderPauseMenuOverlay(e){this.applyGlassEffect();const t=300,s=250,a=(this.canvas.width-t)/2,i=(this.canvas.height-s)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.fillRect(a,i,t,s),this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.strokeRect(a,i,t,s),this.ctx.font="bold 18px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.ctx.textAlign="center",this.ctx.fillText(o("pauseMenuTitle"),a+t/2,i+40);const n=[{key:"continueGame",index:0},{key:"saveGame",index:1},{key:"loadGame",index:2},{key:"languageSwitch",index:3},{key:"returnToTitle",index:4}],r=i+80,c=30;this.ctx.font="14px Courier New, monospace",this.ctx.textAlign="left",n.forEach((g,u)=>{const m=r+u*c,y=e.overlay.selectedIndex===u;y&&(this.ctx.fillStyle="#003300",this.ctx.fillRect(a+10,m-18,t-20,22),this.ctx.fillStyle="#00ff00",this.ctx.fillText(">",a+20,m)),this.ctx.fillStyle=y?"#ffffff":"#cccccc",this.ctx.fillText(o(g.key),a+40,m)}),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.textAlign="center";const h=i+s-20;this.ctx.fillText("↑↓: Select  Enter: Confirm  ESC: Close",a+t/2,h)}getSlotDisplayName(e){return{mainHand:o("weaponSlot"),head:o("headSlot"),chest:o("chestSlot"),legs:o("legsSlot"),feet:o("feetSlot"),offHand:o("shieldSlot")}[e]||e}resize(e){this.config.viewport=e,this.canvas.width=e.width,this.canvas.height=e.height,this.setupCanvas()}renderWelcomeScreen(e){const t=this.canvas.width/2,s=this.canvas.height/2;if(e.welcome.showPrologue){this.renderPrologue(),this.updateTestElements(e);return}this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize*2}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.fillText(o("welcomeTitle"),t,s-120),this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.fillText(o("welcomeSubtitle"),t,s-50);const a=G("menuOptions");(e.welcome.hasSaveData||!1?[{key:"start",text:a[0]},{key:"load",text:o("loadGameOption")},{key:"tutorial",text:a[1]},{key:"settings",text:a[2]}]:[{key:"start",text:a[0]},{key:"tutorial",text:a[1]},{key:"settings",text:a[2]}]).forEach((r,c)=>{const h=s+c*30,g=e.welcome.selectedOption===r.key;if(this.ctx.fillStyle=g?this.config.colors.player:this.config.colors.text,g){const u=this.ctx.measureText(r.text).width,m=20;this.ctx.fillText(">",t-u/2-m,h),this.ctx.fillText("<",t+u/2+m,h)}this.ctx.fillText(r.text,t,h)}),this.ctx.fillStyle=this.config.colors.explored,this.ctx.fillText(o("menuInstructions"),t,s+120),e.welcome.selectedOption||(e.welcome.selectedOption="start"),this.updateTestElements(e)}renderPrologue(){const e=this.canvas.width/2,t=this.canvas.height/2;this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",G("prologueLines").forEach((a,i)=>{this.ctx.fillText(a,e,t-100+i*25)})}renderTutorialHighlights(e){const t=e.interactiveTutorial;t&&t.isActive&&t.currentStep.targetPosition&&this.renderTargetHighlight(t.currentStep.targetPosition)}renderTutorialInfo(e,t,s){const a=e.interactiveTutorial;if(!a||!a.isActive)return;const i=20,n=[`チュートリアル: ${a.currentStep.title}`,a.currentStep.description,`ステップ: ${a.progress.currentStep}/${a.progress.totalSteps}`];this.ctx.fillStyle="#ffff00",this.ctx.font=`16px ${this.config.fontFamily}`,n.forEach((r,c)=>{this.ctx.fillText(r,t,s+c*i)})}renderTargetHighlight(e){const t=this.worldToScreen(e);this.ctx.fillStyle="rgba(0, 255, 0, 0.3)",this.ctx.fillRect(t.x,t.y,this.config.tileSize,this.config.tileSize),this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.strokeRect(t.x,t.y,this.config.tileSize,this.config.tileSize)}updateTestElements(e){try{const t=document.getElementById("test-game-status");t&&(t.textContent=e.status,t.setAttribute("data-game-status",e.status));const s=document.getElementById("test-tutorial-status");if(s){const c=e.tutorial.isActive?`active-${e.tutorial.currentStep}`:"inactive";s.textContent=c,s.setAttribute("data-tutorial-status",c)}const a=document.getElementById("test-start-button"),i=document.getElementById("test-tutorial-button"),n=document.getElementById("test-settings-button");a&&i&&n&&([a,i,n].forEach(c=>{c.removeAttribute("data-selected")}),e.welcome.selectedOption==="start"?a.setAttribute("data-selected","true"):e.welcome.selectedOption==="tutorial"?i.setAttribute("data-selected","true"):e.welcome.selectedOption==="settings"&&n.setAttribute("data-selected","true"));const r=document.getElementById("test-equipment-section");if(r){const c=e.overlay.type==="character"&&e.overlay.isVisible;if(r.setAttribute("data-visible",c.toString()),e.player?.equipment){const h=JSON.stringify({mainHand:e.player.equipment.mainHand?.nameKey||"none",head:e.player.equipment.head?.nameKey||"none",chest:e.player.equipment.chest?.nameKey||"none",legs:e.player.equipment.legs?.nameKey||"none",feet:e.player.equipment.feet?.nameKey||"none",offHand:e.player.equipment.offHand?.nameKey||"none"});r.setAttribute("data-equipment",h)}}}catch{console.debug("Test elements not found, skipping update")}}applyGlassEffect(){this.ctx.filter="blur(6px) brightness(0.6)";const e=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);this.ctx.putImageData(e,0,0),this.ctx.filter="none"}}class Ee{static createManagers(e){const{canvas:t,gameState:s,initialPlayerPosition:a,callbacks:i}=e,n=new Y(a),r=new b({width:25,height:25},1),c=new ke(t,{tileSize:20,fontSize:16,fontFamily:"monospace",viewport:{width:t.width||800,height:t.height||600},colors:{background:"#000000",text:"#ffffff",player:"#00ff00",enemy:"#ff0000",wall:"#888888",floor:"#333333",explored:"#111111",visible:"#ffffff"}}),h=new ue,g=new x(s,n,i.addMessage,()=>{},()=>{},()=>!1,()=>[],void 0,()=>{}),u=new ge(s,n,v=>{},v=>{},v=>{}),m=new ye;m.setCallbacks({addMessage:i.addMessage,updateTiles:v=>{s.currentDungeon&&(s.currentDungeon.tiles=v)},setGameStatus:v=>{s.status=v},updatePlayerPosition:v=>{n.setPosition(v)},processTurn:()=>{}});const y=new Se(s,i.addMessage,()=>{},()=>{},()=>{}),k=new xe(t,s),M=new Te(n,h),q=new Me(s,n,i.addMessage,v=>{},()=>{},()=>{},()=>{}),_=new be(s,n,i.addMessage),F=new Ce(s,n,i.addMessage,()=>{},()=>{}),L=new we(s,n,h,i.addMessage,()=>{},()=>!1,()=>{},()=>{}),N=new D;return{playerController:n,dungeonGenerator:r,dungeonManager:h,inventoryManager:g,overlayManager:u,tutorialSystem:m,uiManager:y,inputManager:k,gameStateManager:M,combatManager:q,equipmentManager:_,movementManager:F,floorManager:L,saveManager:N,renderer:c}}}class Ie{lastUpdateTime;animationFrameId;updateCallback=null;renderCallback=null;isRunning=!1;constructor(){this.lastUpdateTime=0}start(e,t){if(this.isRunning){console.warn("GameLoop is already running");return}this.updateCallback=e,this.renderCallback=t,this.isRunning=!0,this.lastUpdateTime=performance.now(),this.gameLoop()}stop(){this.animationFrameId!==void 0&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=void 0),this.isRunning=!1,this.updateCallback=null,this.renderCallback=null}getIsRunning(){return this.isRunning}gameLoop=()=>{if(!this.isRunning)return;const e=performance.now();e-this.lastUpdateTime>=16.67&&(this.updateCallback&&this.updateCallback(),this.lastUpdateTime=e),this.renderCallback&&this.renderCallback(),this.animationFrameId=requestAnimationFrame(this.gameLoop)}}class De{gameState;managers;gameLoop;canvas;lastUpdateTime=0;animationFrameId;constructor(e){this.canvas=e,this.gameLoop=new Ie;const t=new Y({x:0,y:0}),s=new b({width:25,height:25},1),a=t.getPlayer(),i=s.generate(a);t.setPosition(a.position),this.gameState={player:a,currentDungeon:i,status:"welcome",messages:[],turn:0,score:0,dungeonData:{floors:new Map,currentFloor:1,maxFloor:10,visitedFloors:[1],maxFloorsReached:1},welcome:{selectedOption:"start",showPrologue:!0,hasSaveData:!1},overlay:{type:"none",isVisible:!1,selectedIndex:0,items:[]},tutorial:{isActive:!1,currentStep:"welcome",stepProgress:0,showHint:!1,hintText:""},levelCleared:!1},this.managers=Ee.createManagers({canvas:e,gameState:this.gameState,initialPlayerPosition:a.position,callbacks:{addMessage:n=>this.addMessage(n),updateGameState:n=>this.updateGameState(n),syncGameState:()=>this.syncGameState(),endGame:()=>this.endGame(),returnToTitle:()=>this.returnToTitle(),getLocalizedMessage:n=>n}}),this.setupInputHandlers(),this.setupManagerCallbacks(),this.syncGameState(),this.gameState.welcome.hasSaveData=this.hasSaveData()}setupInputHandlers(){const e=this.managers.inputManager;e.handleDirectionalInputCallback=t=>{this.handleDirectionalInput(t)},e.toggleAttackModeCallback=()=>{this.toggleAttack()},e.handleInteractCallback=()=>{this.handleInteract()},e.toggleInventoryOverlayCallback=()=>{this.managers.overlayManager.toggleInventoryOverlay()},e.toggleStatusOverlayCallback=()=>{this.managers.overlayManager.toggleStatusOverlay()},e.toggleTakeoffOverlayCallback=()=>{this.handleToggleTakeoff()},e.handleItemActionCallback=t=>{this.handleItemAction(t)},e.togglePauseCallback=()=>{this.togglePause()},e.showMenuCallback=()=>{this.managers.uiManager.showMenu()},e.handleLanguageSwitchCallback=()=>{this.managers.uiManager.handleLanguageSwitch()},e.handleEquipmentToggleCallback=()=>{this.handleEquipmentToggle()}}setupManagerCallbacks(){this.managers.uiManager.startGameCallback=()=>{this.startGame()},this.managers.uiManager.startTutorialCallback=()=>{this.startTutorial()},this.managers.uiManager.loadGameCallback=()=>{this.loadGameFromTitle()},this.managers.inventoryManager.processTurn=()=>{this.processTurn()},this.managers.inventoryManager.updateTutorialProgress=e=>{this.handleTutorialProgress(e)},this.managers.inventoryManager.equipItem=e=>this.managers.equipmentManager.equipItemFromInventory(e),this.managers.inventoryManager.getCurrentEquipmentDisplay=()=>this.managers.equipmentManager.getCurrentEquipmentDisplay(),this.managers.inventoryManager.addMessages=e=>{this.addMessages(e)},this.managers.inventoryManager.notifyEquipmentToggle=()=>{this.notifyEquipmentToggle()},this.managers.equipmentManager.setEquipmentToggleCallback(()=>{this.notifyEquipmentToggle()}),this.managers.movementManager.processTurnCallback=()=>{this.processTurn()},this.managers.movementManager.updateTutorialProgressCallback=e=>{this.handleTutorialProgress(e)},this.managers.combatManager.getEnemyAtCallback=e=>this.getEnemyAt(e),this.managers.combatManager.processTurnCallback=()=>{this.processTurn()},this.managers.combatManager.updateTutorialProgressCallback=e=>{this.handleTutorialProgress(e)},this.managers.combatManager.onCombatCompletedCallback=()=>{this.gameState.status==="tutorial"&&(this.managers.tutorialSystem.markCombatCompleted(),this.managers.tutorialSystem.updateProgress(this.gameState))},this.managers.floorManager.processTurnCallback=()=>{this.processTurn()},this.managers.floorManager.getCombatAttackModeCallback=()=>this.managers.combatManager.isAttackMode(),this.managers.floorManager.setCombatAttackModeCallback=()=>{this.managers.combatManager.disableAttackMode()},this.managers.floorManager.updateTutorialProgressCallback=e=>{this.handleTutorialProgress(e)},this.managers.overlayManager.useItemCallback=e=>{this.useItem(e)},this.managers.overlayManager.removeEquipmentCallback=e=>{this.managers.equipmentManager.removeEquipment(e)},this.managers.overlayManager.addMessage=e=>{this.addMessage(e)},this.managers.inputManager&&(this.managers.inputManager.handleLanguageSwitchCallback=()=>{this.toggleLanguage()})}toggleLanguage(){const t=w.getCurrentLanguage()==="ja"?"en":"ja";w.setLanguage(t),this.addMessage(o("languageSwitched"))}hideOverlay(){this.managers.overlayManager.hideOverlay()}updateGameState(e){Object.assign(this.gameState,e)}syncGameState(){this.gameState.player=this.managers.playerController.getPlayer(),this.gameState.currentDungeon&&(this.gameState.currentDungeon.player={...this.gameState.player})}endGame(){this.gameState.status="gameOver",this.addMessage(o("gameOver"))}returnToTitle(){this.gameState.status="welcome",this.gameState.welcome={selectedOption:"start",showPrologue:!0,hasSaveData:this.hasSaveData()},this.gameState.overlay={type:"none",isVisible:!1,selectedIndex:0,items:[]},this.gameState.messages=[],this.gameState.tutorial={isActive:!1,currentStep:"welcome",stepProgress:0,showHint:!1,hintText:""},this.managers.tutorialSystem&&this.managers.tutorialSystem.reset(),this.managers.playerController.reset({x:0,y:0}),this.gameState.player=this.managers.playerController.getPlayer(),this.gameState.score=0,this.gameState.turn=0}handleDirectionalInput(e){if(this.gameState.status==="welcome"){this.handleWelcomeNavigation(e);return}if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.handlePauseMenuNavigation(e);return}if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.managers.overlayManager.isVisible()){this.managers.overlayManager.handleNavigation(e);return}if(this.gameState.status==="tutorial"){if(this.managers.combatManager.isAttackMode()&&!this.managers.tutorialSystem.isActionAllowed("attack")){this.addMessage("このチュートリアルステップでは攻撃はできません。");return}if(!this.managers.combatManager.isAttackMode()&&!this.managers.tutorialSystem.isActionAllowed("move")){this.addMessage("このチュートリアルステップでは移動はできません。");return}}this.managers.combatManager.isAttackMode()?this.managers.combatManager.handleAttack(e):(this.managers.movementManager.handlePlayerMove(e),this.gameState.status==="tutorial"&&this.managers.tutorialSystem.updateProgress(this.gameState))}}handleInteract(){if(this.gameState.status==="welcome"){this.managers.uiManager.handleWelcomeInteract();return}if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.handleMenuSelect();return}if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.managers.overlayManager.isVisible()){this.managers.overlayManager.handleInteraction();return}if(this.gameState.status==="tutorial"&&!this.managers.tutorialSystem.isActionAllowed("pickup_item")){this.addMessage("このチュートリアルステップではアイテムの取得はできません。");return}this.managers.floorManager.handleInteract(),this.gameState.status==="tutorial"&&this.managers.tutorialSystem.updateProgress(this.gameState)}}handleTutorialProgress(e){this.gameState.status==="tutorial"&&(this.managers.tutorialSystem.updateProgress(this.gameState),this.managers.tutorialSystem.markActionCompleted(e),e==="movement"&&this.managers.tutorialSystem.updateProgress(this.gameState))}showInventory(){this.managers.inventoryManager.showInventory()}useItem(e){if(this.managers.inventoryManager.useItem(e)&&this.gameState.status==="tutorial"&&(this.managers.tutorialSystem.markItemUsed(),this.managers.tutorialSystem.updateProgress(this.gameState),this.managers.tutorialSystem.orchestrator?.getCurrentStep()?.id==="step_item_pickup")){const a=this.gameState.currentDungeon?.tiles;a&&a[15]&&a[15][25]&&(a[15][25]={...a[15][25],type:"floor",char:".",blocking:!1})}}getEnemyAt(e){if(this.gameState.currentDungeon)return this.gameState.currentDungeon.entities.find(t=>t.type==="enemy"&&t.position.x===e.x&&t.position.y===e.y)}processTurn(){this.gameState.turn++,this.syncGameState(),this.processEnemies(),this.checkGameState(),this.gameState.status==="tutorial"&&this.managers.tutorialSystem.updateProgress(this.gameState)}processEnemies(){const e=this.gameState.currentDungeon,t=this.gameState.player.position;e.entities.filter(s=>s.type==="enemy").forEach(s=>{const a=Math.abs(s.position.x-t.x)+Math.abs(s.position.y-t.y);if(a<=3)if(a===1){const i="damage"in s?s.damage:10,n=this.managers.playerController.getTotalDefense(),r=Math.max(1,i-n);this.managers.playerController.takeDamage(r),this.gameState.player.health=this.managers.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health;const c=this.managers.playerController.getPlayer().health,h=this.managers.playerController.getPlayer().maxHealth;n>0?this.addMessage(o("enemyAttackWithDefense").replace("{{enemy}}",A(s)).replace("{{damage}}",r.toString()).replace("{{defense}}",n.toString()).replace("{{health}}",Math.max(0,c).toString()).replace("{{maxHealth}}",h.toString())):this.addMessage(o("enemyAttackNormal").replace("{{enemy}}",A(s)).replace("{{damage}}",r.toString()).replace("{{health}}",Math.max(0,c).toString()).replace("{{maxHealth}}",h.toString())),this.managers.playerController.isDead()&&(this.gameState.status="gameOver",this.addMessage(`${o("youDied")} ${o("gameOver")}`))}else{const i=Math.sign(t.x-s.position.x),n=Math.sign(t.y-s.position.y),r={x:s.position.x+i,y:s.position.y+n};this.isValidEnemyMove(r)&&(s.position=r)}})}isValidEnemyMove(e){const t=this.gameState.currentDungeon;return!T(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player")}checkGameState(){if(this.managers.playerController.isDead()){this.gameState.status="gameOver",this.addMessage(o("gameOver"));return}if(this.gameState.status!=="tutorial"&&this.gameState.currentDungeon.entities.filter(t=>t.type==="enemy").length===0&&!this.gameState.levelCleared){this.gameState.score+=100,this.gameState.levelCleared=!0,this.addMessage(o("levelCleared"));const t=this.gameState.dungeonData.currentFloor,s=this.gameState.dungeonData.maxFloor;t<s?(this.addExitStairs(),this.addMessage(o("stairsAppeared"))):this.addMessage(o("allFloorsCleared"))}}addExitStairs(){const e=this.gameState.currentDungeon,t=e.rooms;if(t.length===0)return;const s=t[t.length-1],a={x:s.position.x+Math.floor(s.dimensions.width/2),y:s.position.y+Math.floor(s.dimensions.height/2)};if(e.entities.find(r=>r.position.x===a.x&&r.position.y===a.y)){const r=[{x:a.x+1,y:a.y},{x:a.x-1,y:a.y},{x:a.x,y:a.y+1},{x:a.x,y:a.y-1}];for(const c of r)if(c.x>=s.position.x&&c.x<s.position.x+s.dimensions.width&&c.y>=s.position.y&&c.y<s.position.y+s.dimensions.height&&!e.entities.find(g=>g.position.x===c.x&&g.position.y===c.y)){a.x=c.x,a.y=c.y;break}}const n=e.tiles[a.y][a.x];n&&(n.type="stairs",n.char=">",n.color="#ffff00",n.backgroundColor="#000000",n.blocking=!1)}togglePause(){if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.gameState.overlay.isVisible=!1,this.gameState.overlay.type="none","pausedFromTutorial"in this.gameState&&this.gameState.pausedFromTutorial?(this.gameState.status="tutorial",delete this.gameState.pausedFromTutorial):this.gameState.status="playing";return}if(!this.managers.overlayManager.handlePauseOrClose()&&(this.gameState.status==="playing"||this.gameState.status==="tutorial")){const e=this.gameState.status;this.gameState.status="paused",this.gameState.overlay.type="pauseMenu",this.gameState.overlay.isVisible=!0,this.gameState.overlay.selectedIndex=0,e==="tutorial"&&(this.gameState.pausedFromTutorial=!0)}}handleMenuSelect(){if(this.gameState.overlay.type!=="pauseMenu"||!this.gameState.overlay.isVisible)return;switch(this.gameState.overlay.selectedIndex){case 0:this.togglePause();break;case 1:this.saveGame();break;case 2:this.loadGame();break;case 3:this.managers.uiManager.handleLanguageSwitch();break;case 4:this.returnToTitle();break}}handlePauseMenuNavigation(e){const s=this.gameState.overlay.selectedIndex??0;e==="south"?this.gameState.overlay.selectedIndex=Math.min(s+1,4):e==="north"&&(this.gameState.overlay.selectedIndex=Math.max(s-1,0))}addMessage(e){const t=typeof e=="string"?U(e):e;this.gameState.messages.push(t),this.gameState.messages.length>5&&this.gameState.messages.shift()}addMessages(e){this.gameState.messages=[],e.forEach(t=>{const s=typeof t=="string"?U(t):t;this.gameState.messages.push(s)})}gameLoopHandler=e=>{const t=e-this.lastUpdateTime;this.updateWithDelta(t),this.render(),this.lastUpdateTime=e,this.animationFrameId=requestAnimationFrame(this.gameLoopHandler)};updateWithDelta(e){}render(){if(this.gameState.status==="tutorial"){const e=this.managers.tutorialSystem.state,t=this.managers.tutorialSystem.getCurrentStep();if(t&&e.isActive){const s={id:t.id,title:t.title,description:t.description,...t.targetPosition&&{targetPosition:t.targetPosition}};this.gameState.interactiveTutorial={currentStep:s,progress:{currentStep:e.currentStepIndex+1,totalSteps:e.totalSteps,percentage:Math.round((e.currentStepIndex+1)/e.totalSteps*100)},isActive:!0}}}else delete this.gameState.interactiveTutorial;this.managers.renderer.render(this.gameState)}start(){this.addMessage(o("searchingForExit")),this.render(),this.gameLoop.start(()=>this.update(),()=>this.render())}stop(){this.gameLoop.stop()}update(){}reset(){this.stop(),this.managers.playerController.reset({x:0,y:0}),this.gameState=this.managers.gameStateManager.createInitialGameState()}getGameState(){return this.syncGameState(),{...this.gameState}}getPlayerStats(){return this.managers.playerController.getStats()}get inputHandler(){return this.managers.inputManager.getInputHandler()}getRenderer(){return this.managers.renderer}pause(){this.gameState.status==="playing"&&(this.gameState.status="paused",this.addMessage(o("gamePaused")))}resume(){this.gameState.status==="paused"&&(this.gameState.status="playing",this.addMessage(o("gameResumed")))}movePlayer(e){this.managers.movementManager.handlePlayerMove(e)}togglePauseTest(){this.togglePause()}setOverlayStateTest(e,t,s=0){this.gameState.overlay={type:e,isVisible:t,selectedIndex:s,items:[]}}navigateInventoryTest(e){this.managers.overlayManager.handleNavigation(e)}addItemToInventoryTest(e){this.managers.playerController.addItem(e)}handleDirectionalInputTest(e){this.handleDirectionalInput(e)}handleOverlayInteractionTest(){this.managers.overlayManager.handleInteraction()}toggleAttack(){this.managers.combatManager.toggleAttackMode()}isAttackMode(){return this.managers.combatManager.isAttackMode()}showInventoryTest(){this.showInventory()}useItemTest(e){this.useItem(e)}addItemToPlayer(e){return this.managers.playerController.addItem(e)}attackEnemy(e){this.managers.combatManager.handleAttack(e)}forceMissAttack(e){this.managers.playerController.getPosition(),this.managers.playerController.move(e),this.addMessage(p("noEnemyInThatDirection")),this.managers.combatManager.disableAttackMode(),this.addMessage(p("movementMode"))}getPlayerController(){return this.managers.playerController}createTestDungeonGenerator(){return new b({width:25,height:25},1)}toggleTakeoffOverlayTest(){this.managers.overlayManager.toggleTakeoffOverlay()}handleTakeoffInteractionTest(){this.managers.overlayManager.handleInteraction()}navigateTakeoffTest(e){this.managers.overlayManager.handleNavigation(e)}testHandleInteract(){this.handleInteract()}testCastEntityToItem(e){return e}testShowInventory(){this.showInventory()}testUseItem(e){const t=this.managers.playerController.getPlayer().inventory;if(e<0||e>=t.length){this.addMessage(p("noItemInSlot",{slot:(e+1).toString()}));return}const s=t[e];this.managers.inventoryManager.applyItemEffect(s)&&(this.managers.playerController.removeItem(s.id,1),this.gameState.status==="tutorial"&&(this.managers.tutorialSystem.markItemUsed(),this.managers.tutorialSystem.updateProgress(this.gameState)))}testApplyItemEffect(e){return this.managers.inventoryManager.applyItemEffect(e)}testTakeDamage(e){this.managers.playerController.takeDamage(e),this.gameState.player.health=this.managers.playerController.getPlayer().health}handleWelcomeNavigation(e){const s=this.gameState.welcome.hasSaveData||!1?["start","load","tutorial","settings"]:["start","tutorial","settings"],a=this.gameState.welcome.selectedOption?s.indexOf(this.gameState.welcome.selectedOption):0;let i=a;e==="north"?i=Math.max(0,a-1):e==="south"&&(i=Math.min(s.length-1,a+1)),this.gameState.welcome.selectedOption=s[i]}startGame(){const e=this.managers.playerController.getPlayerDirect(),t=this.managers.dungeonManager.generateInitialFloor(e);this.gameState.currentDungeon=t,this.gameState.player.position={...t.player.position},this.managers.playerController.setPosition(t.player.position),this.gameState.status="playing",this.addMessage(o("welcomeToFacility")),this.syncGameState()}async startTutorial(){const e=this.managers.playerController.getPlayerDirect(),t=this.managers.dungeonManager.generateTutorialDungeon(e);this.gameState.currentDungeon=t,this.gameState.player.position={...t.player.position},this.managers.playerController.setPosition(t.player.position),this.gameState.status="tutorial",this.gameState.tutorial.isActive=!0,this.managers.tutorialSystem.start();const s=this.managers.tutorialSystem.getStepInfo();this.addMessage(`チュートリアル: ${s.title}`),this.addMessage(s.description)}async startTutorialForTesting(){await this.startTutorial()}openPlayerSurroundingDoors(){const e=this.gameState.player.position,t=this.gameState.currentDungeon.tiles,s=[];for(let a=1;a<=10;a++){const i={x:e.x+a,y:e.y};t[i.y]&&t[i.y][i.x]&&t[i.y][i.x].blocking&&s.push(i)}if(s.length>0){const a=s[0];t[a.y][a.x]={position:a,type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}}openDoorAtStepIndex(e){const t=this.gameState.currentDungeon.tiles;if(!t)return;const s=[{x:13,y:15},{x:25,y:15},{x:37,y:15},{x:49,y:15}];if(e<0||e>=s.length)return;const a=s[e];t[a.y][a.x]={position:a,type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}skipTutorial(){this.gameState.status="welcome",this.gameState.tutorialState=null,this.managers.tutorialSystem.reset()}skipTutorialAndStartGame(){this.skipTutorial(),this.startGame()}handleInteractTest(){this.handleInteract()}testGetPlayer(){return this.managers.playerController.getPlayer()}testSetPlayerEnergy(e){this.managers.playerController.getPlayerDirect().energy=e,this.gameState.player.energy=e}testSetPlayerHealth(e){this.managers.playerController.getPlayerDirect().health=e,this.gameState.player.health=e,this.gameState.currentDungeon.player.health=e}testGetCombatManager(){return this.managers.combatManager}testStartGame(){this.startGame()}getCurrentTutorialInfo(){return this.gameState.status!=="tutorial"?null:this.managers.tutorialSystem.getCurrentStepInfo()}getTutorialProgress(){return this.gameState.status!=="tutorial"?null:this.managers.tutorialSystem.getProgress()}isTutorialCompleted(){return this.managers.tutorialSystem.state.isCompleted}debugItemUse(){}getInteractiveTutorialManager(){return this.managers.tutorialSystem}getTutorialSystem(){return this.managers.tutorialSystem}handleToggleAttackMode(){if(this.gameState.status==="tutorial"&&!this.managers.tutorialSystem.isActionAllowed("attack")){this.addMessage("このチュートリアルステップでは攻撃モードに入れません。");return}this.managers.combatManager.toggleAttackMode()}handleToggleInventory(){if(this.gameState.status==="tutorial"&&!this.managers.tutorialSystem.isActionAllowed("inventory")){this.addMessage("このチュートリアルステップではインベントリを開けません。");return}this.managers.overlayManager.toggleInventoryOverlay(),this.gameState.status==="tutorial"&&this.managers.tutorialSystem.updateProgress(this.gameState)}handleToggleStatus(){if(this.gameState.status==="tutorial"&&!this.managers.tutorialSystem.isActionAllowed("character_status")){this.addMessage("このチュートリアルステップではステータスを開けません。");return}this.managers.overlayManager.toggleStatusOverlay(),this.gameState.status==="tutorial"&&(this.managers.tutorialSystem.markStatusViewed(),this.managers.tutorialSystem.updateProgress(this.gameState),this.managers.tutorialSystem.markStatusViewed())}handleEquipmentToggle(){if(console.log("[Game] handleEquipmentToggle called"),this.gameState.status==="tutorial"&&!this.managers.tutorialSystem.isActionAllowed("equipment")){console.log("[Game] Equipment action not allowed in current tutorial step"),this.addMessage("このチュートリアルステップでは装備を確認できません。");return}this.managers.overlayManager.toggleEquipmentOverlay(),this.gameState.overlay.isVisible&&this.gameState.overlay.type==="equipment"&&(this.addMessage("装備一覧を表示しています。ESCで閉じます。"),this.gameState.status==="tutorial"&&(console.log("[Game] Calling markEquipmentViewOpened"),this.managers.tutorialSystem.markEquipmentViewOpened(),this.managers.tutorialSystem.updateProgress(this.gameState)))}handleToggleTakeoff(){if(console.log("[Game] handleToggleTakeoff called"),console.log("[Game] Current status:",this.gameState.status),console.log('[Game] isActionAllowed("takeoff"):',this.managers.tutorialSystem.isActionAllowed("takeoff")),this.gameState.status==="tutorial"&&!this.managers.tutorialSystem.isActionAllowed("takeoff")){this.addMessage("このチュートリアルステップでは装備外しを実行できません。");return}console.log("[Game] Before toggle - overlay:",JSON.stringify(this.gameState.overlay)),this.managers.overlayManager.toggleTakeoffOverlay(),console.log("[Game] After toggle - overlay:",JSON.stringify(this.gameState.overlay)),console.log("[Game] After toggle, overlay state:",{isVisible:this.gameState.overlay.isVisible,type:this.gameState.overlay.type}),console.log("[Game] Checking tutorial conditions..."),console.log('  - status === "tutorial":',this.gameState.status==="tutorial"),console.log("  - overlay.isVisible:",this.gameState.overlay.isVisible),console.log('  - overlay.type === "takeoff":',this.gameState.overlay.type==="takeoff"),this.gameState.status==="tutorial"&&this.gameState.overlay.isVisible&&this.gameState.overlay.type==="takeoff"?(console.log("[Game] All conditions met! Calling markTakeoffViewOpened"),this.managers.tutorialSystem.markTakeoffViewOpened(),this.managers.tutorialSystem.updateProgress(this.gameState)):console.log("[Game] Conditions not met for markTakeoffViewOpened:",{status:this.gameState.status,overlayVisible:this.gameState.overlay.isVisible,overlayType:this.gameState.overlay.type})}notifyEquipmentToggle(){this.gameState.status==="tutorial"&&(this.managers.tutorialSystem.markEquipmentToggled(),this.managers.tutorialSystem.updateProgress(this.gameState))}handleItemAction(e){if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.gameState.status==="tutorial"&&!this.managers.tutorialSystem.isActionAllowed("item_use")){this.addMessage("このチュートリアルステップではアイテムを使用できません。");return}this.managers.overlayManager.isType("inventory")?this.managers.overlayManager.useItemFromOverlay(e):this.useItem(e),this.gameState.status==="tutorial"&&(this.managers.tutorialSystem.markItemUsed(),this.managers.tutorialSystem.updateProgress(this.gameState))}}saveGame(){const e=this.managers.saveManager.save(this.gameState);e.success?(this.addMessage(e.message),this.gameState.welcome.hasSaveData=!0):this.addMessage(`セーブエラー: ${e.error}`)}loadGameFromTitle(){if(!this.managers.saveManager.load()){this.addMessage("セーブデータが見つかりません");return}this.loadGame(),this.gameState.status="playing",this.gameState.welcome.showPrologue=!1}loadGame(){const e=this.managers.saveManager.load();if(!e){this.addMessage("セーブデータが見つかりません");return}try{if(this.gameState.player.position=e.player.position,this.gameState.player.health=e.player.hp,this.gameState.player.maxHealth=e.player.maxHp,this.gameState.player.energy=e.player.energy,this.gameState.player.maxEnergy=e.player.maxEnergy,this.gameState.player.level=e.player.level,this.gameState.player.experience=e.player.exp,this.gameState.player.inventory=e.player.inventory,this.gameState.player.equipment=e.player.equipment,this.gameState.dungeonData.currentFloor=e.dungeon.currentFloor,this.gameState.turn=e.gameStats.turnCount,this.gameState.score=e.gameStats.score,e.dungeon.tiles&&e.dungeon.entities){const t=this.gameState.dungeonData.floors.get(e.dungeon.currentFloor),s=t?t.dimensions:{width:80,height:50},a=t?t.rooms:[];this.gameState.currentDungeon={level:e.dungeon.currentFloor,dimensions:s,tiles:e.dungeon.tiles,rooms:a,entities:e.dungeon.entities,player:this.gameState.player,...e.dungeon.stairsDown&&{stairsDown:e.dungeon.stairsDown},...e.dungeon.stairsUp&&{stairsUp:e.dungeon.stairsUp}}}else{const s=new b({width:25,height:25},this.gameState.dungeonData.currentFloor).generate(this.gameState.player);s.player=this.gameState.player,this.gameState.currentDungeon=s}this.managers.playerController.setPosition(e.player.position),this.addMessage("ゲームをロードしました")}catch(t){this.addMessage("ロードエラー: データが破損しています"),console.error("Load error:",t)}}hasSaveData(){return this.managers.saveManager.hasSave()}deleteSaveData(){const e=this.managers.saveManager.deleteSave();this.addMessage(e.message)}getPlayerPosition(){return{...this.gameState.player.position}}getInventoryItemCount(){return this.gameState.player.inventory.length}isPaused(){return this.gameState.status==="paused"}getCurrentOverlay(){return this.gameState.overlay.isVisible?this.gameState.overlay.type:null}getTutorialObservable(){return this.gameState.status!=="tutorial"?null:(this.managers.tutorialSystem,{getTutorialState:()=>{const e=this.managers.tutorialSystem.state;return{currentStepId:e.currentStepId,currentStepTitle:e.currentStep?.title||"",currentStepDescription:e.currentStep?.description||"",completedSteps:this.managers.tutorialSystem.getCompletedStepIds(),isCompleted:e.isCompleted,isCurrentStepCompleted:e.currentStep?this.managers.tutorialSystem.checkStepCompletion(e.currentStepId):!1}},isActionAllowed:e=>this.managers.tutorialSystem.isActionAllowed(e),isPositionPassable:(e,t)=>{const s=this.gameState.currentDungeon.tiles,a={x:e,y:t},i={width:s[0]?.length||0,height:s.length};return T(a,i)?!s[t][e].blocking:!1}})}}document.addEventListener("DOMContentLoaded",()=>{(()=>{const s=document.getElementById("gameTitle"),a=document.getElementById("gameSubtitle"),i=document.getElementById("gameInfo");s&&(s.textContent=o("gameTitle")),a&&(a.textContent=o("gameSubtitle")),i&&(i.textContent=o("controls"))})();const e=document.getElementById("gameCanvas");if(!e){console.error("Could not find game canvas element");return}const t=new De(e);t.start(),window.game=t,window.gameState=()=>t.getGameState(),window.getTutorialSystem=()=>t.getTutorialSystem(),window.tutorialSystem=t.getTutorialSystem(),window.getTutorialCoordinates=()=>t.getTutorialSystem()?.getCoordinateInfo(),window.debugItemUse=()=>t.debugItemUse(),window.localization=w,window.renderer={getRenderedTexts:()=>{const s=t.getRenderer();return s?s.getRenderedTexts():[]}},document.addEventListener("keydown",s=>{s.ctrlKey&&s.key==="t"&&(s.preventDefault(),t.getGameState().status==="tutorial"&&(console.log("Skipping tutorial (Ctrl+T)"),t.skipTutorial()))}),console.log("Terminal Descent initialized successfully"),console.log("Use WASD keys to move, F to interact, ESC to pause"),console.log("Ctrl+T to skip tutorial during tutorial (or ESC -> pause menu -> return to title)")});
