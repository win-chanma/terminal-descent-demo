(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const I={ja:{gameTitle:"ターミナル・ディセント",gameSubtitle:"ディストピア・ローグライク v1.0",controls:"WASDで移動 | Fで調べる | Iでインベントリ | Cでステータス | Lで言語切替 | ESCでメニュー",welcome:"ターミナル・ディセントへようこそ。WASDで移動してください。",cannotMoveThere:"そこには移動できません。",pickedUpItem:"を手に入れた。",nothingToInteract:"調べるものがありません。",enemyAttacks:"グレムリンが攻撃してきた！",youDied:"あなたは死亡しました。",gameOver:"ゲームオーバー。",levelCleared:"フロアクリア！勝利です！",gamePaused:"ゲームを一時停止しました。ESCで再開。",gameResumed:"ゲームを再開しました。",menuNotImplemented:"メニューは未実装です。",searchingForExit:"ターミナル・ディセントを開始。出口を探索中...",languageSwitched:"言語が切り替わりました。",playerAttacks:"を攻撃した！",enemyDefeated:"を倒した！",attackModeOn:"攻撃モード：方向キーで攻撃方向を選択",attackModeOff:"移動モード",noEnemyThere:"そこには敵がいません。",attackMissed:"{{enemy}}への攻撃が外れた！",criticalHit:"クリティカルヒット！ {{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",experienceGained:"経験値 +{{exp}}",levelUp:"レベルアップ！ Lv.{{level}}",enemyAttackWithDefense:"{{enemy}}の攻撃！ {{damage}}ダメージ！(防御力-{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}}の攻撃！ {{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",level:"レベル",health:"HP",energy:"エネルギー",accessLevel:"アクセス権",turn:"ターン",inventoryFull:"インベントリが満杯です。",inventoryEmpty:"インベントリは空です。",useItem:"を使用した。",pickedUpItemWithName:"{{item}}を拾った",cannotInteract:"相互作用できるものがない",invalidItem:"無効なアイテムです。",noItemInSlot:"スロット{{slot}}にアイテムがありません。",ironSword:"鉄の剣",battleAxe:"バトルアックス",hunterBow:"ハンターボウ",magicStaff:"マジックスタッフ",steelDagger:"スチールダガー",ironHelmet:"鉄のヘルメット",steelChestplate:"スチール胸当て",leatherLeggings:"レザーレギンス",combatBoots:"コンバットブーツ",towerShield:"タワーシールド",healthPotion:"ヘルスポーション",energyBar:"エネルギーバー",mysteryScroll:"謎の巻物",healingHerb:"回復薬",energyCore:"エネルギーコア",ironSwordDesc:"標準的な鉄製の剣",battleAxeDesc:"強力な戦闘用斧",hunterBowDesc:"狩猟用の弓",magicStaffDesc:"魔法を増幅する杖",steelDaggerDesc:"軽量で素早い短剣",ironHelmetDesc:"鉄製の頭部防具",steelChestplateDesc:"スチール製の胸部防具",leatherLeggingsDesc:"レザー製の脚部防具",combatBootsDesc:"戦闘用ブーツ",towerShieldDesc:"大型の防御用盾",healthPotionDesc:"HP+30回復",energyBarDesc:"エネルギー+20回復",mysteryScrollDesc:"ランダム効果",healingHerbDesc:"HP+15回復",energyCoreDesc:"エネルギー+50回復",weaponDescriptionFormat:"{{description}} (攻撃力: {{damage}})",armorDescriptionFormat:"{{description}} (防御力: {{defense}})",inventoryHeader:"=== インベントリ ===",currentEquipmentHeader:"=== 現在の装備 ===",usageInstructionsHeader:"=== 使用方法 ===",itemUsageInstructions:"数字キー(1-9)でアイテム使用/装備",itemUsageExample:"例: 1キー = [1]番目のアイテム",effectLabel:"効果",attackPowerEffect:"攻撃力+{{damage}}, 命中率+{{accuracy}}%",defenseEffect:"防御力+{{defense}}",totalDefense:"総防御力: {{total}}",rightHand:"右手",head:"頭",chest:"胸",legs:"脚",feet:"足",leftHand:"左手",noEquipment:"(装備なし)",descendingToFloor:"階層{{floor}}へ降りる...",cannotGoUp:"これ以上上には行けません。",returningToFloor:"階層{{floor}}へ戻る...",arrivedAtFloor:"階層{{floor}}に到着しました。",healthRestored:"HP+{{amount}}回復！",energyRestored:"エネルギー+{{amount}}回復！",itemCannotBeUsed:"{{item}}は使用できません。",weaponEquipped:"{{weapon}}を装備しました。",armorEquipped:"{{armor}}を装備しました。",cannotEquipWeapon:"武器を装備できませんでした。",cannotEquipArmor:"防具を装備できませんでした。",noEnemyInThatDirection:"そこには敵がいません。",movementMode:"移動モード",stairsAppeared:"次のフロアへの階段が現れました！ (Fキーで移動)",allFloorsCleared:"全フロアクリア！おめでとうございます！",welcomeToFacility:"ナイトシティ地下施設へようこそ。脱出を目指してください。",tutorialStarted:"チュートリアルを開始します。",tutorialComplete:"🎉 チュートリアル完了！ゲーム開始です！",settingsUnderDevelopment:"設定メニューは開発中です。",mysteryScrollHealth:"HP回復効果が発動！",mysteryScrollEnergy:"エネルギー回復効果が発動！",mysteryScrollScore:"スコアボーナス+50！",mysteryScrollMap:"マップ探索効果が発動！",tutorialWelcome:"ターミナル・ディセントへようこそ！WASDキーで移動してみましょう。",tutorialMovement:"よくできました！WASDで自由に移動できます。もう少し探索してみましょう。",tutorialCombat:"Spaceキーで攻撃モードに切り替えられます。試してみてください！",tutorialInventory:"Iキーでインベントリを開いて、アイテムを確認しましょう。",tutorialEquipment:"数字キー(1-9)でアイテムを使用できます。アイテムを使ってみましょう！",tutorialCompleted:"チュートリアル完了！すべての機能を覚えました。",tutorialProgressMovement:"✓ 移動をマスターしました！",tutorialProgressCombat:"✓ 次は戦闘システムを学びましょう。",tutorialProgressCombatComplete:"✓ 戦闘の基本を理解しました！",tutorialProgressInventory:"✓ インベントリの使い方を覚えました！",tutorialProgressEquipment:"✓ 装備システムも完璧です！",attackPowerLabel:"攻撃力",defenseLabel:"防御力",experienceLabel:"経験値",closeInstruction:"数字キー(1-9)でアイテム使用 | Iキーで閉じる",statusHeader:"=== ステータス ===",statusCloseInstruction:"Sキーで閉じる",equipmentHeader:"=== 装備 ===",equipmentStatsHeader:"=== 装備統計 ===",totalDefenseLabel:"総防御力",welcomeTitle:"ターミナル・ディセント",welcomeSubtitle:"ナイトシティ地下施設からの脱出劇",menuInstructions:"↑↓ または WS: 選択    Enter または F: 決定",prologueLines:["年は2087年。ナイトシティの地下研究施設で","あなたは目を覚ました。","","警備システムが暴走し、施設は封鎖された。","生き残るには地上への脱出しかない。","","装備を集め、敵を避け、10階層の地下から","脱出せよ。","","[Enterキーで開始]"],menuOptions:["[スタート] ゲームを開始","[チュートリアル] 操作を学ぶ","[設定] オプション設定"],emptyInventoryMessage:"インベントリが空です",weaponSlot:"武器",headSlot:"頭",chestSlot:"胸",legsSlot:"脚",feetSlot:"足",shieldSlot:"盾",noItem:"なし",gremlin:"グレムリン",goblin:"ゴブリン",orc:"オーク",troll:"トロル",takeoffHeader:"=== 装備を外す ===",takeoffInstruction:"外したい装備を選んでください",takeoffControls:"↑↓キー: 選択 | Enterキー: 外す | Tキー: 閉じる",noEquipmentToRemove:"外せる装備がありません。",weaponUnequipped:"{{weapon}}を外しました。",armorUnequipped:"{{armor}}を外しました。"},en:{gameTitle:"TERMINAL DESCENT",gameSubtitle:"DYSTOPIAN ROGUELIKE v1.0",controls:"Use WASD to move | Press F to interact | I for inventory | C for character | L for language | ESC for menu",welcome:"Welcome to Terminal Descent. Use WASD to move.",cannotMoveThere:"You cannot move there.",pickedUpItem:"You picked up ",nothingToInteract:"There is nothing here to interact with.",enemyAttacks:"The gremlin attacks you!",youDied:"You have died.",gameOver:"Game Over.",levelCleared:"Level cleared! You win!",gamePaused:"Game paused. Press ESC to resume.",gameResumed:"Game resumed.",menuNotImplemented:"Menu not implemented yet.",searchingForExit:"Terminal Descent initiated. Searching for exit...",languageSwitched:"Language switched.",playerAttacks:"You attack ",enemyDefeated:"You defeated ",attackModeOn:"Attack mode: Use arrow keys to select attack direction",attackModeOff:"Movement mode",noEnemyThere:"There is no enemy there.",attackMissed:"Your attack on {{enemy}} missed!",criticalHit:"Critical hit! {{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",experienceGained:"Experience +{{exp}}",levelUp:"Level up! Lv.{{level}}",enemyAttackWithDefense:"{{enemy}} attacks! {{damage}} damage! (Defense -{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}} attacks! {{damage}} damage! HP: {{health}}/{{maxHealth}}",level:"Level",health:"Health",energy:"Energy",accessLevel:"Access",turn:"Turn",inventoryFull:"Inventory is full.",inventoryEmpty:"Your inventory is empty.",useItem:"You used ",pickedUpItemWithName:"You picked up {{item}}",cannotInteract:"There is nothing to interact with",invalidItem:"Invalid item.",noItemInSlot:"No item in slot {{slot}}.",ironSword:"Iron Sword",battleAxe:"Battle Axe",hunterBow:"Hunter Bow",magicStaff:"Magic Staff",steelDagger:"Steel Dagger",ironHelmet:"Iron Helmet",steelChestplate:"Steel Chestplate",leatherLeggings:"Leather Leggings",combatBoots:"Combat Boots",towerShield:"Tower Shield",healthPotion:"Health Potion",energyBar:"Energy Bar",mysteryScroll:"Mystery Scroll",healingHerb:"Healing Herb",energyCore:"Energy Core",ironSwordDesc:"A standard iron sword",battleAxeDesc:"A powerful battle axe",hunterBowDesc:"A bow for hunting",magicStaffDesc:"A staff that amplifies magic",steelDaggerDesc:"A light and fast dagger",ironHelmetDesc:"Iron head protection",steelChestplateDesc:"Steel chest protection",leatherLeggingsDesc:"Leather leg protection",combatBootsDesc:"Combat boots",towerShieldDesc:"Large defensive shield",healthPotionDesc:"Restores 30 HP",energyBarDesc:"Restores 20 energy",mysteryScrollDesc:"Random effect",healingHerbDesc:"Restores 15 HP",energyCoreDesc:"Restores 50 energy",weaponDescriptionFormat:"{{description}} (Damage: {{damage}})",armorDescriptionFormat:"{{description}} (Defense: {{defense}})",inventoryHeader:"=== INVENTORY ===",currentEquipmentHeader:"=== CURRENT EQUIPMENT ===",usageInstructionsHeader:"=== USAGE ===",itemUsageInstructions:"Press number keys (1-9) to use/equip items",itemUsageExample:"Example: Key 1 = Item [1]",effectLabel:"Effect",attackPowerEffect:"Attack +{{damage}}, Accuracy +{{accuracy}}%",defenseEffect:"Defense +{{defense}}",totalDefense:"Total Defense: {{total}}",rightHand:"Right Hand",head:"Head",chest:"Chest",legs:"Legs",feet:"Feet",leftHand:"Left Hand",noEquipment:"(No equipment)",descendingToFloor:"Descending to floor {{floor}}...",cannotGoUp:"Cannot go up any further.",returningToFloor:"Returning to floor {{floor}}...",arrivedAtFloor:"Arrived at floor {{floor}}.",healthRestored:"HP+{{amount}} restored!",energyRestored:"Energy+{{amount}} restored!",itemCannotBeUsed:"{{item}} cannot be used.",weaponEquipped:"{{weapon}} equipped.",armorEquipped:"{{armor}} equipped.",cannotEquipWeapon:"Cannot equip weapon.",cannotEquipArmor:"Cannot equip armor.",noEnemyInThatDirection:"No enemy there.",movementMode:"Movement mode",stairsAppeared:"Stairs to next floor appeared! (Press F to move)",allFloorsCleared:"All floors cleared! Congratulations!",welcomeToFacility:"Welcome to Night City underground facility. Aim for escape.",tutorialStarted:"Tutorial started.",tutorialComplete:"🎉 Tutorial complete! Game start!",settingsUnderDevelopment:"Settings menu is under development.",mysteryScrollHealth:"HP recovery effect activated!",mysteryScrollEnergy:"Energy recovery effect activated!",mysteryScrollScore:"Score bonus +50!",mysteryScrollMap:"Map exploration effect activated!",tutorialWelcome:"Welcome to Terminal Descent! Use WASD keys to move.",tutorialMovement:"Well done! You can move freely with WASD. Try exploring a bit more.",tutorialCombat:"You can switch to attack mode with Space key. Try it!",tutorialInventory:"Press I key to open inventory and check items.",tutorialEquipment:"Use number keys (1-9) to use items. Try using an item!",tutorialCompleted:"Tutorial complete! You have learned all functions.",tutorialProgressMovement:"✓ Movement mastered!",tutorialProgressCombat:"✓ Next, let's learn the combat system.",tutorialProgressCombatComplete:"✓ Combat basics understood!",tutorialProgressInventory:"✓ Inventory usage learned!",tutorialProgressEquipment:"✓ Equipment system perfect!",attackPowerLabel:"Attack Power",defenseLabel:"Defense",experienceLabel:"Experience",closeInstruction:"Press number keys (1-9) to use items | Press I to close",statusHeader:"=== STATUS ===",statusCloseInstruction:"Press S to close",equipmentHeader:"=== EQUIPMENT ===",equipmentStatsHeader:"=== EQUIPMENT STATS ===",totalDefenseLabel:"Total Defense",welcomeTitle:"TERMINAL DESCENT",welcomeSubtitle:"Escape from Night City underground facility",menuInstructions:"↑↓ or WS: Select    Enter or F: Confirm",prologueLines:["The year is 2087. In an underground research facility","in Night City, you wake up.","","Security systems have gone haywire, and the facility is sealed.","To survive, you must escape to the surface.","","Gather equipment, avoid enemies, and escape from","10 underground levels.","","[Press Enter to start]"],menuOptions:["[Start] Begin game","[Tutorial] Learn controls","[Settings] Options"],emptyInventoryMessage:"Inventory is empty",weaponSlot:"Weapon",headSlot:"Head",chestSlot:"Chest",legsSlot:"Legs",feetSlot:"Feet",shieldSlot:"Shield",noItem:"None",gremlin:"Gremlin",goblin:"Goblin",orc:"Orc",troll:"Troll",takeoffHeader:"=== Remove Equipment ===",takeoffInstruction:"Select equipment to remove",takeoffControls:"↑↓ keys: Select | Enter: Remove | T key: Close",noEquipmentToRemove:"No equipment to remove.",weaponUnequipped:"{{weapon}} unequipped.",armorUnequipped:"{{armor}} unequipped."}};class A{currentLanguage="ja";setLanguage(e){this.currentLanguage=e}getCurrentLanguage(){return this.currentLanguage}getMessage(e){return I[this.currentLanguage][e]}getMessages(){return I[this.currentLanguage]}}const M=new A,n=l=>{const e=M.getMessage(l);return Array.isArray(e)?e.join(`
`):e},D=l=>{const e=M.getMessage(l);return Array.isArray(e)?e:[e]};function p(l){return l.nameKey?n(l.nameKey):l.name}function R(l){if(l.descriptionKey){const e=n(l.descriptionKey);return l.itemType==="weapon"&&l.descriptionParams?.damage!==void 0?n("weaponDescriptionFormat").replace("{{description}}",e).replace("{{damage}}",String(l.descriptionParams.damage)):l.itemType==="armor"&&l.descriptionParams?.defense!==void 0?n("armorDescriptionFormat").replace("{{description}}",e).replace("{{defense}}",String(l.descriptionParams.defense)):e}return l.description}function q(l){const e=l.equipment;return{weapon:e.mainHand?p(e.mainHand):n("noItem"),head:e.head?p(e.head):n("noItem"),chest:e.chest?p(e.chest):n("noItem"),legs:e.legs?p(e.legs):n("noItem"),feet:e.feet?p(e.feet):n("noItem"),shield:e.offHand?p(e.offHand):n("noItem")}}function L(l){let e=0;return["head","chest","legs","feet","offHand"].forEach(a=>{const s=l.equipment[a];s&&"defense"in s&&(e+=s.defense)}),e}function F(l){const t=l.equipment.mainHand;return 10+(t&&"damage"in t?t.damage:0)}function b(l){const e=L(l),t=F(l),a=Object.values(l.equipment).filter(s=>s!==void 0).length;return{totalDefense:e,attackPower:t,equipmentCount:a}}function K(l){return"key"in l}function O(l){if(typeof l=="string")return l;if(K(l)){let e=n(l.key);return l.params&&Object.entries(l.params).forEach(([t,a])=>{const s=`{{${t}}}`;e=e.replace(s,String(a))}),e}else return l.text}function m(l,e){const t={key:l,timestamp:Date.now()};return e&&(t.params=e),t}function k(l){return{text:l,timestamp:Date.now()}}function E(){return Math.random().toString(36).substring(2)+Date.now().toString(36)}function T(l,e){return l.x>=0&&l.x<e.width&&l.y>=0&&l.y<e.height}function $(l){switch(l){case"north":return{x:0,y:-1};case"south":return{x:0,y:1};case"east":return{x:1,y:0};case"west":return{x:-1,y:0}}}function N(l,e){return{x:l.x+e.x,y:l.y+e.y}}function f(l,e){return Math.floor(Math.random()*(e-l+1))+l}function w(l){return l[Math.floor(Math.random()*l.length)]}function x(l){const t={g:"gremlin",G:"goblin",o:"orc",T:"troll"}[l.char];return t?n(t):l.char}class _{player;constructor(e){this.player=this.createPlayer(e)}createPlayer(e){return{id:E(),position:{...e},char:"@",color:"#00ff00",type:"player",blocking:!0,visible:!0,level:1,experience:0,experienceToNext:100,health:100,maxHealth:100,energy:100,maxEnergy:100,accessLevel:1,inventory:[],equipment:{}}}getPlayer(){return{...this.player}}getPlayerDirect(){return this.player}getPosition(){return{...this.player.position}}setPosition(e){this.player.position={...e}}move(e){const t=$(e);return N(this.player.position,t)}confirmMove(e){this.player.position={...e}}takeDamage(e){this.player.health=Math.max(0,this.player.health-e)}heal(e){this.player.health=Math.min(this.player.maxHealth,this.player.health+e)}useEnergy(e){return this.player.energy>=e?(this.player.energy-=e,!0):!1}restoreEnergy(e){this.player.energy=Math.min(this.player.maxEnergy,this.player.energy+e)}isAlive(){return this.player.health>0}isDead(){return this.player.health<=0}addItem(e){if(e.stackable){const t=this.player.inventory.find(a=>a.name===e.name&&a.itemType===e.itemType);if(t)return t.quantity+=e.quantity,!0}return this.player.inventory.length<20?(this.player.inventory.push({...e}),!0):!1}removeItem(e,t=1){const a=this.player.inventory.findIndex(i=>i.id===e);if(a===-1)return null;const s=this.player.inventory[a];return s.quantity<=t?(this.player.inventory.splice(a,1),s):(s.quantity-=t,{...s,id:E(),quantity:t})}getInventory(){return[...this.player.inventory]}findItem(e){return this.player.inventory.find(a=>a.id===e)||null}hasItem(e){return this.player.inventory.some(t=>t.id===e)}calculateExperienceToNext(e){return Math.floor(100*Math.pow(1.5,e-1))}addExperience(e){this.player.experience+=e;let t=!1;for(;this.player.experience>=this.player.experienceToNext;)this.player.experience-=this.player.experienceToNext,this.levelUp(),t=!0;return t}levelUp(){this.player.level++,this.player.experienceToNext=this.calculateExperienceToNext(this.player.level),this.player.maxHealth+=10,this.player.maxEnergy+=5,this.player.health=this.player.maxHealth,this.player.energy=this.player.maxEnergy}increaseAccessLevel(){this.player.accessLevel++}getStats(){return{level:this.player.level,experience:this.player.experience,experienceToNext:this.player.experienceToNext,experienceProgress:Math.floor(this.player.experience/this.player.experienceToNext*100),health:this.player.health,maxHealth:this.player.maxHealth,energy:this.player.energy,maxEnergy:this.player.maxEnergy,accessLevel:this.player.accessLevel,inventoryCount:this.player.inventory.length}}serialize(){return JSON.stringify(this.player)}deserialize(e){try{const t=JSON.parse(e);if(typeof t.level=="number"&&typeof t.health=="number"&&typeof t.maxHealth=="number"&&typeof t.position=="object"&&typeof t.position.x=="number"&&typeof t.position.y=="number")this.player={...t};else throw new Error("Invalid player data format")}catch(t){console.error("Failed to deserialize player data:",t),this.player=this.createPlayer({x:0,y:0})}}reset(e){this.player=this.createPlayer(e)}equipWeapon(e){return this.player.equipment.mainHand&&this.addItem(this.player.equipment.mainHand),this.player.equipment.mainHand=e,!0}unequipWeapon(){const e=this.player.equipment.mainHand;return e?(delete this.player.equipment.mainHand,e):null}getEquippedWeapon(){return this.player.equipment.mainHand||null}equipArmor(e){const t=e.slot;if(t==="mainHand"||t==="accessory")return!1;const a=this.player.equipment[t];return a&&this.addItem(a),this.player.equipment[t]=e,!0}unequipArmor(e){if(e==="mainHand"||e==="accessory")return null;const t=this.player.equipment[e];return t?(delete this.player.equipment[e],t):null}getEquippedArmor(e){return e==="mainHand"||e==="accessory"?null:this.player.equipment[e]||null}getTotalDefense(){let e=0;const t=["offHand","head","chest","legs","feet"];for(const a of t){const s=this.getEquippedArmor(a);s&&(e+=s.defense)}return e}getAttackDamage(){const e=this.player.equipment.mainHand,t=10;return e?t+e.damage:t}getAttackAccuracy(){const e=this.player.equipment.mainHand,t=80;return e?Math.min(95,t+e.accuracy):t}getCriticalChance(){const e=this.player.equipment.mainHand,t=5;return e?Math.min(50,t+e.criticalChance):t}rollAttackHit(){const e=this.getAttackAccuracy();return Math.random()*100<e}rollCriticalHit(){const e=this.getCriticalChance();return Math.random()*100<e}rollDamage(){const e=this.getAttackDamage(),t=this.rollCriticalHit();return{damage:t?Math.floor(e*1.5):e,isCritical:t}}}class S{dimensions;level;constructor(e,t=1){this.dimensions=e,this.level=t}generate(e){const t=this.createEmptyTiles(),a=this.generateRooms();if(a.forEach(i=>this.carveRoom(t,i)),this.connectRooms(t,a),a.length>0){const i=a[0];e.position={x:i.position.x+Math.floor(i.dimensions.width/2),y:i.position.y+Math.floor(i.dimensions.height/2)},console.log(`Player placed at (${e.position.x},${e.position.y}) in room at (${i.position.x},${i.position.y})`),console.log(`Generated ${a.length} rooms`)}else console.error("No rooms generated! Player will be stuck in walls.");const s=this.generateEntities(a,e.position);return s.push(e),{level:this.level,dimensions:this.dimensions,tiles:t,rooms:a,entities:s,player:e}}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let a=0;a<this.dimensions.width;a++)e[t][a]=this.createWallTile({x:a,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}generateRooms(){const e=[];for(let r=0;r<50&&e.length<8;r++){const o=f(4,10),h=f(4,10),c=f(1,this.dimensions.width-o-1),g=f(1,this.dimensions.height-h-1),d={position:{x:c,y:g},dimensions:{width:o,height:h},tiles:[],connected:!1};e.some(v=>this.roomsOverlap(d,v))||e.push(d)}return e}roomsOverlap(e,t){return!(e.position.x+e.dimensions.width+1<t.position.x||t.position.x+t.dimensions.width+1<e.position.x||e.position.y+e.dimensions.height+1<t.position.y||t.position.y+t.dimensions.height+1<e.position.y)}carveRoom(e,t){for(let a=t.position.y;a<t.position.y+t.dimensions.height;a++)for(let s=t.position.x;s<t.position.x+t.dimensions.width;s++)T({x:s,y:a},this.dimensions)&&(e[a][s]=this.createFloorTile({x:s,y:a}))}connectRooms(e,t){if(t.length<2)return;for(let s=0;s<t.length-1;s++){const i=t[s],r=t[s+1];this.createCorridor(e,i,r),i.connected=!0,r.connected=!0}const a=Math.floor(t.length/3);for(let s=0;s<a;s++){const i=w(t),r=w(t);i!==r&&this.createCorridor(e,i,r)}}createCorridor(e,t,a){const s={x:t.position.x+Math.floor(t.dimensions.width/2),y:t.position.y+Math.floor(t.dimensions.height/2)},i={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};f(0,1)===0?(this.carveHorizontalCorridor(e,s.x,i.x,s.y),this.carveVerticalCorridor(e,i.x,s.y,i.y)):(this.carveVerticalCorridor(e,s.x,s.y,i.y),this.carveHorizontalCorridor(e,s.x,i.x,i.y))}carveHorizontalCorridor(e,t,a,s){const i=Math.min(t,a),r=Math.max(t,a);for(let o=i;o<=r;o++)T({x:o,y:s},this.dimensions)&&(e[s][o]=this.createFloorTile({x:o,y:s}))}carveVerticalCorridor(e,t,a,s){const i=Math.min(a,s),r=Math.max(a,s);for(let o=i;o<=r;o++)T({x:t,y:o},this.dimensions)&&(e[o][t]=this.createFloorTile({x:t,y:o}))}generateEntities(e,t){const a=[],s=e.slice(1);s.forEach(o=>{const h=Math.min(.3+this.level*.05,.7);if(Math.random()<h){const g=this.createEnemy(o);a.push(g)}const c=Math.min(.2+this.level*.02,.4);if(Math.random()<c){const g=this.createItem(o);a.push(g)}});const i=a.filter(o=>o.type==="enemy").length,r=Math.max(1,Math.floor(s.length/3));if(i<r){const o=s.filter(c=>!a.some(g=>g.type==="enemy"&&g.position.x>=c.position.x&&g.position.x<c.position.x+c.dimensions.width&&g.position.y>=c.position.y&&g.position.y<c.position.y+c.dimensions.height)),h=r-i;for(let c=0;c<h&&c<o.length;c++){const g=o[c],d=this.createEnemy(g);a.push(d)}}return a}createEnemy(e){const t=f(e.position.x+1,e.position.x+e.dimensions.width-2),a=f(e.position.y+1,e.position.y+e.dimensions.height-2),s=20,i=5,r=Math.floor(this.level*1.5),o=Math.floor(this.level*.8),h=s+r,c=i+o,g=this.getEnemyTypes(),d=w(g);return{id:`enemy_${Date.now()}_${Math.random()}`,position:{x:t,y:a},char:d.char,color:d.color,type:"enemy",blocking:!0,visible:!0,health:h,maxHealth:h,damage:c,aiType:"aggressive"}}getEnemyTypes(){const e=[{char:"G",color:"#ff4444",name:"Gremlin"},{char:"R",color:"#8b4513",name:"Rat"},{char:"S",color:"#32cd32",name:"Slime"}],t=[{char:"O",color:"#ff6600",name:"Orc"},{char:"T",color:"#daa520",name:"Troll"},{char:"W",color:"#483d8b",name:"Wraith"}],a=[{char:"D",color:"#dc143c",name:"Dragon"},{char:"L",color:"#8b008b",name:"Lich"},{char:"M",color:"#ff1493",name:"Minotaur"}];return this.level<=3?e:this.level<=6?[...e,...t]:[...e,...t,...a]}createItem(e){const t=f(e.position.x+1,e.position.x+e.dimensions.width-2),a=f(e.position.y+1,e.position.y+e.dimensions.height-2),s=Math.random();return s<.25?this.createWeapon(t,a):s<.45?this.createArmor(t,a):this.createConsumable(t,a)}createWeapon(e,t){const a=[{char:")",color:"#cccccc",nameKey:"ironSword",descKey:"ironSwordDesc",weaponType:"sword",damage:8+Math.floor(this.level*1.2),accuracy:10,criticalChance:5,range:1},{char:"/",color:"#8b4513",nameKey:"battleAxe",descKey:"battleAxeDesc",weaponType:"axe",damage:12+Math.floor(this.level*1.5),accuracy:5,criticalChance:8,range:1},{char:"}",color:"#654321",nameKey:"hunterBow",descKey:"hunterBowDesc",weaponType:"bow",damage:6+Math.floor(this.level*1),accuracy:15,criticalChance:10,range:3},{char:"\\",color:"#4b0082",nameKey:"magicStaff",descKey:"magicStaffDesc",weaponType:"staff",damage:5+Math.floor(this.level*.8),accuracy:12,criticalChance:3,range:2},{char:"-",color:"#a9a9a9",nameKey:"steelDagger",descKey:"steelDaggerDesc",weaponType:"dagger",damage:4+Math.floor(this.level*.7),accuracy:20,criticalChance:15,range:1}],s=w(a);let i;return this.level>=3&&Math.random()<.3&&(i={type:w(["fire","ice","poison","stun","vampire"]),chance:15+Math.floor(this.level*2),value:Math.floor(this.level*1.5)}),{id:E(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:n(s.nameKey),nameKey:s.nameKey,description:`${n(s.descKey)} (攻撃力: ${s.damage})`,descriptionKey:s.descKey,descriptionParams:{damage:s.damage},stackable:!1,quantity:1,itemType:"weapon",weaponType:s.weaponType,damage:s.damage,accuracy:s.accuracy,criticalChance:s.criticalChance,range:s.range,...i&&{special:i}}}createArmor(e,t){const a=[{char:"[",color:"#8b4513",nameKey:"ironHelmet",descKey:"ironHelmetDesc",armorType:"helmet",slot:"head",defense:3+Math.floor(this.level*.8)},{char:"]",color:"#c0c0c0",nameKey:"steelChestplate",descKey:"steelChestplateDesc",armorType:"chestplate",slot:"chest",defense:5+Math.floor(this.level*1.2)},{char:"{",color:"#a0522d",nameKey:"leatherLeggings",descKey:"leatherLeggingsDesc",armorType:"leggings",slot:"legs",defense:4+Math.floor(this.level*1)},{char:"(",color:"#654321",nameKey:"combatBoots",descKey:"combatBootsDesc",armorType:"boots",slot:"feet",defense:2+Math.floor(this.level*.6)},{char:"&",color:"#8b7355",nameKey:"towerShield",descKey:"towerShieldDesc",armorType:"shield",slot:"offHand",defense:6+Math.floor(this.level*1.5)}],s=w(a),i=50+Math.floor(this.level*10);return{id:E(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:n(s.nameKey),nameKey:s.nameKey,description:`${n(s.descKey)} (防御力: ${s.defense})`,descriptionKey:s.descKey,descriptionParams:{defense:s.defense},stackable:!1,quantity:1,itemType:"armor",armorType:s.armorType,defense:s.defense,durability:i,maxDurability:i,slot:s.slot}}createConsumable(e,t){const s=w([{char:"!",color:"#ffff00",nameKey:"healthPotion",descKey:"healthPotionDesc"},{char:"%",color:"#ff8800",nameKey:"energyBar",descKey:"energyBarDesc"},{char:"?",color:"#8800ff",nameKey:"mysteryScroll",descKey:"mysteryScrollDesc"},{char:"+",color:"#00ffff",nameKey:"healingHerb",descKey:"healingHerbDesc"},{char:"*",color:"#ff00ff",nameKey:"energyCore",descKey:"energyCoreDesc"}]);return{id:E(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:n(s.nameKey),nameKey:s.nameKey,description:n(s.descKey),descriptionKey:s.descKey,stackable:!0,quantity:1,itemType:"consumable"}}static updateFieldOfView(e,t,a=8){for(let s=0;s<e.dimensions.height;s++)for(let i=0;i<e.dimensions.width;i++)e.tiles[s][i].visible=!1;for(let s=-a;s<=a;s++)for(let i=-a;i<=a;i++){const r=t.x+i,o=t.y+s;if(T({x:r,y:o},e.dimensions)&&Math.sqrt(i*i+s*s)<=a){const c=e.tiles[o][r];c.visible=!0,c.explored=!0}}}}class U{data;generator;constructor(){this.data={floors:new Map,currentFloor:1,maxFloor:1},this.generator=new S({width:80,height:50},1)}getDungeonData(){return{floors:new Map(this.data.floors),currentFloor:this.data.currentFloor,maxFloor:this.data.maxFloor}}getCurrentDungeon(){return this.data.floors.get(this.data.currentFloor)}generateInitialFloor(e){this.generator=new S({width:80,height:50},1);const t=this.generator.generate(e);if(t.rooms.length>0){const a=t.rooms[t.rooms.length-1];t.stairsDown={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};const s=t.stairsDown;t.tiles[s.y]&&t.tiles[s.y][s.x]&&(t.tiles[s.y][s.x]={position:{...s},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}return this.data.floors.set(1,t),this.data.currentFloor=1,this.data.maxFloor=1,t}moveToFloor(e,t){if(!this.data.floors.has(e)){this.generator=new S({width:80,height:50},e);const i=this.generator.generate(t);if(e>1&&i.rooms.length>0){const r=i.rooms[0];i.stairsUp={x:r.position.x+Math.floor(r.dimensions.width/2),y:r.position.y+Math.floor(r.dimensions.height/2)};const o=i.stairsUp;i.tiles[o.y]&&i.tiles[o.y][o.x]&&(i.tiles[o.y][o.x]={position:{...o},type:"stairs",char:"<",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}if(e<10&&i.rooms.length>0){const r=i.rooms[i.rooms.length-1];i.stairsDown={x:r.position.x+Math.floor(r.dimensions.width/2),y:r.position.y+Math.floor(r.dimensions.height/2)};const o=i.stairsDown;i.tiles[o.y]&&i.tiles[o.y][o.x]&&(i.tiles[o.y][o.x]={position:{...o},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}this.data.floors.set(e,i),e>this.data.maxFloor&&(this.data.maxFloor=e)}const a=this.data.floors.get(e),s=this.data.currentFloor;if(this.data.currentFloor=e,e>s&&a.stairsUp?t.position={...a.stairsUp}:e<s&&a.stairsDown&&(t.position={...a.stairsDown}),t.position){const i=a.tiles[t.position.y]?.[t.position.x];(!i||i.blocking)&&(t.position=this.findNearestValidPosition(a,t.position))}return a}findNearestValidPosition(e,t){for(let a=1;a<=5;a++)for(let s=-a;s<=a;s++)for(let i=-a;i<=a;i++){if(Math.abs(s)!==a&&Math.abs(i)!==a)continue;const r={x:t.x+s,y:t.y+i};if(r.x<0||r.x>=e.dimensions.width||r.y<0||r.y>=e.dimensions.height)continue;const o=e.tiles[r.y]?.[r.x];if(o&&!o.blocking)return r}return t}hasStairsAt(e){const t=this.getCurrentDungeon();return t?t.stairsUp&&t.stairsUp.x===e.x&&t.stairsUp.y===e.y?"up":t.stairsDown&&t.stairsDown.x===e.x&&t.stairsDown.y===e.y?"down":null:null}getCurrentFloor(){return this.data.currentFloor}getMaxFloor(){return this.data.maxFloor}saveDungeonState(e){this.data.floors.set(this.data.currentFloor,{...e})}}class W{canvas;ctx;config;camera;constructor(e,t){this.canvas=e;const a=e.getContext("2d");if(!a)throw new Error("Failed to get 2D rendering context");this.ctx=a,this.config=t,this.camera={position:{x:0,y:0},viewport:t.viewport,target:{x:0,y:0}},this.setupCanvas()}setupCanvas(){this.canvas.width=this.config.viewport.width,this.canvas.height=this.config.viewport.height,this.ctx.imageSmoothingEnabled=!1,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.textBaseline="middle"}clear(){this.ctx.fillStyle=this.config.colors.background,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}updateCamera(e){this.camera.target=e;const t=Math.floor(this.config.viewport.width/this.config.tileSize),a=Math.floor(this.config.viewport.height/this.config.tileSize);this.camera.position={x:e.x-Math.floor(t/2),y:e.y-Math.floor(a/2)}}worldToScreen(e){return{x:(e.x-this.camera.position.x)*this.config.tileSize,y:(e.y-this.camera.position.y)*this.config.tileSize}}isVisible(e){const t=this.worldToScreen(e);return t.x>=-this.config.tileSize&&t.x<this.config.viewport.width&&t.y>=-this.config.tileSize&&t.y<this.config.viewport.height}renderCharacter(e,t,a,s){s&&(this.ctx.fillStyle=s,this.ctx.fillRect(t.x,t.y,this.config.tileSize,this.config.tileSize)),this.ctx.fillStyle=a,this.ctx.fillText(e,t.x+this.config.tileSize/2,t.y+this.config.tileSize/2)}renderTile(e){if(!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);if(!e.explored)return;const a=e.visible?e.color:this.config.colors.explored,s=e.visible?e.backgroundColor:void 0;this.renderCharacter(e.char,t,a,s)}renderEntity(e){if(!e.visible||!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);this.renderCharacter(e.char,t,e.color,e.backgroundColor)}render(e){if(this.clear(),e.status==="welcome"){this.renderWelcomeScreen(e);return}const t=e.currentDungeon;this.updateCamera(t.player.position);for(let a=0;a<t.dimensions.height;a++)for(let s=0;s<t.dimensions.width;s++){const i=t.tiles[a][s];i&&this.renderTile(i)}t.entities.filter(a=>a.type!=="player").forEach(a=>this.renderEntity(a)),this.renderEntity(t.player),this.renderUI(e),e.overlay.isVisible&&this.renderOverlay(e)}renderUI(e){const t=e.player,a=10,s=20;this.ctx.save(),this.ctx.font=`14px ${this.config.fontFamily}`,this.ctx.textAlign="left",this.ctx.fillStyle=this.config.colors.text,[`${n("level")}: ${t.level}`,`${n("health")}: ${t.health}/${t.maxHealth}`,`${n("energy")}: ${t.energy}/${t.maxEnergy}`,`${n("accessLevel")}: ${t.accessLevel}`,`${n("turn")}: ${e.turn}`].forEach((c,g)=>{this.ctx.fillText(c,a,a+g*s)});const r=b(t),o=[`${n("attackPowerLabel")}: ${r.attackPower}`,`${n("defenseLabel")}: ${r.totalDefense}`,`${n("experienceLabel")}: ${t.experience}/${t.experienceToNext}`],h=this.canvas.width-200;if(o.forEach((c,g)=>{this.ctx.fillText(c,h,a+g*s)}),e.messages.length>0){const c=Math.floor(this.canvas.height*.3/s),g=e.messages.slice(-c);g.forEach((d,y)=>{const v=this.canvas.height-a-(g.length-y)*s,C=O(d);this.ctx.fillText(C,a,v)})}this.ctx.restore()}getCameraPosition(){return{...this.camera.position}}screenToWorld(e){return{x:Math.floor(e.x/this.config.tileSize)+this.camera.position.x,y:Math.floor(e.y/this.config.tileSize)+this.camera.position.y}}renderOverlay(e){switch(this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),e.overlay.type){case"inventory":this.renderInventoryOverlay(e);break;case"character":this.renderStatusOverlay(e);break;case"takeoff":this.renderTakeoffOverlay(e);break}this.ctx.restore()}renderInventoryOverlay(e){const a=e.player.inventory,s=400,i=Math.min(500,a.length*30+100),r=(this.canvas.width-s)/2,o=(this.canvas.height-i)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(r,o,s,i),this.ctx.strokeRect(r,o,s,i),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText(n("inventoryHeader"),r+20,o+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(n("closeInstruction"),r+20,o+50),this.ctx.font="14px Courier New, monospace";const h=o+80;a.length===0?(this.ctx.fillStyle="#666666",this.ctx.fillText(n("emptyInventoryMessage"),r+20,h)):a.forEach((c,g)=>{const d=h+g*25;e.overlay.selectedIndex===g&&(this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.fillRect(r+10,d-15,s-20,20)),this.ctx.fillStyle="#ffff00",this.ctx.fillText(`${g+1}.`,r+20,d),this.ctx.fillStyle=c.color,this.ctx.fillText(c.char,r+50,d),this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${c.name} x${c.quantity}`,r+70,d),this.ctx.font="10px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(c.description,r+70,d+12),this.ctx.font="14px Courier New, monospace"})}renderStatusOverlay(e){const t=e.player,a=400,s=500,i=(this.canvas.width-a)/2,r=(this.canvas.height-s)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(i,r,a,s),this.ctx.strokeRect(i,r,a,s),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText(n("statusHeader"),i+20,r+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(n("statusCloseInstruction"),i+20,r+50),this.ctx.font="14px Courier New, monospace",this.ctx.fillStyle="#00ff00";const o=[{label:n("level"),value:`${t.level}`,color:"#ffff00"},{label:"HP",value:`${t.health}/${t.maxHealth}`,color:t.health<t.maxHealth*.3?"#ff4444":"#00ff00"},{label:n("energy"),value:`${t.energy}/${t.maxEnergy}`,color:t.energy<t.maxEnergy*.3?"#ffaa00":"#00ff00"},{label:"EXP",value:`${t.experience}/${t.experienceToNext}`,color:"#88ff88"},{label:n("accessLevel"),value:`${t.accessLevel}`,color:"#00ffff"},{label:n("turn"),value:`${e.turn}`,color:"#888888"},{label:"SCORE",value:`${e.score}`,color:"#ffff00"}],h=r+80;o.forEach((c,g)=>{const d=h+g*25;this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${c.label}:`,i+20,d),this.ctx.fillStyle=c.color,this.ctx.fillText(c.value,i+150,d)}),this.ctx.font="16px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.ctx.fillText(n("equipmentHeader"),i+20,r+260),this.renderEquipmentDetails(t,i+20,r+285)}renderEquipmentDetails(e,t,a){this.ctx.font="12px Courier New, monospace";const s=q(e),i=[{key:"weapon",label:n("weaponSlot")},{key:"head",label:n("headSlot")},{key:"chest",label:n("chestSlot")},{key:"legs",label:n("legsSlot")},{key:"feet",label:n("feetSlot")},{key:"shield",label:n("shieldSlot")}];let r=a;i.forEach(h=>{const c=s[h.key];this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${h.label}:`,t,r),this.ctx.fillStyle=c!==n("noItem")?"#ffff00":"#666666",this.ctx.fillText(c,t+60,r),r+=15}),r+=10,this.ctx.fillStyle="#00ff00",this.ctx.fillText(n("equipmentStatsHeader"),t,r),r+=20;const o=b(e);this.ctx.fillStyle="#88ff88",this.ctx.fillText(`${n("totalDefenseLabel")}: ${o.totalDefense}`,t,r),r+=15,this.ctx.fillStyle="#ff8888",this.ctx.fillText(`${n("attackPowerLabel")}: ${o.attackPower}`,t,r)}renderTakeoffOverlay(e){const t=e.player,a=["mainHand","head","chest","legs","feet","offHand"],s=[];if(a.forEach(d=>{const y=t.equipment[d];y&&s.push({slot:d,item:y,displayName:p(y)})}),s.length===0)return;const i=400,r=Math.min(400,s.length*30+150),o=(this.canvas.width-i)/2,h=(this.canvas.height-r)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(o,h,i,r),this.ctx.strokeRect(o,h,i,r),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText(n("takeoffHeader"),o+20,h+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(n("takeoffInstruction"),o+20,h+50),this.ctx.font="14px Courier New, monospace";const c=e.overlay.selectedIndex||0;s.forEach((d,y)=>{const v=h+80+y*25,C=y===c;C&&(this.ctx.fillStyle="#333333",this.ctx.fillRect(o+15,v-12,i-30,20)),this.ctx.fillStyle="#00ff00";const H=this.getSlotDisplayName(d.slot);this.ctx.fillText(`${H}:`,o+20,v),this.ctx.fillStyle=C?"#ffff00":"#ffffff";const P=d.item.char||"?";this.ctx.fillText(`${P} ${d.displayName}`,o+100,v)}),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888";const g=h+r-30;this.ctx.fillText(n("takeoffControls"),o+20,g)}getSlotDisplayName(e){return{mainHand:n("weaponSlot"),head:n("headSlot"),chest:n("chestSlot"),legs:n("legsSlot"),feet:n("feetSlot"),offHand:n("shieldSlot")}[e]||e}resize(e){this.config.viewport=e,this.canvas.width=e.width,this.canvas.height=e.height,this.setupCanvas()}renderWelcomeScreen(e){const t=this.canvas.width/2,a=this.canvas.height/2;if(e.welcome.showPrologue){this.renderPrologue();return}this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize*2}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.fillText(n("welcomeTitle"),t,a-120),this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.fillText(n("welcomeSubtitle"),t,a-50);const s=D("menuOptions");[{key:"start",text:s[0]},{key:"tutorial",text:s[1]},{key:"settings",text:s[2]}].forEach((r,o)=>{const h=a+o*30,c=e.welcome.selectedOption===r.key;if(this.ctx.fillStyle=c?this.config.colors.player:this.config.colors.text,c){const g=this.ctx.measureText(r.text).width,d=20;this.ctx.fillText(">",t-g/2-d,h),this.ctx.fillText("<",t+g/2+d,h)}this.ctx.fillText(r.text,t,h)}),this.ctx.fillStyle=this.config.colors.explored,this.ctx.fillText(n("menuInstructions"),t,a+120),e.welcome.selectedOption||(e.welcome.selectedOption="start")}renderPrologue(){const e=this.canvas.width/2,t=this.canvas.height/2;this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",D("prologueLines").forEach((s,i)=>{this.ctx.fillText(s,e,t-100+i*25)})}}class Y{keyMapping;pressedKeys;actionCallbacks;element;keyRepeatTimer;REPEAT_DELAY=300;REPEAT_RATE=100;constructor(e){this.element=e,this.pressedKeys=new Set,this.actionCallbacks=new Map,this.keyRepeatTimer=new Map,this.keyMapping={KeyW:"move_north",ArrowUp:"move_north",KeyS:"move_south",ArrowDown:"move_south",KeyA:"move_west",ArrowLeft:"move_west",KeyD:"move_east",ArrowRight:"move_east",KeyF:"interact",Enter:"interact",Space:"attack",KeyX:"attack",KeyI:"inventory",KeyE:"equipment",KeyC:"character",Comma:"pickup",KeyG:"pickup",KeyQ:"quaff",KeyR:"read",KeyT:"takeoff",Digit1:"use_item_1",Digit2:"use_item_2",Digit3:"use_item_3",Digit4:"use_item_4",Digit5:"use_item_5",Digit6:"use_item_6",Digit7:"use_item_7",Digit8:"use_item_8",Digit9:"use_item_9",Escape:"pause",KeyM:"menu",KeyL:"language_switch"},this.setupEventListeners()}setupEventListeners(){this.element.tabIndex<0&&(this.element.tabIndex=0),this.element.focus();const e=a=>{a.preventDefault();const s=a.code;if(!this.pressedKeys.has(s)){this.pressedKeys.add(s),this.handleKeyPress(s);const i=this.keyMapping[s];this.isMovementAction(i)&&this.setupKeyRepeat(s)}},t=a=>{a.preventDefault();const s=a.code;this.pressedKeys.delete(s),this.clearKeyRepeat(s)};this.element.addEventListener("keydown",e),this.element.addEventListener("keyup",t),this.element.addEventListener("blur",()=>{this.element.focus()}),this.element.addEventListener("click",()=>{this.element.focus()})}handleKeyPress(e){const t=this.keyMapping[e];if(t&&this.actionCallbacks.has(t)){const a=this.actionCallbacks.get(t);a&&a()}}onAction(e,t){this.actionCallbacks.set(e,t)}offAction(e){this.actionCallbacks.delete(e)}setKeyMapping(e){Object.assign(this.keyMapping,e)}getKeyMapping(){return{...this.keyMapping}}isKeyPressed(e){return this.pressedKeys.has(e)}isMovementKeyPressed(){return["KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].some(t=>this.pressedKeys.has(t))}getPressedKeys(){return Array.from(this.pressedKeys)}isMovementAction(e){return e==="move_north"||e==="move_south"||e==="move_east"||e==="move_west"}setupKeyRepeat(e){this.clearKeyRepeat(e);const t=setTimeout(()=>{const a=setInterval(()=>{this.pressedKeys.has(e)?this.handleKeyPress(e):this.clearKeyRepeat(e)},this.REPEAT_RATE);this.keyRepeatTimer.set(e,a)},this.REPEAT_DELAY);this.keyRepeatTimer.set(e,t)}clearKeyRepeat(e){const t=this.keyRepeatTimer.get(e);t!==void 0&&(clearTimeout(t),clearInterval(t),this.keyRepeatTimer.delete(e))}clearPressedKeys(){this.pressedKeys.clear(),this.keyRepeatTimer.forEach(e=>{clearTimeout(e),clearInterval(e)}),this.keyRepeatTimer.clear()}disable(){this.clearPressedKeys()}focus(){this.element.focus()}getActionForKey(e){return this.keyMapping[e]}getKeyForAction(e){for(const[t,a]of Object.entries(this.keyMapping))if(a===e)return t}keyToDisplayString(e){return{KeyW:"W",KeyA:"A",KeyS:"S",KeyD:"D",KeyE:"E",KeyC:"C",KeyF:"F",KeyG:"G",KeyI:"I",KeyL:"L",KeyM:"M",KeyQ:"Q",KeyR:"R",KeyT:"T",KeyX:"X",Comma:",",Enter:"Enter",Digit1:"1",Digit2:"2",Digit3:"3",Digit4:"4",Digit5:"5",Digit6:"6",Digit7:"7",Digit8:"8",Digit9:"9",ArrowUp:"↑",ArrowDown:"↓",ArrowLeft:"←",ArrowRight:"→",Space:"Space",Escape:"Esc"}[e]||e}}class u{gameState;playerController;dungeonGenerator;dungeonManager;renderer;inputHandler;lastUpdateTime;animationFrameId;attackMode=!1;static ITEM_EFFECTS={HEALTH_POTION:30,HEALING_HERB:15,ENERGY_BAR:20,ENERGY_CORE:50,MYSTERY_SCROLL_HEALTH:20,MYSTERY_SCROLL_ENERGY:30,MYSTERY_SCROLL_SCORE:50};constructor(e){this.playerController=new _({x:0,y:0}),this.dungeonGenerator=new S({width:80,height:50},1),this.dungeonManager=new U;const t={tileSize:16,fontSize:14,fontFamily:"Courier New, monospace",viewport:{width:e.width,height:e.height},colors:{background:"#000000",text:"#00ff00",player:"#00ff00",enemy:"#ff4444",wall:"#444444",floor:"#666666",explored:"#333333",visible:"#ffffff"}};this.renderer=new W(e,t),this.inputHandler=new Y(e),this.setupInputHandlers(),this.gameState=this.createInitialGameState(),this.lastUpdateTime=0}createInitialGameState(){const e=this.playerController.getPlayer(),t=this.dungeonManager.generateInitialFloor(e);return this.playerController.setPosition(t.player.position),S.updateFieldOfView(t,t.player.position),{status:"welcome",currentDungeon:t,dungeonData:this.dungeonManager.getDungeonData(),player:t.player,turn:0,score:0,messages:[],tutorial:{isActive:!1,currentStep:"welcome",stepProgress:0,showHint:!1,hintText:""},welcome:{showPrologue:!0,selectedOption:null},overlay:{type:"none",isVisible:!1},levelCleared:!1}}setupInputHandlers(){this.inputHandler.onAction("move_north",()=>this.handleDirectionalInput("north")),this.inputHandler.onAction("move_south",()=>this.handleDirectionalInput("south")),this.inputHandler.onAction("move_east",()=>this.handleDirectionalInput("east")),this.inputHandler.onAction("move_west",()=>this.handleDirectionalInput("west")),this.inputHandler.onAction("attack",()=>this.toggleAttackMode()),this.inputHandler.onAction("interact",()=>this.handleInteract()),this.inputHandler.onAction("inventory",()=>this.toggleInventoryOverlay()),this.inputHandler.onAction("character",()=>this.toggleStatusOverlay()),this.inputHandler.onAction("takeoff",()=>this.toggleTakeoffOverlay());for(let e=1;e<=9;e++)this.inputHandler.onAction(`use_item_${e}`,()=>this.handleItemAction(e-1));this.inputHandler.onAction("pause",()=>this.togglePause()),this.inputHandler.onAction("menu",()=>this.showMenu()),this.inputHandler.onAction("language_switch",()=>this.handleLanguageSwitch())}handleDirectionalInput(e){if(this.gameState.status==="welcome"){this.handleWelcomeNavigation(e);return}if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.gameState.overlay.isVisible){this.handleOverlayNavigation(e);return}this.attackMode?this.handleAttack(e):this.handlePlayerMove(e)}}toggleAttackMode(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||this.gameState.overlay.isVisible||(this.attackMode=!this.attackMode,this.attackMode?this.addMessage(m("attackModeOn")):this.addMessage(m("movementMode")),this.gameState.status==="tutorial"&&this.updateTutorialProgress("combat"))}handleAttack(e){this.playerController.getPosition();const t=this.playerController.move(e),a=this.getEnemyAt(t);a?(this.handleCombat(a),this.processTurn()):this.addMessage(m("noEnemyInThatDirection")),this.attackMode=!1,this.addMessage(m("movementMode"))}handlePlayerMove(e){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;this.playerController.getPosition();const t=this.playerController.move(e);this.isValidMove(t)?(this.playerController.confirmMove(t),this.gameState.player.position=t,S.updateFieldOfView(this.gameState.currentDungeon,t),this.gameState.status==="tutorial"&&this.updateTutorialProgress("movement"),this.processTurn()):this.addMessage(m("cannotMoveThere"))}isValidMove(e){const t=this.gameState.currentDungeon;return!T(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player"&&i.type!=="enemy")}getEnemyAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="enemy")}handleCombat(e){if(!this.playerController.rollAttackHit()){this.addMessage(m("attackMissed",{enemy:x(e)}));return}const{damage:t,isCritical:a}=this.playerController.rollDamage();if("health"in e&&"maxHealth"in e){if(e.health-=t,a?this.addMessage(m("criticalHit",{enemy:x(e),damage:t.toString(),health:Math.max(0,e.health).toString(),maxHealth:e.maxHealth.toString()})):this.addMessage(m("normalHit",{enemy:x(e),damage:t.toString(),health:Math.max(0,e.health).toString(),maxHealth:e.maxHealth.toString()})),e.health<=0){const s=this.gameState.currentDungeon.entities.findIndex(i=>i.id===e.id);if(s!==-1){this.gameState.currentDungeon.entities.splice(s,1),this.addMessage(m("enemyDefeated",{enemy:x(e)}));const i=this.calculateExperienceReward(e),r=this.playerController.addExperience(i);this.gameState.score+=10,this.addMessage(m("experienceGained",{exp:i.toString()})),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,r&&this.addMessage(m("levelUp",{level:this.gameState.player.level.toString()}))}}}else{a?this.addMessage(m("criticalHit",{enemy:x(e),damage:t.toString(),health:"0",maxHealth:"100"})):this.addMessage(m("normalHit",{enemy:x(e),damage:t.toString(),health:"0",maxHealth:"100"}));const s=this.gameState.currentDungeon.entities.findIndex(i=>i.id===e.id);if(s!==-1){this.gameState.currentDungeon.entities.splice(s,1),this.addMessage(m("enemyDefeated",{enemy:x(e)}));const i=this.calculateExperienceReward(e),r=this.playerController.addExperience(i);this.gameState.score+=10,this.addMessage(m("experienceGained",{exp:i.toString()})),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,r&&this.addMessage(m("levelUp",{level:this.gameState.player.level.toString()}))}}}calculateExperienceReward(e){const a={G:25,R:20,S:22,O:40,T:45,W:50,D:100,L:90,M:85}[e.char]||20,s="maxHealth"in e?Math.floor(e.maxHealth/10):0;return a+s}handleInteract(){if(this.gameState.status==="welcome"){this.handleWelcomeInteract();return}if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;if(this.gameState.overlay.isVisible){this.handleOverlayInteraction();return}const e=this.gameState.player.position,t=this.gameState.currentDungeon,a=this.dungeonManager.hasStairsAt(e);if(a){this.handleStairsInteraction(a);return}const s=t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.type==="item");if(s){const i=s;if(this.playerController.addItem(i)){this.addMessage(m("pickedUpItemWithName",{char:s.char,item:p(i)}));const r=t.entities.findIndex(o=>o.id===s.id);r!==-1&&t.entities.splice(r,1),this.processTurn()}else this.addMessage(m("inventoryFull"))}else this.addMessage(m("cannotInteract"))}handleStairsInteraction(e){const t=this.dungeonManager.getCurrentFloor();let a;if(e==="down")a=t+1,this.addMessage(m("descendingToFloor",{floor:a.toString()}));else{if(a=t-1,a<1){this.addMessage(m("cannotGoUp"));return}this.addMessage(m("returningToFloor",{floor:a.toString()}))}const s=this.attackMode;this.dungeonManager.saveDungeonState(this.gameState.currentDungeon);const i=this.playerController.getPlayer(),r=this.dungeonManager.moveToFloor(a,i);this.gameState.currentDungeon=r,this.gameState.dungeonData=this.dungeonManager.getDungeonData(),this.gameState.player.position=i.position,this.gameState.currentDungeon.player=this.gameState.player,this.gameState.levelCleared=!1,this.playerController.setPosition(i.position),this.attackMode=s,S.updateFieldOfView(r,i.position),this.addMessage(m("arrivedAtFloor",{floor:a.toString()}))}getCurrentEquipmentDisplay(){const t=this.playerController.getPlayer().equipment,a=[];if(t.mainHand){const o=t.mainHand,h=p(o);a.push(`${n("rightHand")}: ${o.char} ${h}`);const c=n("attackPowerEffect").replace("{{damage}}",String(o.damage)).replace("{{accuracy}}",String(o.accuracy));a.push(`      ${n("effectLabel")}: ${c}`)}else a.push(`${n("rightHand")}: ${n("noEquipment")}`);[{slot:"head",name:n("head")},{slot:"chest",name:n("chest")},{slot:"legs",name:n("legs")},{slot:"feet",name:n("feet")},{slot:"offHand",name:n("leftHand")}].forEach(o=>{const h=t[o.slot];if(h){const c=p(h);a.push(`${o.name}: ${h.char} ${c}`);const g=n("defenseEffect").replace("{{defense}}",String(h.defense));a.push(`      ${n("effectLabel")}: ${g}`)}else a.push(`${o.name}: ${n("noEquipment")}`)});const i=this.playerController.getTotalDefense(),r=n("totalDefense").replace("{{total}}",String(i));return a.push(r),a}showInventory(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.playerController.getPlayer().inventory;if(e.length===0){this.addMessage(m("inventoryEmpty")),this.gameState.status==="tutorial"&&this.updateTutorialProgress("inventory");return}const t=[];t.push(n("inventoryHeader")),e.forEach((s,i)=>{const r=p(s),o=R(s);if(t.push(`[${i+1}] ${s.char} ${r} x${s.quantity}`),t.push(`     ${o}`),s.itemType==="weapon"){const h=s,c=n("attackPowerEffect").replace("{{damage}}",String(h.damage)).replace("{{accuracy}}",String(h.accuracy));t.push(`     ${n("effectLabel")}: ${c}`)}else if(s.itemType==="armor"){const h=s,c=n("defenseEffect").replace("{{defense}}",String(h.defense));t.push(`     ${n("effectLabel")}: ${c}`)}}),t.push(n("currentEquipmentHeader")),this.getCurrentEquipmentDisplay().forEach(s=>{t.push(s)}),t.push(n("usageInstructionsHeader")),t.push(n("itemUsageInstructions")),t.push(n("itemUsageExample")),this.addMessages(t),this.gameState.status==="tutorial"&&this.updateTutorialProgress("inventory")}useItem(e){this.useItemInternal(e,!0)}useItemInternal(e,t){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const a=this.playerController.getPlayer().inventory;if(e<0||e>=a.length){this.addMessage(m("noItemInSlot",{slot:(e+1).toString()}));return}const s=a[e];this.applyItemEffect(s)&&(this.playerController.removeItem(s.id,1),this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment")),t&&this.processTurn()}applyItemEffect(e){if(!e)return this.addMessage(m("invalidItem")),!1;if(!e.char||!e.name)return this.addMessage(m("invalidItem")),!1;if(e.itemType==="weapon")return this.equipWeapon(e);if(e.itemType==="armor")return this.equipArmor(e);switch(e.char){case"!":return this.playerController.heal(u.ITEM_EFFECTS.HEALTH_POTION),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${p(e)}${n("useItem")} ${n("healthRestored").replace("{{amount}}",u.ITEM_EFFECTS.HEALTH_POTION.toString())}`),!0;case"+":return this.playerController.heal(u.ITEM_EFFECTS.HEALING_HERB),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${p(e)}${n("useItem")} ${n("healthRestored").replace("{{amount}}",u.ITEM_EFFECTS.HEALING_HERB.toString())}`),!0;case"%":return this.playerController.restoreEnergy(u.ITEM_EFFECTS.ENERGY_BAR),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${p(e)}${n("useItem")} ${n("energyRestored").replace("{{amount}}",u.ITEM_EFFECTS.ENERGY_BAR.toString())}`),!0;case"*":return this.playerController.restoreEnergy(u.ITEM_EFFECTS.ENERGY_CORE),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${p(e)}${n("useItem")} ${n("energyRestored").replace("{{amount}}",u.ITEM_EFFECTS.ENERGY_CORE.toString())}`),!0;case"?":const t=[()=>(this.playerController.heal(u.ITEM_EFFECTS.MYSTERY_SCROLL_HEALTH),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,n("mysteryScrollHealth")),()=>(this.playerController.restoreEnergy(u.ITEM_EFFECTS.MYSTERY_SCROLL_ENERGY),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,n("mysteryScrollEnergy")),()=>(this.gameState.score+=u.ITEM_EFFECTS.MYSTERY_SCROLL_SCORE,n("mysteryScrollScore")),()=>{const i=this.gameState.currentDungeon,r=this.gameState.player.position;return S.updateFieldOfView(i,r,15),n("mysteryScrollMap")}],a=t[Math.floor(Math.random()*t.length)],s=a();return this.addMessage(`${p(e)}${n("useItem")} ${s}`),!0;default:return this.addMessage(m("itemCannotBeUsed",{item:p(e)})),!1}}equipWeapon(e){return this.playerController.equipWeapon(e)?(this.addMessage(m("weaponEquipped",{weapon:p(e)})),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,!0):(this.addMessage(m("cannotEquipWeapon")),!1)}equipArmor(e){return this.playerController.equipArmor(e)?(this.addMessage(m("armorEquipped",{armor:p(e)})),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,!0):(this.addMessage(m("cannotEquipArmor")),!1)}processTurn(){this.gameState.turn++,this.processEnemies(),this.checkGameState()}updateTutorialProgress(e){const t=this.gameState.tutorial;if(e)switch(t.currentStep){case"welcome":e==="movement"&&this.advanceTutorialStep("movement");break;case"movement":e==="movement"&&(t.stepProgress++,t.stepProgress>=3&&this.advanceTutorialStep("combat"));break;case"combat":e==="combat"&&this.advanceTutorialStep("inventory");break;case"inventory":e==="inventory"&&this.advanceTutorialStep("equipment");break;case"equipment":e==="equipment"&&this.advanceTutorialStep("complete");break}t.currentStep==="complete"&&this.completeTutorial()}advanceTutorialStep(e){this.gameState.tutorial.currentStep=e,this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.hintText=this.getTutorialHintText(e),this.addMessage(this.getTutorialStepMessage(e))}getTutorialHintText(e){switch(e){case"welcome":return n("tutorialWelcome");case"movement":return n("tutorialMovement");case"combat":return n("tutorialCombat");case"inventory":return n("tutorialInventory");case"equipment":return n("tutorialEquipment");case"complete":return n("tutorialCompleted");default:return""}}getTutorialStepMessage(e){switch(e){case"movement":return n("tutorialProgressMovement");case"combat":return n("tutorialProgressCombat");case"inventory":return n("tutorialProgressCombatComplete");case"equipment":return n("tutorialProgressInventory");case"complete":return n("tutorialProgressEquipment");default:return""}}completeTutorial(){this.gameState.tutorial.isActive=!1,this.gameState.tutorial.showHint=!1,this.gameState.status="playing",this.addMessage(m("tutorialComplete"))}skipTutorial(){this.completeTutorial()}processEnemies(){const e=this.gameState.currentDungeon,t=this.gameState.player.position;e.entities.filter(a=>a.type==="enemy").forEach(a=>{const s=Math.abs(a.position.x-t.x)+Math.abs(a.position.y-t.y);if(s<=3)if(s===1){const i="damage"in a?a.damage:10,r=this.playerController.getTotalDefense(),o=Math.max(1,i-r);this.playerController.takeDamage(o),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health;const h=this.playerController.getPlayer().health,c=this.playerController.getPlayer().maxHealth;r>0?this.addMessage(n("enemyAttackWithDefense").replace("{{enemy}}",x(a)).replace("{{damage}}",o.toString()).replace("{{defense}}",r.toString()).replace("{{health}}",Math.max(0,h).toString()).replace("{{maxHealth}}",c.toString())):this.addMessage(n("enemyAttackNormal").replace("{{enemy}}",x(a)).replace("{{damage}}",o.toString()).replace("{{health}}",Math.max(0,h).toString()).replace("{{maxHealth}}",c.toString())),this.playerController.isDead()&&this.playerController.getPlayer().health<=-10&&(this.gameState.status="gameOver",this.addMessage(`${n("youDied")} ${n("gameOver")}`))}else{const i=Math.sign(t.x-a.position.x),r=Math.sign(t.y-a.position.y),o={x:a.position.x+i,y:a.position.y+r};this.isValidEnemyMove(o)&&(a.position=o)}})}isValidEnemyMove(e){const t=this.gameState.currentDungeon;return!T(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player")}checkGameState(){const e=this.playerController.getPlayer().health;if(this.playerController.isDead()&&e<=-10){this.gameState.status="gameOver",this.addMessage(n("gameOver"));return}if(this.gameState.currentDungeon.entities.filter(a=>a.type==="enemy").length===0&&!this.gameState.levelCleared){this.gameState.score+=100,this.gameState.levelCleared=!0,this.addMessage(n("levelCleared"));const a=this.gameState.dungeonData.currentFloor,s=this.gameState.dungeonData.maxFloor;a<s?(this.addExitStairs(),this.addMessage(n("stairsAppeared"))):this.addMessage(n("allFloorsCleared"))}}addExitStairs(){const e=this.gameState.currentDungeon,t=e.rooms;if(t.length===0)return;const a=t[t.length-1],s={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};if(e.entities.find(o=>o.position.x===s.x&&o.position.y===s.y)){const o=[{x:s.x+1,y:s.y},{x:s.x-1,y:s.y},{x:s.x,y:s.y+1},{x:s.x,y:s.y-1}];for(const h of o)if(h.x>=a.position.x&&h.x<a.position.x+a.dimensions.width&&h.y>=a.position.y&&h.y<a.position.y+a.dimensions.height&&!e.entities.find(g=>g.position.x===h.x&&g.position.y===h.y)){s.x=h.x,s.y=h.y;break}}const r=e.tiles[s.y][s.x];r&&(r.type="stairs",r.char=">",r.color="#ffff00",r.backgroundColor="#000000",r.blocking=!1)}togglePause(){if(this.gameState.overlay.isVisible){console.log("Closing overlay:",this.gameState.overlay),this.gameState.overlay.isVisible=!1,this.gameState.overlay.type="none",console.log("Overlay closed, returning early");return}console.log("No overlay, proceeding with pause toggle"),this.gameState.status==="playing"?(this.gameState.status="paused",this.addMessage(n("gamePaused"))):this.gameState.status==="paused"&&(this.gameState.status="playing",this.addMessage(n("gameResumed")))}handleOverlayNavigation(e){if(this.gameState.overlay.type==="inventory")this.handleInventoryNavigation(e);else{if(this.gameState.overlay.type==="character")return;this.gameState.overlay.type==="takeoff"&&this.handleTakeoffNavigation(e)}}handleInventoryNavigation(e){const t=this.playerController.getPlayer().inventory;if(t.length===0)return;const a=this.gameState.overlay.selectedIndex??0;let s=a;switch(e){case"north":s=Math.max(0,a-1);break;case"south":s=Math.min(t.length-1,a+1);break}this.gameState.overlay.selectedIndex=s}handleTakeoffNavigation(e){const t=["mainHand","head","chest","legs","feet","offHand"],a=this.playerController.getPlayer(),s=t.filter(o=>a.equipment[o]!==void 0);if(s.length===0)return;const i=this.gameState.overlay.selectedIndex||0;let r=i;switch(e){case"north":r=i>0?i-1:0;break;case"south":r=i<s.length-1?i+1:s.length-1;break}this.gameState.overlay.selectedIndex=r}handleOverlayInteraction(){if(this.gameState.overlay.type==="inventory")this.handleInventoryInteraction();else{if(this.gameState.overlay.type==="character")return;this.gameState.overlay.type==="takeoff"&&this.handleTakeoffInteraction()}}handleInventoryInteraction(){const e=this.playerController.getPlayer().inventory;if(e.length===0)return;const t=this.gameState.overlay.selectedIndex??0;t<0||t>=e.length||(this.useItem(t),this.gameState.overlay.isVisible=!1,this.gameState.overlay.type="none")}handleTakeoffInteraction(){const e=["mainHand","head","chest","legs","feet","offHand"],t=this.playerController.getPlayer(),a=e.filter(r=>t.equipment[r]!==void 0);if(a.length===0){this.addMessage(m("noEquipmentToRemove")),this.hideOverlay();return}const s=this.gameState.overlay.selectedIndex??0;if(s<0||s>=a.length)return;const i=a[s];if(i==="mainHand"){const r=this.playerController.unequipWeapon();r&&(this.playerController.addItem(r),this.addMessage(m("weaponUnequipped",{weapon:p(r)})))}else{const r=this.playerController.unequipArmor(i);r&&(this.playerController.addItem(r),this.addMessage(m("armorUnequipped",{armor:p(r)})))}this.hideOverlay()}showMenu(){this.addMessage(n("menuNotImplemented"))}handleLanguageSwitch(){const t=M.getCurrentLanguage()==="ja"?"en":"ja";M.setLanguage(t),this.updateUITexts(),this.addMessage(m("languageSwitched"))}updateUITexts(){const e=document.getElementById("gameTitle"),t=document.getElementById("gameSubtitle"),a=document.getElementById("gameInfo");e&&(e.textContent=n("gameTitle")),t&&(t.textContent=n("gameSubtitle")),a&&(a.textContent=n("controls"))}addMessage(e){const t=typeof e=="string"?k(e):e;this.gameState.messages.push(t),this.gameState.messages.length>5&&this.gameState.messages.shift()}addMessages(e){this.gameState.messages=[],e.forEach(t=>{const a=typeof t=="string"?k(t):t;this.gameState.messages.push(a)})}gameLoop=e=>{const t=e-this.lastUpdateTime;this.update(t),this.render(),this.lastUpdateTime=e,this.animationFrameId=requestAnimationFrame(this.gameLoop)};update(e){}render(){this.renderer.render(this.gameState)}start(){this.addMessage(n("searchingForExit")),this.lastUpdateTime=performance.now(),this.animationFrameId=requestAnimationFrame(this.gameLoop)}stop(){this.animationFrameId!==void 0&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=void 0)}reset(){this.stop(),this.playerController.reset({x:0,y:0}),this.gameState=this.createInitialGameState()}getGameState(){return{...this.gameState}}getPlayerStats(){return this.playerController.getStats()}pause(){this.gameState.status==="playing"&&(this.gameState.status="paused",this.addMessage(n("gamePaused")))}resume(){this.gameState.status==="paused"&&(this.gameState.status="playing",this.addMessage(n("gameResumed")))}movePlayer(e){this.handlePlayerMove(e)}togglePauseTest(){this.togglePause()}setOverlayStateTest(e,t,a=0){this.gameState.overlay={type:e,isVisible:t,selectedIndex:a}}navigateInventoryTest(e){this.handleInventoryNavigation(e)}handleDirectionalInputTest(e){this.handleDirectionalInput(e)}handleOverlayInteractionTest(){this.handleOverlayInteraction()}toggleAttack(){this.toggleAttackMode()}showInventoryTest(){this.showInventory()}useItemTest(e){this.useItem(e)}addItemToPlayer(e){return this.playerController.addItem(e)}attackEnemy(e){this.handleAttack(e)}forceMissAttack(e){this.playerController.getPosition(),this.playerController.move(e),this.addMessage(n("noEnemyInThatDirection")),this.attackMode=!1,this.addMessage(m("movementMode"))}getPlayerController(){return this.playerController}toggleTakeoffOverlayTest(){this.toggleTakeoffOverlay()}handleTakeoffInteractionTest(){this.handleTakeoffInteraction()}navigateTakeoffTest(e){this.handleTakeoffNavigation(e)}testHandleInteract(){this.handleInteract()}testCastEntityToItem(e){return e}testShowInventory(){this.showInventory()}testUseItem(e){this.useItemInternal(e,!1)}testApplyItemEffect(e){return this.applyItemEffect(e)}testTakeDamage(e){this.playerController.takeDamage(e),this.gameState.player.health=this.playerController.getPlayer().health}handleWelcomeNavigation(e){const t=["start","tutorial","settings"],a=this.gameState.welcome.selectedOption?t.indexOf(this.gameState.welcome.selectedOption):0;let s=a;e==="north"?s=Math.max(0,a-1):e==="south"&&(s=Math.min(t.length-1,a+1)),this.gameState.welcome.selectedOption=t[s]}handleWelcomeInteract(){if(this.gameState.status!=="welcome")return;if(this.gameState.welcome.showPrologue){this.skipPrologue();return}switch(this.gameState.welcome.selectedOption){case"start":this.startGame();break;case"tutorial":this.startTutorial();break;case"settings":this.showSettings();break}}startGame(){this.gameState.status="playing",this.addMessage(n("welcomeToFacility"))}startTutorial(){this.gameState.status="tutorial",this.gameState.tutorial.isActive=!0,this.gameState.tutorial.currentStep="welcome",this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.showHint=!0,this.gameState.tutorial.hintText=n("tutorialWelcome"),this.addMessage(n("tutorialStarted"))}showSettings(){this.addMessage(n("settingsUnderDevelopment"))}showPrologue(){this.gameState.welcome.showPrologue=!0}skipPrologue(){this.gameState.welcome.showPrologue=!1,this.gameState.welcome.selectedOption="start"}startTutorialForTesting(){this.startTutorial()}handleInteractTest(){this.handleInteract()}testGetPlayer(){return this.playerController.getPlayer()}testSetPlayerEnergy(e){this.playerController.getPlayerDirect().energy=e,this.gameState.player.energy=e}testSetPlayerHealth(e){this.playerController.getPlayerDirect().health=e,this.gameState.player.health=e,this.gameState.currentDungeon.player.health=e}toggleInventoryOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="inventory"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showInventoryOverlay())}toggleStatusOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="character"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showStatusOverlay())}showInventoryOverlay(){this.gameState.overlay={type:"inventory",isVisible:!0,selectedIndex:0}}showStatusOverlay(){this.gameState.overlay={type:"character",isVisible:!0,selectedIndex:0}}toggleTakeoffOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="takeoff"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showTakeoffOverlay())}showTakeoffOverlay(){const e=this.playerController.getPlayer();if(["mainHand","head","chest","legs","feet","offHand"].filter(s=>e.equipment[s]!==void 0).length===0){this.addMessage(m("noEquipmentToRemove"));return}this.gameState.overlay={type:"takeoff",isVisible:!0,selectedIndex:0}}hideOverlay(){this.gameState.overlay={type:"none",isVisible:!1}}handleItemAction(e){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="inventory"&&this.gameState.overlay.isVisible?this.useItemFromOverlay(e):this.useItem(e))}useItemFromOverlay(e){const t=this.playerController.getPlayer().inventory;if(e>=t.length)return;const a=t[e];this.applyItemEffect(a),this.playerController.removeItem(a.id,1),e>=t.length-1&&(this.gameState.overlay.selectedIndex=Math.max(0,t.length-2)),this.processTurn()}}const B={BASE_URL:"/terminal-descent-demo/",DEV:!1,MODE:"production",PROD:!0,SSR:!1};document.addEventListener("DOMContentLoaded",()=>{(()=>{const a=document.getElementById("gameTitle"),s=document.getElementById("gameSubtitle"),i=document.getElementById("gameInfo");a&&(a.textContent=n("gameTitle")),s&&(s.textContent=n("gameSubtitle")),i&&(i.textContent=n("controls"))})();const e=document.getElementById("gameCanvas");if(!e){console.error("Could not find game canvas element");return}const t=new u(e);try{}catch{}t.start(),window.game=t,window.localization=M,document.addEventListener("keydown",a=>{a.ctrlKey&&a.key==="t"&&(a.preventDefault(),t.getGameState().status==="tutorial"&&(console.log("Skipping tutorial (Ctrl+T)"),t.skipTutorial()))}),console.log("Terminal Descent initialized successfully"),console.log("Use WASD keys to move, F to interact, ESC to pause"),console.log("Ctrl+T to skip tutorial")});
