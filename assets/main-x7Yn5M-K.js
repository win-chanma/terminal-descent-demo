(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const k={ja:{gameTitle:"ターミナル・ディセント",gameSubtitle:"ディストピア・ローグライク v1.0",controls:"WASDで移動 | Fで調べる | Iでインベントリ | Cでステータス | Lで言語切替 | ESCでメニュー",welcome:"ターミナル・ディセントへようこそ。WASDで移動してください。",cannotMoveThere:"そこには移動できません。",pickedUpItem:"を手に入れた。",nothingToInteract:"調べるものがありません。",enemyAttacks:"グレムリンが攻撃してきた！",youDied:"あなたは死亡しました。",gameOver:"ゲームオーバー。",levelCleared:"フロアクリア！勝利です！",gamePaused:"ゲームを一時停止しました。ESCで再開。",gameResumed:"ゲームを再開しました。",menuNotImplemented:"メニューは未実装です。",searchingForExit:"ターミナル・ディセントを開始。出口を探索中...",languageSwitched:"言語が切り替わりました。",playerAttacks:"を攻撃した！",enemyDefeated:"を倒した！",attackModeOn:"攻撃モード：方向キーで攻撃方向を選択",attackModeOff:"移動モード",noEnemyThere:"そこには敵がいません。",attackMissed:"{{enemy}}への攻撃が外れた！",criticalHit:"クリティカルヒット！ {{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",experienceGained:"経験値 +{{exp}}",levelUp:"レベルアップ！ Lv.{{level}}",enemyAttackWithDefense:"{{enemy}}の攻撃！ {{damage}}ダメージ！(防御力-{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}}の攻撃！ {{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",level:"レベル",health:"HP",energy:"エネルギー",accessLevel:"アクセス権",turn:"ターン",inventoryFull:"インベントリが満杯です。",inventoryEmpty:"インベントリは空です。",useItem:"を使用した。",pickedUpItemWithName:"{{item}}を拾った",cannotInteract:"相互作用できるものがない",invalidItem:"無効なアイテムです。",noItemInSlot:"スロット{{slot}}にアイテムがありません。",ironSword:"鉄の剣",battleAxe:"バトルアックス",hunterBow:"ハンターボウ",magicStaff:"マジックスタッフ",steelDagger:"スチールダガー",ironHelmet:"鉄のヘルメット",steelChestplate:"スチール胸当て",leatherLeggings:"レザーレギンス",combatBoots:"コンバットブーツ",towerShield:"タワーシールド",healthPotion:"ヘルスポーション",energyBar:"エネルギーバー",mysteryScroll:"謎の巻物",healingHerb:"回復薬",energyCore:"エネルギーコア",ironSwordDesc:"標準的な鉄製の剣",battleAxeDesc:"強力な戦闘用斧",hunterBowDesc:"狩猟用の弓",magicStaffDesc:"魔法を増幅する杖",steelDaggerDesc:"軽量で素早い短剣",ironHelmetDesc:"鉄製の頭部防具",steelChestplateDesc:"スチール製の胸部防具",leatherLeggingsDesc:"レザー製の脚部防具",combatBootsDesc:"戦闘用ブーツ",towerShieldDesc:"大型の防御用盾",healthPotionDesc:"HP+30回復",energyBarDesc:"エネルギー+20回復",tutorialHealthPotion:"チュートリアル ポーション",tutorialHealthPotionDesc:"チュートリアル用の回復アイテム（HP+10回復）",tutorialSword:"チュートリアル ソード",tutorialSwordDesc:"チュートリアル用の練習剣（攻撃力+3）",mysteryScrollDesc:"ランダム効果",healingHerbDesc:"HP+15回復",energyCoreDesc:"エネルギー+50回復",weaponDescriptionFormat:"{{description}} (攻撃力: {{damage}})",armorDescriptionFormat:"{{description}} (防御力: {{defense}})",inventoryHeader:"=== インベントリ ===",currentEquipmentHeader:"=== 現在の装備 ===",usageInstructionsHeader:"=== 使用方法 ===",itemUsageInstructions:"数字キー(1-9)でアイテム使用/装備",itemUsageExample:"例: 1キー = [1]番目のアイテム",effectLabel:"効果",attackPowerEffect:"攻撃力+{{damage}}, 命中率+{{accuracy}}%",defenseEffect:"防御力+{{defense}}",totalDefense:"総防御力: {{total}}",rightHand:"右手",head:"頭",chest:"胸",legs:"脚",feet:"足",leftHand:"左手",noEquipment:"(装備なし)",pauseMenuTitle:"ポーズメニュー",continueGame:"ゲームを続ける",saveGame:"セーブ",loadGame:"ロード",languageSwitch:"言語切り替え",returnToTitle:"タイトルに戻る",descendingToFloor:"階層{{floor}}へ降りる...",cannotGoUp:"これ以上上には行けません。",returningToFloor:"階層{{floor}}へ戻る...",arrivedAtFloor:"階層{{floor}}に到着しました。",healthRestored:"HP+{{amount}}回復！",energyRestored:"エネルギー+{{amount}}回復！",itemCannotBeUsed:"{{item}}は使用できません。",weaponEquipped:"{{weapon}}を装備しました。",armorEquipped:"{{armor}}を装備しました。",cannotEquipWeapon:"武器を装備できませんでした。",cannotEquipArmor:"防具を装備できませんでした。",noEnemyInThatDirection:"そこには敵がいません。",movementMode:"移動モード",stairsAppeared:"次のフロアへの階段が現れました！ (Fキーで移動)",allFloorsCleared:"全フロアクリア！おめでとうございます！",welcomeToFacility:"ナイトシティ地下施設へようこそ。脱出を目指してください。",tutorialStarted:"チュートリアルを開始します。",tutorialComplete:"🎉 チュートリアル完了！ゲーム開始です！",settingsUnderDevelopment:"設定メニューは開発中です。",mysteryScrollHealth:"HP回復効果が発動！",mysteryScrollEnergy:"エネルギー回復効果が発動！",mysteryScrollScore:"スコアボーナス+50！",mysteryScrollMap:"マップ探索効果が発動！",tutorialWelcome:"ターミナル・ディセントへようこそ！WASDキーで移動してみましょう。",tutorialMovement:"よくできました！WASDで自由に移動できます。もう少し探索してみましょう。",tutorialCombat:"Spaceキーで攻撃モードに切り替えられます。試してみてください！",tutorialInventory:"Iキーでインベントリを開いて、アイテムを確認しましょう。",tutorialEquipment:"数字キー(1-9)でアイテムを使用できます。アイテムを使ってみましょう！",tutorialCompleted:"チュートリアル完了！すべての機能を覚えました。",tutorialProgressMovement:"✓ 移動をマスターしました！",tutorialProgressCombat:"✓ 次は戦闘システムを学びましょう。",tutorialProgressCombatComplete:"✓ 戦闘の基本を理解しました！",tutorialProgressInventory:"✓ インベントリの使い方を覚えました！",tutorialProgressEquipment:"✓ 装備システムも完璧です！",attackPowerLabel:"攻撃力",defenseLabel:"防御力",experienceLabel:"経験値",closeInstruction:"数字キー(1-9)でアイテム使用 | Iキーで閉じる",statusHeader:"=== ステータス ===",statusCloseInstruction:"Sキーで閉じる",equipmentHeader:"=== 装備 ===",equipmentStatsHeader:"=== 装備統計 ===",totalDefenseLabel:"総防御力",welcomeTitle:"ターミナル・ディセント",welcomeSubtitle:"ナイトシティ地下施設からの脱出劇",menuInstructions:"↑↓ または WS: 選択    Enter または F: 決定",prologueLines:["年は2087年。ナイトシティの地下研究施設で","あなたは目を覚ました。","","警備システムが暴走し、施設は封鎖された。","生き残るには地上への脱出しかない。","","装備を集め、敵を避け、10階層の地下から","脱出せよ。","","[Enterキーで開始]"],menuOptions:["[スタート] ゲームを開始","[チュートリアル] 操作を学ぶ","[設定] オプション設定"],emptyInventoryMessage:"インベントリが空です",weaponSlot:"武器",headSlot:"頭",chestSlot:"胸",legsSlot:"脚",feetSlot:"足",shieldSlot:"盾",noItem:"なし",gremlin:"グレムリン",goblin:"ゴブリン",orc:"オーク",troll:"トロル",takeoffHeader:"=== 装備を外す ===",takeoffInstruction:"外したい装備を選んでください",takeoffControls:"↑↓キー: 選択 | Enterキー: 外す | Tキー: 閉じる",noEquipmentToRemove:"外せる装備がありません。",weaponUnequipped:"{{weapon}}を外しました。",armorUnequipped:"{{armor}}を外しました。"},en:{gameTitle:"TERMINAL DESCENT",gameSubtitle:"DYSTOPIAN ROGUELIKE v1.0",controls:"Use WASD to move | Press F to interact | I for inventory | C for character | L for language | ESC for menu",welcome:"Welcome to Terminal Descent. Use WASD to move.",cannotMoveThere:"You cannot move there.",pickedUpItem:"You picked up ",nothingToInteract:"There is nothing here to interact with.",enemyAttacks:"The gremlin attacks you!",youDied:"You have died.",gameOver:"Game Over.",levelCleared:"Level cleared! You win!",gamePaused:"Game paused. Press ESC to resume.",gameResumed:"Game resumed.",menuNotImplemented:"Menu not implemented yet.",searchingForExit:"Terminal Descent initiated. Searching for exit...",languageSwitched:"Language switched.",playerAttacks:"You attack ",enemyDefeated:"You defeated ",attackModeOn:"Attack mode: Use arrow keys to select attack direction",attackModeOff:"Movement mode",noEnemyThere:"There is no enemy there.",attackMissed:"Your attack on {{enemy}} missed!",criticalHit:"Critical hit! {{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",experienceGained:"Experience +{{exp}}",levelUp:"Level up! Lv.{{level}}",enemyAttackWithDefense:"{{enemy}} attacks! {{damage}} damage! (Defense -{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}} attacks! {{damage}} damage! HP: {{health}}/{{maxHealth}}",level:"Level",health:"Health",energy:"Energy",accessLevel:"Access",turn:"Turn",inventoryFull:"Inventory is full.",inventoryEmpty:"Your inventory is empty.",useItem:"You used ",pickedUpItemWithName:"You picked up {{item}}",cannotInteract:"There is nothing to interact with",invalidItem:"Invalid item.",noItemInSlot:"No item in slot {{slot}}.",ironSword:"Iron Sword",battleAxe:"Battle Axe",hunterBow:"Hunter Bow",magicStaff:"Magic Staff",steelDagger:"Steel Dagger",ironHelmet:"Iron Helmet",steelChestplate:"Steel Chestplate",leatherLeggings:"Leather Leggings",combatBoots:"Combat Boots",towerShield:"Tower Shield",healthPotion:"Health Potion",energyBar:"Energy Bar",mysteryScroll:"Mystery Scroll",healingHerb:"Healing Herb",energyCore:"Energy Core",ironSwordDesc:"A standard iron sword",battleAxeDesc:"A powerful battle axe",hunterBowDesc:"A bow for hunting",magicStaffDesc:"A staff that amplifies magic",steelDaggerDesc:"A light and fast dagger",ironHelmetDesc:"Iron head protection",steelChestplateDesc:"Steel chest protection",leatherLeggingsDesc:"Leather leg protection",combatBootsDesc:"Combat boots",towerShieldDesc:"Large defensive shield",healthPotionDesc:"Restores 30 HP",energyBarDesc:"Restores 20 energy",tutorialHealthPotion:"Tutorial Potion",tutorialHealthPotionDesc:"Tutorial healing item (Restores 10 HP)",tutorialSword:"Tutorial Sword",tutorialSwordDesc:"Tutorial practice sword (Attack +3)",mysteryScrollDesc:"Random effect",healingHerbDesc:"Restores 15 HP",energyCoreDesc:"Restores 50 energy",weaponDescriptionFormat:"{{description}} (Damage: {{damage}})",armorDescriptionFormat:"{{description}} (Defense: {{defense}})",inventoryHeader:"=== INVENTORY ===",currentEquipmentHeader:"=== CURRENT EQUIPMENT ===",usageInstructionsHeader:"=== USAGE ===",itemUsageInstructions:"Press number keys (1-9) to use/equip items",itemUsageExample:"Example: Key 1 = Item [1]",effectLabel:"Effect",attackPowerEffect:"Attack +{{damage}}, Accuracy +{{accuracy}}%",defenseEffect:"Defense +{{defense}}",totalDefense:"Total Defense: {{total}}",rightHand:"Right Hand",head:"Head",chest:"Chest",legs:"Legs",feet:"Feet",leftHand:"Left Hand",noEquipment:"(No equipment)",pauseMenuTitle:"Pause Menu",continueGame:"Continue",saveGame:"Save",loadGame:"Load",languageSwitch:"Language",returnToTitle:"Return to Title",descendingToFloor:"Descending to floor {{floor}}...",cannotGoUp:"Cannot go up any further.",returningToFloor:"Returning to floor {{floor}}...",arrivedAtFloor:"Arrived at floor {{floor}}.",healthRestored:"HP+{{amount}} restored!",energyRestored:"Energy+{{amount}} restored!",itemCannotBeUsed:"{{item}} cannot be used.",weaponEquipped:"{{weapon}} equipped.",armorEquipped:"{{armor}} equipped.",cannotEquipWeapon:"Cannot equip weapon.",cannotEquipArmor:"Cannot equip armor.",noEnemyInThatDirection:"No enemy there.",movementMode:"Movement mode",stairsAppeared:"Stairs to next floor appeared! (Press F to move)",allFloorsCleared:"All floors cleared! Congratulations!",welcomeToFacility:"Welcome to Night City underground facility. Aim for escape.",tutorialStarted:"Tutorial started.",tutorialComplete:"🎉 Tutorial complete! Game start!",settingsUnderDevelopment:"Settings menu is under development.",mysteryScrollHealth:"HP recovery effect activated!",mysteryScrollEnergy:"Energy recovery effect activated!",mysteryScrollScore:"Score bonus +50!",mysteryScrollMap:"Map exploration effect activated!",tutorialWelcome:"Welcome to Terminal Descent! Use WASD keys to move.",tutorialMovement:"Well done! You can move freely with WASD. Try exploring a bit more.",tutorialCombat:"You can switch to attack mode with Space key. Try it!",tutorialInventory:"Press I key to open inventory and check items.",tutorialEquipment:"Use number keys (1-9) to use items. Try using an item!",tutorialCompleted:"Tutorial complete! You have learned all functions.",tutorialProgressMovement:"✓ Movement mastered!",tutorialProgressCombat:"✓ Next, let's learn the combat system.",tutorialProgressCombatComplete:"✓ Combat basics understood!",tutorialProgressInventory:"✓ Inventory usage learned!",tutorialProgressEquipment:"✓ Equipment system perfect!",attackPowerLabel:"Attack Power",defenseLabel:"Defense",experienceLabel:"Experience",closeInstruction:"Press number keys (1-9) to use items | Press I to close",statusHeader:"=== STATUS ===",statusCloseInstruction:"Press S to close",equipmentHeader:"=== EQUIPMENT ===",equipmentStatsHeader:"=== EQUIPMENT STATS ===",totalDefenseLabel:"Total Defense",welcomeTitle:"TERMINAL DESCENT",welcomeSubtitle:"Escape from Night City underground facility",menuInstructions:"↑↓ or WS: Select    Enter or F: Confirm",prologueLines:["The year is 2087. In an underground research facility","in Night City, you wake up.","","Security systems have gone haywire, and the facility is sealed.","To survive, you must escape to the surface.","","Gather equipment, avoid enemies, and escape from","10 underground levels.","","[Press Enter to start]"],menuOptions:["[Start] Begin game","[Tutorial] Learn controls","[Settings] Options"],emptyInventoryMessage:"Inventory is empty",weaponSlot:"Weapon",headSlot:"Head",chestSlot:"Chest",legsSlot:"Legs",feetSlot:"Feet",shieldSlot:"Shield",noItem:"None",gremlin:"Gremlin",goblin:"Goblin",orc:"Orc",troll:"Troll",takeoffHeader:"=== Remove Equipment ===",takeoffInstruction:"Select equipment to remove",takeoffControls:"↑↓ keys: Select | Enter: Remove | T key: Close",noEquipmentToRemove:"No equipment to remove.",weaponUnequipped:"{{weapon}} unequipped.",armorUnequipped:"{{armor}} unequipped."}};class q{currentLanguage="ja";setLanguage(e){this.currentLanguage=e}getCurrentLanguage(){return this.currentLanguage}getMessage(e){return k[this.currentLanguage][e]}getMessages(){return k[this.currentLanguage]}}const C=new q,o=l=>{const e=C.getMessage(l);return Array.isArray(e)?e.join(`
`):e},I=l=>{const e=C.getMessage(l);return Array.isArray(e)?e:[e]};function p(l){return l.nameKey?o(l.nameKey):l.name}function F(l){if(l.descriptionKey){const e=o(l.descriptionKey);return l.itemType==="weapon"&&l.descriptionParams?.damage!==void 0?o("weaponDescriptionFormat").replace("{{description}}",e).replace("{{damage}}",String(l.descriptionParams.damage)):l.itemType==="armor"&&l.descriptionParams?.defense!==void 0?o("armorDescriptionFormat").replace("{{description}}",e).replace("{{defense}}",String(l.descriptionParams.defense)):e}return l.description}function R(l){const e=l.equipment;return{weapon:e.mainHand?p(e.mainHand):o("noItem"),head:e.head?p(e.head):o("noItem"),chest:e.chest?p(e.chest):o("noItem"),legs:e.legs?p(e.legs):o("noItem"),feet:e.feet?p(e.feet):o("noItem"),shield:e.offHand?p(e.offHand):o("noItem")}}function K(l){let e=0;return["head","chest","legs","feet","offHand"].forEach(a=>{const s=l.equipment[a];s&&"defense"in s&&(e+=s.defense)}),e}function O(l){const t=l.equipment.mainHand;return 10+(t&&"damage"in t?t.damage:0)}function D(l){const e=K(l),t=O(l),a=Object.values(l.equipment).filter(s=>s!==void 0).length;return{totalDefense:e,attackPower:t,equipmentCount:a}}function L(l){return"key"in l}function N(l){if(typeof l=="string")return l;if(L(l)){let e=o(l.key);return l.params&&Object.entries(l.params).forEach(([t,a])=>{const s=`{{${t}}}`;e=e.replace(s,String(a))}),e}else return l.text}function m(l,e){const t={key:l,timestamp:Date.now()};return e&&(t.params=e),t}function P(l){return{text:l,timestamp:Date.now()}}function x(){return Math.random().toString(36).substring(2)+Date.now().toString(36)}function S(l,e){return l.x>=0&&l.x<e.width&&l.y>=0&&l.y<e.height}function _(l){switch(l){case"north":return{x:0,y:-1};case"south":return{x:0,y:1};case"east":return{x:1,y:0};case"west":return{x:-1,y:0}}}function $(l,e){return{x:l.x+e.x,y:l.y+e.y}}function v(l,e){return Math.floor(Math.random()*(e-l+1))+l}function M(l){return l[Math.floor(Math.random()*l.length)]}function w(l){const t={g:"gremlin",G:"goblin",o:"orc",T:"troll"}[l.char];return t?o(t):l.char}class U{player;constructor(e){this.player=this.createPlayer(e)}createPlayer(e){return{id:x(),position:{...e},char:"@",color:"#00ff00",type:"player",blocking:!0,visible:!0,level:1,experience:0,experienceToNext:100,health:100,maxHealth:100,energy:100,maxEnergy:100,accessLevel:1,inventory:[],equipment:{}}}getPlayer(){return{...this.player}}getPlayerDirect(){return this.player}getPosition(){return{...this.player.position}}setPosition(e){this.player.position={...e}}move(e){const t=_(e);return $(this.player.position,t)}confirmMove(e){this.player.position={...e}}takeDamage(e){this.player.health=Math.max(0,this.player.health-e)}heal(e){this.player.health=Math.min(this.player.maxHealth,this.player.health+e)}useEnergy(e){return this.player.energy>=e?(this.player.energy-=e,!0):!1}restoreEnergy(e){this.player.energy=Math.min(this.player.maxEnergy,this.player.energy+e)}isAlive(){return this.player.health>0}isDead(){return this.player.health<=0}addItem(e){if(e.stackable){const t=this.player.inventory.find(a=>a.name===e.name&&a.itemType===e.itemType);if(t)return t.quantity+=e.quantity,!0}return this.player.inventory.length<20?(this.player.inventory.push({...e}),!0):!1}removeItem(e,t=1){const a=this.player.inventory.findIndex(i=>i.id===e);if(a===-1)return null;const s=this.player.inventory[a];return s.quantity<=t?(this.player.inventory.splice(a,1),s):(s.quantity-=t,{...s,id:x(),quantity:t})}getInventory(){return[...this.player.inventory]}findItem(e){return this.player.inventory.find(a=>a.id===e)||null}hasItem(e){return this.player.inventory.some(t=>t.id===e)}calculateExperienceToNext(e){return Math.floor(100*Math.pow(1.5,e-1))}addExperience(e){this.player.experience+=e;let t=!1;for(;this.player.experience>=this.player.experienceToNext;)this.player.experience-=this.player.experienceToNext,this.levelUp(),t=!0;return t}levelUp(){this.player.level++,this.player.experienceToNext=this.calculateExperienceToNext(this.player.level),this.player.maxHealth+=10,this.player.maxEnergy+=5,this.player.health=this.player.maxHealth,this.player.energy=this.player.maxEnergy}increaseAccessLevel(){this.player.accessLevel++}getStats(){return{level:this.player.level,experience:this.player.experience,experienceToNext:this.player.experienceToNext,experienceProgress:Math.floor(this.player.experience/this.player.experienceToNext*100),health:this.player.health,maxHealth:this.player.maxHealth,energy:this.player.energy,maxEnergy:this.player.maxEnergy,accessLevel:this.player.accessLevel,inventoryCount:this.player.inventory.length}}serialize(){return JSON.stringify(this.player)}deserialize(e){try{const t=JSON.parse(e);if(typeof t.level=="number"&&typeof t.health=="number"&&typeof t.maxHealth=="number"&&typeof t.position=="object"&&typeof t.position.x=="number"&&typeof t.position.y=="number")this.player={...t};else throw new Error("Invalid player data format")}catch(t){console.error("Failed to deserialize player data:",t),this.player=this.createPlayer({x:0,y:0})}}reset(e){this.player=this.createPlayer(e)}equipWeapon(e){return this.player.equipment.mainHand&&this.addItem(this.player.equipment.mainHand),this.player.equipment.mainHand=e,!0}unequipWeapon(){const e=this.player.equipment.mainHand;return e?(delete this.player.equipment.mainHand,e):null}getEquippedWeapon(){return this.player.equipment.mainHand||null}equipArmor(e){const t=e.slot;if(t==="mainHand"||t==="accessory")return!1;const a=this.player.equipment[t];return a&&this.addItem(a),this.player.equipment[t]=e,!0}unequipArmor(e){if(e==="mainHand"||e==="accessory")return null;const t=this.player.equipment[e];return t?(delete this.player.equipment[e],t):null}getEquippedArmor(e){return e==="mainHand"||e==="accessory"?null:this.player.equipment[e]||null}getTotalDefense(){let e=0;const t=["offHand","head","chest","legs","feet"];for(const a of t){const s=this.getEquippedArmor(a);s&&(e+=s.defense)}return e}getAttackDamage(){const e=this.player.equipment.mainHand,t=10;return e?t+e.damage:t}getAttackAccuracy(){const e=this.player.equipment.mainHand,t=80;return e?Math.min(95,t+e.accuracy):t}getCriticalChance(){const e=this.player.equipment.mainHand,t=5;return e?Math.min(50,t+e.criticalChance):t}rollAttackHit(){const e=this.getAttackAccuracy();return Math.random()*100<e}rollCriticalHit(){const e=this.getCriticalChance();return Math.random()*100<e}rollDamage(){const e=this.getAttackDamage(),t=this.rollCriticalHit();return{damage:t?Math.floor(e*1.5):e,isCritical:t}}}class b{dimensions;level;constructor(e,t=1){this.dimensions=e,this.level=t}generate(e){const t=this.createEmptyTiles(),a=this.generateRooms();if(a.forEach(i=>this.carveRoom(t,i)),this.connectRooms(t,a),a.length>0){const i=a[0];e.position={x:i.position.x+Math.floor(i.dimensions.width/2),y:i.position.y+Math.floor(i.dimensions.height/2)},console.log(`Player placed at (${e.position.x},${e.position.y}) in room at (${i.position.x},${i.position.y})`),console.log(`Generated ${a.length} rooms`)}else console.error("No rooms generated! Player will be stuck in walls.");const s=this.generateEntities(a,e.position);return s.push(e),{level:this.level,dimensions:this.dimensions,tiles:t,rooms:a,entities:s,player:e}}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let a=0;a<this.dimensions.width;a++)e[t][a]=this.createWallTile({x:a,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}generateRooms(){const e=[];for(let r=0;r<50&&e.length<8;r++){const n=v(4,10),c=v(4,10),h=v(1,this.dimensions.width-n-1),g=v(1,this.dimensions.height-c-1),u={position:{x:h,y:g},dimensions:{width:n,height:c},tiles:[],connected:!1};e.some(y=>this.roomsOverlap(u,y))||e.push(u)}return e}roomsOverlap(e,t){return!(e.position.x+e.dimensions.width+1<t.position.x||t.position.x+t.dimensions.width+1<e.position.x||e.position.y+e.dimensions.height+1<t.position.y||t.position.y+t.dimensions.height+1<e.position.y)}carveRoom(e,t){for(let a=t.position.y;a<t.position.y+t.dimensions.height;a++)for(let s=t.position.x;s<t.position.x+t.dimensions.width;s++)S({x:s,y:a},this.dimensions)&&(e[a][s]=this.createFloorTile({x:s,y:a}))}connectRooms(e,t){if(t.length<2)return;for(let s=0;s<t.length-1;s++){const i=t[s],r=t[s+1];this.createCorridor(e,i,r),i.connected=!0,r.connected=!0}const a=Math.floor(t.length/3);for(let s=0;s<a;s++){const i=M(t),r=M(t);i!==r&&this.createCorridor(e,i,r)}}createCorridor(e,t,a){const s={x:t.position.x+Math.floor(t.dimensions.width/2),y:t.position.y+Math.floor(t.dimensions.height/2)},i={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};v(0,1)===0?(this.carveHorizontalCorridor(e,s.x,i.x,s.y),this.carveVerticalCorridor(e,i.x,s.y,i.y)):(this.carveVerticalCorridor(e,s.x,s.y,i.y),this.carveHorizontalCorridor(e,s.x,i.x,i.y))}carveHorizontalCorridor(e,t,a,s){const i=Math.min(t,a),r=Math.max(t,a);for(let n=i;n<=r;n++)S({x:n,y:s},this.dimensions)&&(e[s][n]=this.createFloorTile({x:n,y:s}))}carveVerticalCorridor(e,t,a,s){const i=Math.min(a,s),r=Math.max(a,s);for(let n=i;n<=r;n++)S({x:t,y:n},this.dimensions)&&(e[n][t]=this.createFloorTile({x:t,y:n}))}generateEntities(e,t){const a=[],s=e.slice(1);s.forEach(h=>{const g=Math.min(.3+this.level*.05,.7);if(Math.random()<g){const d=this.createEnemy(h);a.push(d)}const u=Math.min(.2+this.level*.02,.4);if(Math.random()<u){const d=this.createItem(h);a.push(d)}});const i=a.filter(h=>h.type==="enemy").length,r=Math.max(1,Math.floor(s.length/3));if(i<r){const h=s.filter(u=>!a.some(d=>d.type==="enemy"&&d.position.x>=u.position.x&&d.position.x<u.position.x+u.dimensions.width&&d.position.y>=u.position.y&&d.position.y<u.position.y+u.dimensions.height)),g=r-i;for(let u=0;u<g&&u<h.length;u++){const d=h[u],y=this.createEnemy(d);a.push(y)}}const n=a.filter(h=>h.type==="item").length,c=Math.max(1,Math.floor(s.length/4));if(n<c){const h=s.filter(u=>!a.some(d=>d.type==="item"&&d.position.x>=u.position.x&&d.position.x<u.position.x+u.dimensions.width&&d.position.y>=u.position.y&&d.position.y<u.position.y+u.dimensions.height)),g=c-n;for(let u=0;u<g&&u<h.length;u++){const d=h[u],y=this.createItem(d);a.push(y)}}return a}createEnemy(e){const t=v(e.position.x+1,e.position.x+e.dimensions.width-2),a=v(e.position.y+1,e.position.y+e.dimensions.height-2),s=20,i=5,r=Math.floor(this.level*1.5),n=Math.floor(this.level*.8),c=s+r,h=i+n,g=this.getEnemyTypes(),u=M(g);return{id:`enemy_${Date.now()}_${Math.random()}`,position:{x:t,y:a},char:u.char,color:u.color,type:"enemy",blocking:!0,visible:!0,health:c,maxHealth:c,damage:h,aiType:"aggressive"}}getEnemyTypes(){const e=[{char:"G",color:"#ff4444",name:"Gremlin"},{char:"R",color:"#8b4513",name:"Rat"},{char:"S",color:"#32cd32",name:"Slime"}],t=[{char:"O",color:"#ff6600",name:"Orc"},{char:"T",color:"#daa520",name:"Troll"},{char:"W",color:"#483d8b",name:"Wraith"}],a=[{char:"D",color:"#dc143c",name:"Dragon"},{char:"L",color:"#8b008b",name:"Lich"},{char:"M",color:"#ff1493",name:"Minotaur"}];return this.level<=3?e:this.level<=6?[...e,...t]:[...e,...t,...a]}createItem(e){const t=v(e.position.x+1,e.position.x+e.dimensions.width-2),a=v(e.position.y+1,e.position.y+e.dimensions.height-2),s=Math.random();return s<.25?this.createWeapon(t,a):s<.45?this.createArmor(t,a):this.createConsumable(t,a)}createWeapon(e,t){const a=[{char:")",color:"#cccccc",nameKey:"ironSword",descKey:"ironSwordDesc",weaponType:"sword",damage:8+Math.floor(this.level*1.2),accuracy:10,criticalChance:5,range:1},{char:"/",color:"#8b4513",nameKey:"battleAxe",descKey:"battleAxeDesc",weaponType:"axe",damage:12+Math.floor(this.level*1.5),accuracy:5,criticalChance:8,range:1},{char:"}",color:"#654321",nameKey:"hunterBow",descKey:"hunterBowDesc",weaponType:"bow",damage:6+Math.floor(this.level*1),accuracy:15,criticalChance:10,range:3},{char:"\\",color:"#4b0082",nameKey:"magicStaff",descKey:"magicStaffDesc",weaponType:"staff",damage:5+Math.floor(this.level*.8),accuracy:12,criticalChance:3,range:2},{char:"-",color:"#a9a9a9",nameKey:"steelDagger",descKey:"steelDaggerDesc",weaponType:"dagger",damage:4+Math.floor(this.level*.7),accuracy:20,criticalChance:15,range:1}],s=M(a);let i;return this.level>=3&&Math.random()<.3&&(i={type:M(["fire","ice","poison","stun","vampire"]),chance:15+Math.floor(this.level*2),value:Math.floor(this.level*1.5)}),{id:x(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:o(s.nameKey),nameKey:s.nameKey,description:`${o(s.descKey)} (攻撃力: ${s.damage})`,descriptionKey:s.descKey,descriptionParams:{damage:s.damage},stackable:!1,quantity:1,itemType:"weapon",weaponType:s.weaponType,damage:s.damage,accuracy:s.accuracy,criticalChance:s.criticalChance,range:s.range,...i&&{special:i}}}createArmor(e,t){const a=[{char:"[",color:"#8b4513",nameKey:"ironHelmet",descKey:"ironHelmetDesc",armorType:"helmet",slot:"head",defense:3+Math.floor(this.level*.8)},{char:"]",color:"#c0c0c0",nameKey:"steelChestplate",descKey:"steelChestplateDesc",armorType:"chestplate",slot:"chest",defense:5+Math.floor(this.level*1.2)},{char:"{",color:"#a0522d",nameKey:"leatherLeggings",descKey:"leatherLeggingsDesc",armorType:"leggings",slot:"legs",defense:4+Math.floor(this.level*1)},{char:"(",color:"#654321",nameKey:"combatBoots",descKey:"combatBootsDesc",armorType:"boots",slot:"feet",defense:2+Math.floor(this.level*.6)},{char:"&",color:"#8b7355",nameKey:"towerShield",descKey:"towerShieldDesc",armorType:"shield",slot:"offHand",defense:6+Math.floor(this.level*1.5)}],s=M(a),i=50+Math.floor(this.level*10);return{id:x(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:o(s.nameKey),nameKey:s.nameKey,description:`${o(s.descKey)} (防御力: ${s.defense})`,descriptionKey:s.descKey,descriptionParams:{defense:s.defense},stackable:!1,quantity:1,itemType:"armor",armorType:s.armorType,defense:s.defense,durability:i,maxDurability:i,slot:s.slot}}createConsumable(e,t){const s=M([{char:"!",color:"#ffff00",nameKey:"healthPotion",descKey:"healthPotionDesc"},{char:"%",color:"#ff8800",nameKey:"energyBar",descKey:"energyBarDesc"},{char:"?",color:"#8800ff",nameKey:"mysteryScroll",descKey:"mysteryScrollDesc"},{char:"+",color:"#00ffff",nameKey:"healingHerb",descKey:"healingHerbDesc"},{char:"*",color:"#ff00ff",nameKey:"energyCore",descKey:"energyCoreDesc"}]);return{id:x(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:o(s.nameKey),nameKey:s.nameKey,description:o(s.descKey),descriptionKey:s.descKey,stackable:!0,quantity:1,itemType:"consumable"}}static updateFieldOfView(e,t,a=8){for(let s=0;s<e.dimensions.height;s++)for(let i=0;i<e.dimensions.width;i++)e.tiles[s][i].visible=!1;for(let s=-a;s<=a;s++)for(let i=-a;i<=a;i++){const r=t.x+i,n=t.y+s;if(S({x:r,y:n},e.dimensions)&&Math.sqrt(i*i+s*s)<=a){const h=e.tiles[n][r];h.visible=!0,h.explored=!0}}}}class G{dimensions;constructor(){this.dimensions={width:30,height:20}}generate(e){const t=this.createEmptyTiles(),a=this.createFixedRooms();a.forEach(i=>this.carveRoom(t,i)),this.connectRooms(t,a),e.position={x:3,y:3};const s=this.generateTutorialEntities(a,e.position);return s.push(e),{level:0,dimensions:this.dimensions,tiles:t,rooms:a,entities:s,player:e}}createFixedRooms(){return[{position:{x:1,y:1},dimensions:{width:6,height:6},tiles:[],connected:!1},{position:{x:10,y:1},dimensions:{width:8,height:6},tiles:[],connected:!1},{position:{x:21,y:1},dimensions:{width:7,height:6},tiles:[],connected:!1},{position:{x:1,y:10},dimensions:{width:8,height:8},tiles:[],connected:!1},{position:{x:20,y:10},dimensions:{width:8,height:8},tiles:[],connected:!1}]}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let a=0;a<this.dimensions.width;a++)e[t][a]=this.createWallTile({x:a,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}carveRoom(e,t){for(let a=t.position.y;a<t.position.y+t.dimensions.height;a++)for(let s=t.position.x;s<t.position.x+t.dimensions.width;s++)S({x:s,y:a},this.dimensions)&&(e[a][s]=this.createFloorTile({x:s,y:a}))}connectRooms(e,t){t.length<2||(this.createHorizontalCorridor(e,7,10,3),this.createHorizontalCorridor(e,18,21,3),this.createVerticalCorridor(e,3,7,10),this.createHorizontalCorridor(e,9,20,14),this.createVerticalCorridor(e,24,7,10),this.createHorizontalCorridor(e,20,24,14),t.forEach(a=>a.connected=!0))}createHorizontalCorridor(e,t,a,s){const i=Math.min(t,a),r=Math.max(t,a);for(let n=i;n<=r;n++)S({x:n,y:s},this.dimensions)&&(e[s][n]=this.createFloorTile({x:n,y:s}))}createVerticalCorridor(e,t,a,s){const i=Math.min(a,s),r=Math.max(a,s);for(let n=i;n<=r;n++)S({x:t,y:n},this.dimensions)&&(e[n][t]=this.createFloorTile({x:t,y:n}))}generateTutorialEntities(e,t){const a=[],s=e[1];a.push(this.createTutorialItem(s.position.x+3,s.position.y+3));const i=e[2];a.push(this.createTutorialEnemy(i.position.x+3,i.position.y+3));const r=e[3];return a.push(this.createTutorialWeapon(r.position.x+3,r.position.y+3)),a}createTutorialItem(e,t){return{id:x(),position:{x:e,y:t},char:"!",color:"#ffff00",type:"item",blocking:!1,visible:!0,name:o("tutorialHealthPotion"),description:o("tutorialHealthPotionDesc"),stackable:!0,quantity:1,itemType:"consumable"}}createTutorialEnemy(e,t){return{id:x(),position:{x:e,y:t},char:"T",color:"#ff4444",type:"enemy",blocking:!0,visible:!0,health:10,maxHealth:10,damage:2,aiType:"passive"}}createTutorialWeapon(e,t){return{id:x(),position:{x:e,y:t},char:")",color:"#cccccc",type:"item",blocking:!1,visible:!0,name:o("tutorialSword"),description:o("tutorialSwordDesc"),stackable:!1,quantity:1,itemType:"weapon",weaponType:"sword",damage:5,accuracy:10,criticalChance:5,range:1}}}class W{data;generator;tutorialGenerator;constructor(){this.data={floors:new Map,currentFloor:1,maxFloor:1},this.generator=new b({width:80,height:50},1),this.tutorialGenerator=new G}getDungeonData(){return{floors:new Map(this.data.floors),currentFloor:this.data.currentFloor,maxFloor:this.data.maxFloor}}getCurrentDungeon(){return this.data.floors.get(this.data.currentFloor)}generateTutorialDungeon(e){const t=this.tutorialGenerator.generate(e);return this.data.floors.set(0,t),this.data.currentFloor=0,t}generateInitialFloor(e){this.generator=new b({width:80,height:50},1);const t=this.generator.generate(e);if(t.rooms.length>0){const a=t.rooms[t.rooms.length-1];t.stairsDown={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};const s=t.stairsDown;t.tiles[s.y]&&t.tiles[s.y][s.x]&&(t.tiles[s.y][s.x]={position:{...s},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}return this.data.floors.set(1,t),this.data.currentFloor=1,this.data.maxFloor=1,t}moveToFloor(e,t){if(!this.data.floors.has(e)){this.generator=new b({width:80,height:50},e);const i=this.generator.generate(t);if(e>1&&i.rooms.length>0){const r=i.rooms[0];i.stairsUp={x:r.position.x+Math.floor(r.dimensions.width/2),y:r.position.y+Math.floor(r.dimensions.height/2)};const n=i.stairsUp;i.tiles[n.y]&&i.tiles[n.y][n.x]&&(i.tiles[n.y][n.x]={position:{...n},type:"stairs",char:"<",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}if(e<10&&i.rooms.length>0){const r=i.rooms[i.rooms.length-1];i.stairsDown={x:r.position.x+Math.floor(r.dimensions.width/2),y:r.position.y+Math.floor(r.dimensions.height/2)};const n=i.stairsDown;i.tiles[n.y]&&i.tiles[n.y][n.x]&&(i.tiles[n.y][n.x]={position:{...n},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}this.data.floors.set(e,i),e>this.data.maxFloor&&(this.data.maxFloor=e)}const a=this.data.floors.get(e),s=this.data.currentFloor;if(this.data.currentFloor=e,e>s&&a.stairsUp?t.position={...a.stairsUp}:e<s&&a.stairsDown&&(t.position={...a.stairsDown}),t.position){const i=a.tiles[t.position.y]?.[t.position.x];(!i||i.blocking)&&(t.position=this.findNearestValidPosition(a,t.position))}return a}findNearestValidPosition(e,t){for(let a=1;a<=5;a++)for(let s=-a;s<=a;s++)for(let i=-a;i<=a;i++){if(Math.abs(s)!==a&&Math.abs(i)!==a)continue;const r={x:t.x+s,y:t.y+i};if(r.x<0||r.x>=e.dimensions.width||r.y<0||r.y>=e.dimensions.height)continue;const n=e.tiles[r.y]?.[r.x];if(n&&!n.blocking)return r}return t}hasStairsAt(e){const t=this.getCurrentDungeon();return t?t.stairsUp&&t.stairsUp.x===e.x&&t.stairsUp.y===e.y?"up":t.stairsDown&&t.stairsDown.x===e.x&&t.stairsDown.y===e.y?"down":null:null}getCurrentFloor(){return this.data.currentFloor}getMaxFloor(){return this.data.maxFloor}saveDungeonState(e){this.data.floors.set(this.data.currentFloor,{...e})}}class f{constructor(e,t,a,s,i,r,n,c){this.gameState=e,this.playerController=t,this.addMessage=a,this.processTurn=s,this.updateTutorialProgress=i,this.equipItem=r,this.getCurrentEquipmentDisplay=n,this.addMessages=c}static ITEM_EFFECTS={HEALTH_POTION:30,HEALING_HERB:15,ENERGY_BAR:20,ENERGY_CORE:50,MYSTERY_SCROLL_HEALTH:20,MYSTERY_SCROLL_ENERGY:30,MYSTERY_SCROLL_SCORE:50};showInventory(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.playerController.getPlayer().inventory,t=[];t.push(o("inventoryHeader")),e.length===0?t.push(o("inventoryEmpty")):e.forEach((a,s)=>{const i=p(a),r=F(a);if(t.push(`[${s+1}] ${a.char} ${i} x${a.quantity}`),t.push(`     ${r}`),a.itemType==="weapon"){const n=a,c=o("attackPowerEffect").replace("{{damage}}",String(n.damage)).replace("{{accuracy}}",String(n.accuracy));t.push(`      ${o("effectLabel")}: ${c}`)}else if(a.itemType==="armor"){const n=a,c=o("defenseEffect").replace("{{defense}}",String(n.defense));t.push(`      ${o("effectLabel")}: ${c}`)}}),this.getCurrentEquipmentDisplay&&(t.push(""),t.push(o("currentEquipmentHeader")),this.getCurrentEquipmentDisplay().forEach(s=>{t.push(s)})),t.push(""),t.push(o("usageInstructionsHeader")),t.push(o("itemUsageInstructions")),t.push(o("itemUsageExample")),this.addMessages?this.addMessages(t):t.forEach(a=>this.addMessage(a)),this.gameState.status==="tutorial"&&this.updateTutorialProgress("inventory")}useItem(e){this.useItemInternal(e,!0)}useItemInternal(e,t){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const a=this.playerController.getPlayer().inventory;if(e<0||e>=a.length){this.addMessage(m("noItemInSlot",{slot:(e+1).toString()}));return}const s=a[e];this.applyItemEffect(s)&&(this.playerController.removeItem(s.id,1),t&&this.processTurn())}applyItemEffect(e){if(!e)return this.addMessage(m("invalidItem")),!1;if(!e.char)return this.addMessage(m("itemCannotBeUsed",{item:p(e)})),!1;if(e.itemType==="weapon"||e.itemType==="armor")if(this.equipItem){const t=this.equipItem(e);return t&&this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment"),t}else return this.addMessage(m("itemCannotBeUsed",{item:p(e)})),!1;switch(e.char){case"!":return this.playerController.heal(f.ITEM_EFFECTS.HEALTH_POTION),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${p(e)}${o("useItem")} ${o("healthRestored").replace("{{amount}}",f.ITEM_EFFECTS.HEALTH_POTION.toString())}`),this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment"),!0;case"+":return this.playerController.heal(f.ITEM_EFFECTS.HEALING_HERB),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${p(e)}${o("useItem")} ${o("healthRestored").replace("{{amount}}",f.ITEM_EFFECTS.HEALING_HERB.toString())}`),!0;case"%":return this.playerController.restoreEnergy(f.ITEM_EFFECTS.ENERGY_BAR),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${p(e)}${o("useItem")} ${o("energyRestored").replace("{{amount}}",f.ITEM_EFFECTS.ENERGY_BAR.toString())}`),!0;case"*":return this.playerController.restoreEnergy(f.ITEM_EFFECTS.ENERGY_CORE),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${p(e)}${o("useItem")} ${o("energyRestored").replace("{{amount}}",f.ITEM_EFFECTS.ENERGY_CORE.toString())}`),!0;case"?":const t=[()=>(this.playerController.heal(f.ITEM_EFFECTS.MYSTERY_SCROLL_HEALTH),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,o("mysteryScrollHealth")),()=>(this.playerController.restoreEnergy(f.ITEM_EFFECTS.MYSTERY_SCROLL_ENERGY),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,o("mysteryScrollEnergy")),()=>(this.gameState.score+=f.ITEM_EFFECTS.MYSTERY_SCROLL_SCORE,o("mysteryScrollScore")),()=>{const i=this.gameState.currentDungeon;for(let r=0;r<i.dimensions.height;r++)for(let n=0;n<i.dimensions.width;n++)Math.random()<.3&&(i.tiles[r][n].explored=!0);return o("mysteryScrollMap")}],a=t[Math.floor(Math.random()*t.length)],s=a();return this.addMessage(`${p(e)}${o("useItem")} ${s}`),!0;default:return this.addMessage(m("itemCannotBeUsed",{item:p(e)})),!1}}addMessagesIndividually(e){e.forEach(t=>this.addMessage(t))}}class V{constructor(e,t,a,s,i){this.gameState=e,this.playerController=t,this.useItemCallback=a,this.removeEquipmentCallback=s,this.addMessage=i}toggleInventoryOverlay(){this.gameState.status==="playing"&&(this.gameState.overlay.type==="inventory"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showInventoryOverlay())}toggleStatusOverlay(){this.gameState.status==="playing"&&(this.gameState.overlay.type==="character"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showStatusOverlay())}toggleTakeoffOverlay(){this.gameState.status==="playing"&&(this.gameState.overlay.type==="takeoff"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showTakeoffOverlay())}showInventoryOverlay(){this.gameState.overlay={type:"inventory",isVisible:!0,selectedIndex:0}}showStatusOverlay(){this.gameState.overlay={type:"character",isVisible:!0,selectedIndex:0}}showTakeoffOverlay(){const e=this.playerController.getPlayer(),t=[];if(e.equipment.mainHand&&t.push(e.equipment.mainHand),e.equipment.head&&t.push(e.equipment.head),t.length===0){this.addMessage("外せる装備がありません。");return}this.gameState.overlay={type:"takeoff",isVisible:!0,selectedIndex:0}}hideOverlay(){this.gameState.overlay={type:"none",isVisible:!1,selectedIndex:0}}handleNavigation(e){if(this.gameState.overlay.isVisible)switch(this.gameState.overlay.type){case"inventory":this.handleInventoryNavigation(e);break;case"character":break;case"takeoff":this.handleTakeoffNavigation(e);break}}handleInventoryNavigation(e){const t=this.playerController.getPlayer().inventory;if(t.length===0)return;const a=this.gameState.overlay.selectedIndex??0;let s=a;switch(e){case"north":s=Math.max(0,a-1);break;case"south":s=Math.min(t.length-1,a+1);break}this.gameState.overlay.selectedIndex=s}handleTakeoffNavigation(e){const t=this.playerController.getPlayer(),a=(t.equipment.mainHand?1:0)+(t.equipment.head?1:0);if(a===0)return;const s=this.gameState.overlay.selectedIndex||0;let i=s;switch(e){case"north":i=Math.max(0,s-1);break;case"south":i=Math.min(a-1,s+1);break}this.gameState.overlay.selectedIndex=i}handleInteraction(){if(this.gameState.overlay.isVisible)switch(this.gameState.overlay.type){case"inventory":this.handleInventoryInteraction();break;case"character":break;case"takeoff":this.handleTakeoffInteraction();break}}handleInventoryInteraction(){const e=this.playerController.getPlayer().inventory,t=this.gameState.overlay.selectedIndex??0;t<e.length&&(this.useItemCallback(t),this.hideOverlay())}handleTakeoffInteraction(){const e=this.playerController.getPlayer(),t=this.gameState.overlay.selectedIndex??0,a=[];if(e.equipment.mainHand&&a.push({slot:"weapon",item:e.equipment.mainHand}),e.equipment.head&&a.push({slot:"armor",item:e.equipment.head}),t<a.length){const s=a[t];this.removeEquipmentCallback(s.slot),this.hideOverlay()}}useItemFromOverlay(e){const t=this.playerController.getPlayer().inventory;e>=t.length||(this.useItemCallback(e),e>=t.length-1&&(this.gameState.overlay.selectedIndex=Math.max(0,t.length-2)))}handlePauseOrClose(){return this.gameState.overlay.isVisible?(console.log("Closing overlay:",this.gameState.overlay),this.hideOverlay(),console.log("Overlay closed, returning early"),!0):!1}getOverlayState(){return this.gameState.overlay}isVisible(){return this.gameState.overlay.isVisible}isType(e){return this.gameState.overlay.type===e&&this.gameState.overlay.isVisible}}class Y{constructor(e,t){this.gameState=e,this.addMessage=t}startTutorial(){this.gameState.status="tutorial",this.gameState.tutorial.isActive=!0,this.gameState.tutorial.currentStep="welcome",this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.showHint=!0,this.gameState.tutorial.hintText=o("tutorialWelcome"),this.addMessage(o("tutorialStarted"))}updateProgress(e){const t=this.gameState.tutorial;if(e)switch(t.currentStep){case"welcome":e==="movement"&&this.advanceStep("movement");break;case"movement":e==="movement"&&(t.stepProgress++,t.stepProgress>=3&&this.advanceStep("combat"));break;case"combat":e==="combat"&&this.advanceStep("inventory");break;case"inventory":e==="inventory"&&this.advanceStep("equipment");break;case"equipment":e==="equipment"&&this.advanceStep("complete");break}t.currentStep==="complete"&&this.completeTutorial()}advanceStep(e){this.gameState.tutorial.currentStep=e,this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.hintText=this.getHintText(e),this.addMessage(this.getStepMessage(e)),e==="complete"&&this.completeTutorial()}getHintText(e){switch(e){case"welcome":return o("tutorialWelcome");case"movement":return o("tutorialMovement");case"combat":return o("tutorialCombat");case"inventory":return o("tutorialInventory");case"equipment":return o("tutorialEquipment");case"complete":return o("tutorialCompleted");default:return""}}getStepMessage(e){switch(e){case"movement":return o("tutorialProgressMovement");case"combat":return o("tutorialProgressCombat");case"inventory":return o("tutorialProgressCombatComplete");case"equipment":return o("tutorialProgressInventory");case"complete":return o("tutorialProgressEquipment");default:return""}}completeTutorial(){this.gameState.tutorial.isActive=!1,this.gameState.tutorial.showHint=!1,this.gameState.status="welcome",this.addMessage(m("tutorialComplete"))}skipTutorial(){this.completeTutorial()}toggleHint(){this.gameState.tutorial.showHint=!this.gameState.tutorial.showHint}getTutorialState(){return this.gameState.tutorial}isActive(){return this.gameState.tutorial.isActive}getCurrentStep(){return this.gameState.tutorial.currentStep}shouldRestrictAction(e){return this.isActive(),!1}getContextualHint(){return this.isActive()?this.gameState.tutorial.hintText:null}}class B{steps;currentStepIndex=0;itemUsedFlag=!1;combatCompletedFlag=!1;statusViewedFlag=!1;constructor(){this.steps=this.initializeSteps()}initializeSteps(){return[{id:"step_movement",title:"移動の練習",description:"WASDキーで移動してみてください。緑色の目標地点まで移動してください。",targetAction:"move",completionCondition:e=>e.player.position.x===5&&e.player.position.y===5,isCompleted:!1,nextStepId:"step_item_pickup",targetPosition:{x:5,y:5},blockedActions:["attack","inventory","character_status"]},{id:"step_item_pickup",title:"アイテムの取得",description:"Fキーでアイテムを取得してみてください。",targetAction:"pickup_item",completionCondition:e=>e.player.inventory.length>0,isCompleted:!1,nextStepId:"step_inventory",requiredItems:["health_potion"],blockedActions:["attack","character_status"]},{id:"step_inventory",title:"インベントリの確認",description:"Iキーでインベントリを開いてみてください。",targetAction:"inventory",completionCondition:e=>e.overlay.type==="inventory"&&e.overlay.isVisible,isCompleted:!1,nextStepId:"step_item_use",blockedActions:["attack","character_status"]},{id:"step_item_use",title:"アイテムの使用",description:"数字キーでアイテムを使用してみてください。",targetAction:"use_item",completionCondition:e=>this.itemUsedFlag,isCompleted:!1,nextStepId:"step_combat",blockedActions:["attack","character_status"]},{id:"step_combat",title:"戦闘の基本",description:"Spaceキーで攻撃モードに入り、WASDで攻撃してみてください。",targetAction:"combat",completionCondition:e=>this.combatCompletedFlag,isCompleted:!1,nextStepId:"step_character_status",blockedActions:["inventory"]},{id:"step_character_status",title:"ステータスの確認",description:"Cキーでステータス画面を確認してみてください。",targetAction:"character_status",completionCondition:e=>this.statusViewedFlag,isCompleted:!1,blockedActions:[]}]}getCurrentStep(){return this.currentStepIndex>=this.steps.length?null:this.steps[this.currentStepIndex]}isStepCompleted(e){const t=this.steps.find(a=>a.id===e);return t?t.isCompleted:!1}completeCurrentStep(){const e=this.getCurrentStep();e&&(e.isCompleted=!0)}moveToNextStep(){this.currentStepIndex<this.steps.length&&this.currentStepIndex++}checkStepCompletion(e){const t=this.getCurrentStep();return t?t.completionCondition(e):!1}isActionAllowed(e){const t=this.getCurrentStep();return t?!t.blockedActions?.includes(e):!0}getCurrentStepInfo(){const e=this.getCurrentStep();return e?{title:e.title,description:e.description,isCompleted:e.isCompleted,targetPosition:e.targetPosition||void 0}:{title:"チュートリアル完了",description:"すべてのチュートリアルが完了しました！",isCompleted:!0}}getProgress(){const e=this.currentStepIndex+1,t=this.steps.length,a=Math.round(e/t*100);return{currentStep:e,totalSteps:t,percentage:a}}isAllStepsCompleted(){return this.currentStepIndex>=this.steps.length}updateTutorial(e){this.isAllStepsCompleted()||this.checkStepCompletion(e)&&(this.completeCurrentStep(),this.moveToNextStep())}markItemUsed(){this.itemUsedFlag=!0}markCombatCompleted(){this.combatCompletedFlag=!0}markStatusViewed(){this.statusViewedFlag=!0}reset(){this.currentStepIndex=0,this.itemUsedFlag=!1,this.combatCompletedFlag=!1,this.statusViewedFlag=!1,this.steps.forEach(e=>{e.isCompleted=!1})}}class z{constructor(e,t,a,s){this.gameState=e,this.addMessage=t,this.startGameCallback=a,this.startTutorialCallback=s}showMenu(){this.addMessage(o("menuNotImplemented"))}handleLanguageSwitch(){const t=C.getCurrentLanguage()==="ja"?"en":"ja";C.setLanguage(t),this.updateUITexts(),this.addMessage(o("languageSwitched"))}updateUITexts(){}showSettings(){this.addMessage(o("settingsUnderDevelopment"))}showPrologue(){this.gameState.welcome.showPrologue=!0}skipPrologue(){this.gameState.welcome.showPrologue=!1,this.gameState.welcome.selectedOption||(this.gameState.welcome.selectedOption="start")}handleWelcomeInteract(){if(this.gameState.status!=="welcome")return;if(this.gameState.welcome.showPrologue){this.skipPrologue();return}const e=this.gameState.welcome.selectedOption;if(e)switch(e){case"start":this.startGameCallback();break;case"tutorial":this.startTutorialCallback();break;case"settings":this.showSettings();break}}navigateWelcomeMenu(e){if(this.gameState.status!=="welcome"||this.gameState.welcome.showPrologue)return;const t=["start","tutorial","settings"],a=t.indexOf(this.gameState.welcome.selectedOption||"start");let s=a;e==="up"?s=Math.max(0,a-1):s=Math.min(t.length-1,a+1),this.gameState.welcome.selectedOption=t[s]}getCurrentLanguage(){return C.getCurrentLanguage()}setLanguage(e){C.setLanguage(e),this.updateUITexts()}showGameOver(e){this.addMessage(m("gameOver")),this.addMessage(m("finalScore",{score:e.toString()}))}showVictory(e){this.addMessage(m("victory")),this.addMessage(m("finalScore",{score:e.toString()}))}isUIElementVisible(e){switch(e){case"prologue":return this.gameState.welcome.showPrologue;case"menu":return this.gameState.status==="menu";case"settings":return!1;default:return!1}}}class j{keyMapping;pressedKeys;actionCallbacks;element;keyRepeatTimer;REPEAT_DELAY=300;REPEAT_RATE=100;constructor(e){this.element=e,this.pressedKeys=new Set,this.actionCallbacks=new Map,this.keyRepeatTimer=new Map,this.keyMapping={KeyW:"move_north",ArrowUp:"move_north",KeyS:"move_south",ArrowDown:"move_south",KeyA:"move_west",ArrowLeft:"move_west",KeyD:"move_east",ArrowRight:"move_east",KeyF:"interact",Enter:"interact",Space:"attack",KeyX:"attack",KeyI:"inventory",KeyE:"equipment",KeyC:"character",Comma:"pickup",KeyG:"pickup",KeyQ:"quaff",KeyR:"read",KeyT:"takeoff",Digit1:"use_item_1",Digit2:"use_item_2",Digit3:"use_item_3",Digit4:"use_item_4",Digit5:"use_item_5",Digit6:"use_item_6",Digit7:"use_item_7",Digit8:"use_item_8",Digit9:"use_item_9",Escape:"pause",KeyM:"menu",KeyL:"language_switch"},this.setupEventListeners()}setupEventListeners(){this.element.tabIndex<0&&(this.element.tabIndex=0),this.element.focus();const e=a=>{a.preventDefault();const s=a.code;if(!this.pressedKeys.has(s)){this.pressedKeys.add(s),this.handleKeyPress(s);const i=this.keyMapping[s];this.isMovementAction(i)&&this.setupKeyRepeat(s)}},t=a=>{a.preventDefault();const s=a.code;this.pressedKeys.delete(s),this.clearKeyRepeat(s)};this.element.addEventListener("keydown",e),this.element.addEventListener("keyup",t),this.element.addEventListener("blur",()=>{this.element.focus()}),this.element.addEventListener("click",()=>{this.element.focus()})}handleKeyPress(e){const t=this.keyMapping[e];if(t&&this.actionCallbacks.has(t)){const a=this.actionCallbacks.get(t);a&&a()}}onAction(e,t){this.actionCallbacks.set(e,t)}offAction(e){this.actionCallbacks.delete(e)}setKeyMapping(e){Object.assign(this.keyMapping,e)}getKeyMapping(){return{...this.keyMapping}}isKeyPressed(e){return this.pressedKeys.has(e)}isMovementKeyPressed(){return["KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].some(t=>this.pressedKeys.has(t))}getPressedKeys(){return Array.from(this.pressedKeys)}isMovementAction(e){return e==="move_north"||e==="move_south"||e==="move_east"||e==="move_west"}setupKeyRepeat(e){this.clearKeyRepeat(e);const t=setTimeout(()=>{const a=setInterval(()=>{this.pressedKeys.has(e)?this.handleKeyPress(e):this.clearKeyRepeat(e)},this.REPEAT_RATE);this.keyRepeatTimer.set(e,a)},this.REPEAT_DELAY);this.keyRepeatTimer.set(e,t)}clearKeyRepeat(e){const t=this.keyRepeatTimer.get(e);t!==void 0&&(clearTimeout(t),clearInterval(t),this.keyRepeatTimer.delete(e))}clearPressedKeys(){this.pressedKeys.clear(),this.keyRepeatTimer.forEach(e=>{clearTimeout(e),clearInterval(e)}),this.keyRepeatTimer.clear()}disable(){this.clearPressedKeys()}focus(){this.element.focus()}getActionForKey(e){return this.keyMapping[e]}getKeyForAction(e){for(const[t,a]of Object.entries(this.keyMapping))if(a===e)return t}keyToDisplayString(e){return{KeyW:"W",KeyA:"A",KeyS:"S",KeyD:"D",KeyE:"E",KeyC:"C",KeyF:"F",KeyG:"G",KeyI:"I",KeyL:"L",KeyM:"M",KeyQ:"Q",KeyR:"R",KeyT:"T",KeyX:"X",Comma:",",Enter:"Enter",Digit1:"1",Digit2:"2",Digit3:"3",Digit4:"4",Digit5:"5",Digit6:"6",Digit7:"7",Digit8:"8",Digit9:"9",ArrowUp:"↑",ArrowDown:"↓",ArrowLeft:"←",ArrowRight:"→",Space:"Space",Escape:"Esc"}[e]||e}}class X{constructor(e,t,a,s,i,r,n,c,h,g,u,d){this.gameState=t,this.handleDirectionalInputCallback=a,this.toggleAttackModeCallback=s,this.handleInteractCallback=i,this.toggleInventoryOverlayCallback=r,this.toggleStatusOverlayCallback=n,this.toggleTakeoffOverlayCallback=c,this.handleItemActionCallback=h,this.togglePauseCallback=g,this.showMenuCallback=u,this.handleLanguageSwitchCallback=d,this.inputHandler=new j(e),this.setupInputHandlers()}inputHandler;setupInputHandlers(){this.inputHandler.onAction("move_north",()=>this.handleDirectionalInputCallback("north")),this.inputHandler.onAction("move_south",()=>this.handleDirectionalInputCallback("south")),this.inputHandler.onAction("move_east",()=>this.handleDirectionalInputCallback("east")),this.inputHandler.onAction("move_west",()=>this.handleDirectionalInputCallback("west")),this.inputHandler.onAction("attack",()=>this.toggleAttackModeCallback()),this.inputHandler.onAction("interact",()=>this.handleInteractCallback()),this.inputHandler.onAction("inventory",()=>this.toggleInventoryOverlayCallback()),this.inputHandler.onAction("character",()=>this.toggleStatusOverlayCallback()),this.inputHandler.onAction("takeoff",()=>this.toggleTakeoffOverlayCallback());for(let e=1;e<=9;e++)this.inputHandler.onAction(`use_item_${e}`,()=>this.handleItemActionCallback(e-1));this.inputHandler.onAction("pause",()=>this.togglePauseCallback()),this.inputHandler.onAction("menu",()=>this.showMenuCallback()),this.inputHandler.onAction("language_switch",()=>this.handleLanguageSwitchCallback())}getInputHandler(){return this.inputHandler}disable(){this.inputHandler.disable()}clearPressedKeys(){this.inputHandler.clearPressedKeys()}focus(){this.inputHandler.focus()}setKeyMapping(e){this.inputHandler.setKeyMapping(e)}getKeyMapping(){return this.inputHandler.getKeyMapping()}isKeyPressed(e){return this.inputHandler.isKeyPressed(e)}isMovementKeyPressed(){return this.inputHandler.isMovementKeyPressed()}getPressedKeys(){return this.inputHandler.getPressedKeys()}getKeyForAction(e){return this.inputHandler.getKeyForAction(e)}getActionForKey(e){return this.inputHandler.getActionForKey(e)}keyToDisplayString(e){return this.inputHandler.keyToDisplayString(e)}}class J{constructor(e,t){this.playerController=e,this.dungeonManager=t}createInitialGameState(){const e=this.playerController.getPlayer(),t=this.dungeonManager.generateInitialFloor(e);return this.playerController.setPosition(t.player.position),{status:"welcome",player:e,currentDungeon:t,dungeonData:this.dungeonManager.getDungeonData(),turn:0,score:0,messages:[],levelCleared:!1,tutorial:{isActive:!1,currentStep:"welcome",stepProgress:0,showHint:!1,hintText:""},welcome:{showPrologue:!0,selectedOption:"start"},overlay:{type:"none",isVisible:!1,selectedIndex:0}}}updateGameState(e,t){Object.assign(e,t)}updatePlayerState(e,t){Object.assign(e.player,t)}updateDungeonState(e,t){e.currentDungeon=t,e.dungeonData=this.dungeonManager.getDungeonData()}updateTutorialState(e,t){Object.assign(e.tutorial,t)}updateWelcomeState(e,t){Object.assign(e.welcome,t)}updateOverlayState(e,t){Object.assign(e.overlay,t)}incrementTurn(e){e.turn++}addMessage(e,t){e.messages.push(t),e.messages.length>100&&(e.messages=e.messages.slice(-100))}clearMessages(e){e.messages=[]}getGameStats(e){return{turnCount:e.turn,score:e.score}}calculateScore(e){const t=e.player;let a=0;return a+=t.level*100,a+=Math.max(0,1e3-e.turn),Math.max(0,a)}validateGameState(e){try{return!(!e.player||!e.currentDungeon||e.player.health<=0&&e.status!=="paused"||!e.currentDungeon.tiles||!e.currentDungeon.entities)}catch(t){return console.error("Game state validation error:",t),!1}}cloneGameState(e){return JSON.parse(JSON.stringify(e))}createSaveData(e){return{version:"1.0.0",timestamp:Date.now(),gameState:this.cloneGameState(e),playerStats:this.getGameStats(e),score:this.calculateScore(e)}}restoreFromSaveData(e){try{if(!e||!e.gameState)return null;const t=e.gameState;return this.validateGameState(t)?t:null}catch(t){return console.error("Failed to restore game state:",t),null}}resetGameState(){return this.createInitialGameState()}}class Q{constructor(e,t,a,s,i,r,n){this.gameState=e,this.playerController=t,this.addMessage=a,this.getEnemyAtCallback=s,this.processTurnCallback=i,this.updateTutorialProgressCallback=r,this.onCombatCompletedCallback=n}attackMode=!1;toggleAttackMode(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.attackMode=!this.attackMode,this.attackMode?this.addMessage(m("attackModeOn")):this.addMessage(m("movementMode")),this.updateTutorialProgressCallback&&this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback("combat"))}isAttackMode(){return this.attackMode}disableAttackMode(){this.attackMode=!1}handleAttack(e){this.playerController.getPosition();const t=this.playerController.move(e),a=this.getEnemyAtCallback(t);a?(this.handleCombat(a),this.processTurnCallback()):this.addMessage(m("noEnemyInThatDirection")),this.updateTutorialProgressCallback&&this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback("combat"),this.attackMode=!1,this.addMessage(m("movementMode"))}handleCombat(e){if(!this.playerController.rollAttackHit()){this.addMessage(m("attackMissed",{enemy:w(e)}));return}const{damage:t,isCritical:a}=this.playerController.rollDamage();"health"in e&&"maxHealth"in e?this.applyDamageToEnemy(e,t,a):this.handleLegacyEnemyCombat(e,t,a)}applyDamageToEnemy(e,t,a){"health"in e&&typeof e.health=="number"&&(e.health-=t);const s=a?"criticalHit":"normalHit";this.addMessage(m(s,{enemy:w(e),damage:t.toString(),health:"health"in e&&typeof e.health=="number"?Math.max(0,e.health).toString():"0",maxHealth:"maxHealth"in e&&typeof e.maxHealth=="number"?e.maxHealth.toString():"100"})),"health"in e&&typeof e.health=="number"&&e.health<=0&&this.handleEnemyDefeat(e)}handleLegacyEnemyCombat(e,t,a){const s=a?"criticalHit":"normalHit";this.addMessage(m(s,{enemy:w(e),damage:t.toString(),health:"0",maxHealth:"100"})),this.handleEnemyDefeat(e)}handleEnemyDefeat(e){const t=this.gameState.currentDungeon.entities.findIndex(a=>a.id===e.id);if(t!==-1){this.gameState.currentDungeon.entities.splice(t,1),this.addMessage(m("enemyDefeated",{enemy:w(e)}));const a=this.calculateExperienceReward(e),s=this.playerController.addExperience(a);this.gameState.score+=10,this.addMessage(m("experienceGained",{exp:a.toString()})),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,s&&this.addMessage(m("levelUp",{level:this.gameState.player.level.toString()})),this.onCombatCompletedCallback&&this.onCombatCompletedCallback()}}calculateExperienceReward(e){const a={G:25,R:20,S:22,O:40,T:45,W:50,D:100,L:90,M:85}[e.char]||20,s="maxHealth"in e?Math.floor(e.maxHealth/10):0;return a+s}getCombatStats(){const e=this.playerController.getPlayer();return{attackMode:this.attackMode,playerLevel:e.level,playerHealth:e.health,playerMaxHealth:e.maxHealth}}canEngageCombat(){return this.playerController.getPlayer().health>0&&(this.gameState.status==="playing"||this.gameState.status==="tutorial")}getPlayerDamageCapability(){const e=this.playerController.getPlayer(),t=e.equipment.mainHand,a=t?t.damage:5,s=t?t.accuracy:70;return{minDamage:Math.max(1,a-2),maxDamage:a+e.level,accuracy:s,criticalChance:10+Math.floor(e.level/2)}}evaluateEnemyThreat(e){const t=this.playerController.getPlayer().level;return["D","L","M"].includes(e.char)?t<5?"extreme":"high":["O","T","W"].includes(e.char)?t<3?"high":"medium":t<2?"medium":"low"}}class Z{constructor(e,t,a){this.gameState=e,this.playerController=t,this.addMessage=a}equipItemFromInventory(e){return e.itemType==="weapon"?this.equipWeapon(e):e.itemType==="armor"?this.equipArmor(e):!1}equipWeapon(e){return this.playerController.equipWeapon(e)?(this.addMessage(m("weaponEquipped",{weapon:p(e)})),this.syncPlayerData(),!0):(this.addMessage(m("cannotEquipWeapon")),!1)}equipArmor(e){return this.playerController.equipArmor(e)?(this.addMessage(m("armorEquipped",{armor:p(e)})),this.syncPlayerData(),!0):(this.addMessage(m("cannotEquipArmor")),!1)}removeEquipment(e){e==="weapon"?this.removeWeapon():e==="armor"&&this.removeArmor(),this.syncPlayerData()}removeWeapon(){const e=this.playerController.unequipWeapon();e&&(this.playerController.addItem(e),this.addMessage(m("weaponUnequipped",{weapon:p(e)})))}removeArmor(){if(this.playerController.getPlayer().equipment.head){const t=this.playerController.unequipArmor("head");t&&(this.playerController.addItem(t),this.addMessage(m("armorUnequipped",{armor:p(t)})))}}getCurrentEquipmentDisplay(){const t=this.playerController.getPlayer().equipment,a=[];if(t.mainHand){const n=t.mainHand,c=p(n);a.push(`${o("rightHand")}: ${n.char} ${c}`);const h=o("attackPowerEffect").replace("{{damage}}",String(n.damage)).replace("{{accuracy}}",String(n.accuracy));a.push(`      ${o("effectLabel")}: ${h}`)}else a.push(`${o("rightHand")}: ${o("noEquipment")}`);[{slot:"head",name:o("head")},{slot:"chest",name:o("chest")},{slot:"legs",name:o("legs")},{slot:"feet",name:o("feet")},{slot:"offHand",name:o("leftHand")}].forEach(n=>{const c=t[n.slot];if(c){const h=p(c);a.push(`${n.name}: ${c.char} ${h}`);const g=o("defenseEffect").replace("{{defense}}",String(c.defense));a.push(`      ${o("effectLabel")}: ${g}`)}else a.push(`${n.name}: ${o("noEquipment")}`)});const i=this.playerController.getTotalDefense(),r=o("totalDefense").replace("{{total}}",String(i));return a.push(r),a}canEquipItem(e){return!e||!e.itemType?!1:e.itemType==="weapon"?this.canEquipWeapon(e):e.itemType==="armor"?this.canEquipArmor(e):!1}canEquipWeapon(e){return e&&typeof e.damage=="number"&&typeof e.accuracy=="number"&&e.damage>0&&e.accuracy>0}canEquipArmor(e){return e&&typeof e.defense=="number"&&e.defense>0&&["head","chest","legs","feet","offHand"].includes(e.armorType)}getEquipmentStats(){const t=this.playerController.getPlayer().equipment,a=!!t.mainHand,s=t.mainHand?t.mainHand.damage:0,i=t.mainHand?t.mainHand.accuracy:0,r=this.playerController.getTotalDefense();let n=0;return t.head&&n++,t.chest&&n++,t.legs&&n++,t.feet&&n++,t.offHand&&n++,{weaponEquipped:a,weaponDamage:s,weaponAccuracy:i,totalDefense:r,armorPieces:n}}getEquipmentEffects(){const t=this.playerController.getPlayer().equipment;let a=0,s=0;const i=[];return t.mainHand&&(a+=t.mainHand.damage,t.mainHand.accuracy>90&&i.push("高精度")),[t.head,t.chest,t.legs,t.feet,t.offHand].filter(r=>r).forEach(r=>{r&&(s+=r.defense,r.defense>=10&&i.push("重装甲"))}),{attackBonus:a,defenseBonus:s,specialEffects:i}}syncPlayerData(){this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player}canUpgradeEquipment(e,t){return!e||!t?!0:e.itemType==="weapon"&&t.itemType==="weapon"?e.damage>t.damage:e.itemType==="armor"&&t.itemType==="armor"?e.defense>t.defense:!1}getEquipmentRecommendation(e){if(!this.canEquipItem(e))return null;const t=this.playerController.getPlayer();if(e.itemType==="weapon"){const a=t.equipment.mainHand;if(a){if(this.canUpgradeEquipment(e,a))return"武器をアップグレードすることを推奨します"}else return"武器を装備することを推奨します"}else if(e.itemType==="armor"){const a=t.equipment[e.armorType];if(a){if(this.canUpgradeEquipment(e,a))return"防具をアップグレードすることを推奨します"}else return"防具を装備することを推奨します"}return null}}class ee{constructor(e,t,a,s,i){this.gameState=e,this.playerController=t,this.addMessage=a,this.processTurnCallback=s,this.updateTutorialProgressCallback=i}handlePlayerMove(e){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;this.playerController.getPosition();const t=this.playerController.move(e);this.isValidMove(t)?this.executeMove(t):this.addMessage(m("cannotMoveThere"))}executeMove(e){this.playerController.confirmMove(e),this.gameState.player.position=e,b.updateFieldOfView(this.gameState.currentDungeon,e),this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback("movement"),this.processTurnCallback()}isValidMove(e){const t=this.gameState.currentDungeon;return!S(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player"&&i.type!=="enemy")}getEnemyAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="enemy")}getItemAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="item")}getEntityAt(e,t){return this.gameState.currentDungeon.entities.find(a=>a.position.x===e.x&&a.position.y===e.y&&(t?a.type===t:!0))}getPlayerPosition(){return this.playerController.getPosition()}calculateNextPosition(e){return this.playerController.move(e)}evaluateMovementRisk(e){const t=this.gameState.currentDungeon,a=this.getNearbyEnemies(e,1);if(a.length>=3)return"danger";if(a.length>=1)return"caution";const s=t.tiles[e.y]?.[e.x];return s&&!s.explored?"caution":"safe"}getNearbyEnemies(e,t=1){const a=[];for(let s=-t;s<=t;s++)for(let i=-t;i<=t;i++){if(i===0&&s===0)continue;const r={x:e.x+i,y:e.y+s},n=this.getEnemyAt(r);n&&a.push(n)}return a}suggestMovement(e){const t=this.getPlayerPosition(),a=[],s=e.x-t.x,i=e.y-t.y;return s>0?a.push("east"):s<0&&a.push("west"),i>0?a.push("south"):i<0&&a.push("north"),a}getValidDirections(){return this.getPlayerPosition(),["north","south","east","west"].filter(t=>{const a=this.calculateNextPosition(t);return this.isValidMove(a)})}getMovementStats(){const e=this.getPlayerPosition(),t=this.getValidDirections(),a=this.getNearbyEnemies(e),s=this.getNearbyItems(e),i=this.evaluateMovementRisk(e);return{currentPosition:e,validDirections:t,nearbyEnemies:a.length,nearbyItems:s.length,movementRisk:i}}getNearbyItems(e,t=1){const a=[];for(let s=-t;s<=t;s++)for(let i=-t;i<=t;i++){const r={x:e.x+i,y:e.y+s},n=this.getItemAt(r);n&&a.push(n)}return a}preventWallCollision(e){const t=this.calculateNextPosition(e),a=this.gameState.currentDungeon;return S(t,a.dimensions)?!a.tiles[t.y][t.x].blocking:!1}forceMove(e){this.playerController.setPosition(e),this.gameState.player.position=e,b.updateFieldOfView(this.gameState.currentDungeon,e)}}class te{constructor(e,t,a,s,i,r,n){this.gameState=e,this.playerController=t,this.dungeonManager=a,this.addMessage=s,this.processTurnCallback=i,this.getCombatAttackModeCallback=r,this.setCombatAttackModeCallback=n}handleInteract(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.gameState.player.position,t=this.dungeonManager.hasStairsAt(e);if(t){this.handleStairsInteraction(t);return}this.handleItemPickup(e)}handleStairsInteraction(e){const t=this.dungeonManager.getCurrentFloor();let a;if(e==="down")a=t+1,this.addMessage(m("descendingToFloor",{floor:a.toString()}));else{if(a=t-1,a<1){this.addMessage(m("cannotGoUp"));return}this.addMessage(m("returningToFloor",{floor:a.toString()}))}this.moveToFloor(a)}moveToFloor(e){const t=this.getCombatAttackModeCallback();this.dungeonManager.saveDungeonState(this.gameState.currentDungeon);const a=this.playerController.getPlayer(),s=this.dungeonManager.moveToFloor(e,a);this.updateGameStateForNewFloor(s,a.position),t&&this.setCombatAttackModeCallback(),b.updateFieldOfView(s,a.position),this.addMessage(m("arrivedAtFloor",{floor:e.toString()}))}updateGameStateForNewFloor(e,t){this.gameState.currentDungeon=e,this.gameState.dungeonData=this.dungeonManager.getDungeonData(),this.gameState.player.position=t,this.gameState.currentDungeon.player=this.gameState.player,this.gameState.levelCleared=!1,this.playerController.setPosition(t)}handleItemPickup(e){const a=this.gameState.currentDungeon.entities.find(s=>s.position.x===e.x&&s.position.y===e.y&&s.type==="item");a?this.pickupItem(a):this.addMessage(m("cannotInteract"))}pickupItem(e){this.playerController.addItem(e)?(this.addMessage(m("pickedUpItemWithName",{char:e.char,item:p(e)})),this.removeItemFromDungeon(e),this.processTurnCallback()):this.addMessage(m("inventoryFull"))}removeItemFromDungeon(e){const t=this.gameState.currentDungeon,a=t.entities.findIndex(s=>s.id===e.id);a!==-1&&t.entities.splice(a,1)}getStairsAtPosition(e){return this.dungeonManager.hasStairsAt(e)}getItemAtPosition(e){return this.gameState.currentDungeon.entities.find(s=>s.position.x===e.x&&s.position.y===e.y&&s.type==="item")||null}getCurrentFloorInfo(){const e=this.dungeonManager.getCurrentFloor(),t=this.gameState.currentDungeon;let a=!1,s=!1,i=0,r=0;return t.entities.forEach(n=>{n.type==="item"&&i++,n.type==="enemy"&&r++}),a=e>1,s=!0,{currentFloor:e,hasUpStairs:a,hasDownStairs:s,itemsOnFloor:i,enemiesOnFloor:r}}checkFloorCompletion(){return this.gameState.currentDungeon.entities.filter(a=>a.type==="enemy").length===0}completeFloor(){this.checkFloorCompletion()&&(this.gameState.levelCleared=!0,this.addMessage(m("levelCleared")),this.gameState.score+=50,this.addMessage(m("floorBonus")))}emergencyExit(){this.moveToFloor(1),this.addMessage(m("emergencyExit"))}getFloorStats(){const e=this.dungeonManager.getCurrentFloor(),t=this.dungeonManager.getDungeonData();return{floorsVisited:Object.keys(t.floors).length,currentFloor:e,totalItems:0,totalEnemies:0,floorsCleared:0}}shouldPickupItem(e){return this.playerController.getPlayer().inventory.length>=10?{shouldPickup:!1,reason:"インベントリが満杯です"}:e.itemType==="consumable"?{shouldPickup:!0,reason:"消耗品は常に有用です"}:e.itemType==="weapon"||e.itemType==="armor"?{shouldPickup:!0,reason:"装備品はアップグレードの可能性があります"}:{shouldPickup:!0,reason:"アイテムを取得することを推奨します"}}getInteractableAtPosition(e){const t=this.getStairsAtPosition(e);if(t)return{type:"stairs",details:{direction:t}};const a=this.getItemAtPosition(e);return a?{type:"item",details:{item:a}}:{type:"none",details:null}}}class T{static SAVE_KEY="terminal-descent-save";static SAVE_VERSION="1.0.0";save(e){try{const t=this.createSaveData(e),a=JSON.stringify(t);return localStorage.setItem(T.SAVE_KEY,a),{success:!0,message:"ゲームを保存しました"}}catch(t){return{success:!1,message:"セーブに失敗しました",error:t instanceof Error?t.message:"Unknown error"}}}load(){try{const e=localStorage.getItem(T.SAVE_KEY);if(!e)return null;const t=JSON.parse(e);return this.isValidSaveData(t)?t:(console.warn("Invalid save data structure detected"),null)}catch(e){return console.error("Failed to load save data:",e),null}}hasSave(){return localStorage.getItem(T.SAVE_KEY)!==null}deleteSave(){try{return localStorage.removeItem(T.SAVE_KEY),{success:!0,message:"セーブデータを削除しました"}}catch(e){return{success:!1,message:"セーブデータの削除に失敗しました",error:e instanceof Error?e.message:"Unknown error"}}}createSaveData(e){return{version:T.SAVE_VERSION,timestamp:Date.now(),player:{position:{...e.player.position},hp:e.player.health,maxHp:e.player.maxHealth,energy:e.player.energy,maxEnergy:e.player.maxEnergy,level:e.player.level,exp:e.player.experience,inventory:[...e.player.inventory],equipment:{...e.player.equipment}},dungeon:{currentFloor:e.dungeonData.currentFloor,seed:0,exploredTiles:[]},gameStats:{turnCount:e.turn,score:e.score,enemiesDefeated:0},metadata:{playTime:0,lastSaveLocation:`floor_${e.dungeonData.currentFloor}_${e.player.position.x}_${e.player.position.y}`}}}isValidSaveData(e){return e&&typeof e.version=="string"&&typeof e.timestamp=="number"&&e.player&&typeof e.player.hp=="number"&&typeof e.player.level=="number"&&e.dungeon&&typeof e.dungeon.currentFloor=="number"&&e.gameStats&&typeof e.gameStats.turnCount=="number"}}class ae{canvas;ctx;config;camera;renderedTexts=[];constructor(e,t){this.canvas=e;const a=e.getContext("2d");if(!a)throw new Error("Failed to get 2D rendering context");this.ctx=a,this.config=t,this.camera={position:{x:0,y:0},viewport:t.viewport,target:{x:0,y:0}},this.setupCanvas()}trackableFillText(e,t,a){this.renderedTexts.push(e),this.ctx.fillText(e,t,a)}getRenderedTexts(){return[...this.renderedTexts]}clearRenderedTexts(){this.renderedTexts=[]}setupCanvas(){this.canvas.width=this.config.viewport.width,this.canvas.height=this.config.viewport.height,this.ctx.imageSmoothingEnabled=!1,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.textBaseline="middle"}clear(){this.ctx.fillStyle=this.config.colors.background,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}updateCamera(e){this.camera.target=e;const t=Math.floor(this.config.viewport.width/this.config.tileSize),a=Math.floor(this.config.viewport.height/this.config.tileSize);this.camera.position={x:e.x-Math.floor(t/2),y:e.y-Math.floor(a/2)}}worldToScreen(e){return{x:(e.x-this.camera.position.x)*this.config.tileSize,y:(e.y-this.camera.position.y)*this.config.tileSize}}isVisible(e){const t=this.worldToScreen(e);return t.x>=-this.config.tileSize&&t.x<this.config.viewport.width&&t.y>=-this.config.tileSize&&t.y<this.config.viewport.height}renderCharacter(e,t,a,s){s&&(this.ctx.fillStyle=s,this.ctx.fillRect(t.x,t.y,this.config.tileSize,this.config.tileSize)),this.ctx.fillStyle=a,this.trackableFillText(e,t.x+this.config.tileSize/2,t.y+this.config.tileSize/2)}renderTile(e){if(!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);if(!e.explored)return;const a=e.visible?e.color:this.config.colors.explored,s=e.visible?e.backgroundColor:void 0;this.renderCharacter(e.char,t,a,s)}renderEntity(e){if(!e.visible||!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);this.renderCharacter(e.char,t,e.color,e.backgroundColor)}render(e){if(this.clear(),this.clearRenderedTexts(),this.ctx.filter="none",e.status==="welcome"){this.renderWelcomeScreen(e);return}const t=e.currentDungeon;this.updateCamera(t.player.position);for(let a=0;a<t.dimensions.height;a++)for(let s=0;s<t.dimensions.width;s++){const i=t.tiles[a][s];i&&this.renderTile(i)}t.entities.filter(a=>a.type!=="player").forEach(a=>this.renderEntity(a)),this.renderEntity(t.player),this.renderUI(e),e.overlay.isVisible&&this.renderOverlay(e),this.updateTestElements(e)}renderUI(e){const t=e.player,a=10,s=20;this.ctx.save(),this.ctx.font=`14px ${this.config.fontFamily}`,this.ctx.textAlign="left",this.ctx.fillStyle=this.config.colors.text,[`${o("level")}: ${t.level}`,`${o("health")}: ${t.health}/${t.maxHealth}`,`${o("energy")}: ${t.energy}/${t.maxEnergy}`,`${o("accessLevel")}: ${t.accessLevel}`,`${o("turn")}: ${e.turn}`].forEach((h,g)=>{this.ctx.fillText(h,a,a+g*s)});const r=D(t),n=[`${o("attackPowerLabel")}: ${r.attackPower}`,`${o("defenseLabel")}: ${r.totalDefense}`,`${o("experienceLabel")}: ${t.experience}/${t.experienceToNext}`],c=this.canvas.width-200;if(n.forEach((h,g)=>{this.ctx.fillText(h,c,a+g*s)}),e.messages.length>0){const h=Math.floor(this.canvas.height*.3/s),g=e.messages.slice(-h);g.forEach((u,d)=>{const y=this.canvas.height-a-(g.length-d)*s,E=N(u);this.ctx.fillText(E,a,y)})}this.ctx.restore()}getCameraPosition(){return{...this.camera.position}}screenToWorld(e){return{x:Math.floor(e.x/this.config.tileSize)+this.camera.position.x,y:Math.floor(e.y/this.config.tileSize)+this.camera.position.y}}renderOverlay(e){switch(this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),e.overlay.type){case"inventory":this.renderInventoryOverlay(e);break;case"character":this.renderStatusOverlay(e);break;case"takeoff":this.renderTakeoffOverlay(e);break;case"pauseMenu":this.renderPauseMenuOverlay(e);break}this.ctx.restore()}renderInventoryOverlay(e){const a=e.player.inventory,s=400,i=Math.min(500,a.length*30+100),r=(this.canvas.width-s)/2,n=(this.canvas.height-i)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(r,n,s,i),this.ctx.strokeRect(r,n,s,i),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.trackableFillText(o("inventoryHeader"),r+20,n+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(o("closeInstruction"),r+20,n+50),this.ctx.font="14px Courier New, monospace";const c=n+80;a.length===0?(this.ctx.fillStyle="#666666",this.ctx.fillText(o("emptyInventoryMessage"),r+20,c)):a.forEach((h,g)=>{const u=c+g*25;e.overlay.selectedIndex===g&&(this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.fillRect(r+10,u-15,s-20,20)),this.ctx.fillStyle="#ffff00",this.ctx.fillText(`${g+1}.`,r+20,u),this.ctx.fillStyle=h.color,this.ctx.fillText(h.char,r+50,u),this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${h.name} x${h.quantity}`,r+70,u),this.ctx.font="10px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(h.description,r+70,u+12),this.ctx.font="14px Courier New, monospace"})}renderStatusOverlay(e){const t=e.player,a=400,s=500,i=(this.canvas.width-a)/2,r=(this.canvas.height-s)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(i,r,a,s),this.ctx.strokeRect(i,r,a,s),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.trackableFillText(o("statusHeader"),i+20,r+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(o("statusCloseInstruction"),i+20,r+50),this.ctx.font="14px Courier New, monospace",this.ctx.fillStyle="#00ff00";const n=[{label:o("level"),value:`${t.level}`,color:"#ffff00"},{label:"HP",value:`${t.health}/${t.maxHealth}`,color:t.health<t.maxHealth*.3?"#ff4444":"#00ff00"},{label:o("energy"),value:`${t.energy}/${t.maxEnergy}`,color:t.energy<t.maxEnergy*.3?"#ffaa00":"#00ff00"},{label:"EXP",value:`${t.experience}/${t.experienceToNext}`,color:"#88ff88"},{label:o("accessLevel"),value:`${t.accessLevel}`,color:"#00ffff"},{label:o("turn"),value:`${e.turn}`,color:"#888888"},{label:"SCORE",value:`${e.score}`,color:"#ffff00"}],c=r+80;n.forEach((h,g)=>{const u=c+g*25;this.ctx.fillStyle="#00ff00",this.trackableFillText(`${h.label}:`,i+20,u),this.ctx.fillStyle=h.color,this.trackableFillText(h.value,i+150,u)}),this.ctx.font="16px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.trackableFillText(o("equipmentHeader"),i+20,r+260),this.renderEquipmentDetails(t,i+20,r+285)}renderEquipmentDetails(e,t,a){this.ctx.font="12px Courier New, monospace";const s=R(e),i=[{key:"weapon",label:o("weaponSlot")},{key:"head",label:o("headSlot")},{key:"chest",label:o("chestSlot")},{key:"legs",label:o("legsSlot")},{key:"feet",label:o("feetSlot")},{key:"shield",label:o("shieldSlot")}];let r=a;i.forEach(c=>{const h=s[c.key];this.ctx.fillStyle="#00ff00",this.trackableFillText(`${c.label}:`,t,r),this.ctx.fillStyle=h!==o("noItem")?"#ffff00":"#666666",this.trackableFillText(h,t+60,r),r+=15}),r+=10,this.ctx.fillStyle="#00ff00",this.trackableFillText(o("equipmentStatsHeader"),t,r),r+=20;const n=D(e);this.ctx.fillStyle="#88ff88",this.trackableFillText(`${o("totalDefenseLabel")}: ${n.totalDefense}`,t,r),r+=15,this.ctx.fillStyle="#ff8888",this.trackableFillText(`${o("attackPowerLabel")}: ${n.attackPower}`,t,r)}renderTakeoffOverlay(e){const t=e.player,a=["mainHand","head","chest","legs","feet","offHand"],s=[];if(a.forEach(u=>{const d=t.equipment[u];d&&s.push({slot:u,item:d,displayName:p(d)})}),s.length===0)return;const i=400,r=Math.min(400,s.length*30+150),n=(this.canvas.width-i)/2,c=(this.canvas.height-r)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(n,c,i,r),this.ctx.strokeRect(n,c,i,r),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText(o("takeoffHeader"),n+20,c+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(o("takeoffInstruction"),n+20,c+50),this.ctx.font="14px Courier New, monospace";const h=e.overlay.selectedIndex||0;s.forEach((u,d)=>{const y=c+80+d*25,E=d===h;E&&(this.ctx.fillStyle="#333333",this.ctx.fillRect(n+15,y-12,i-30,20)),this.ctx.fillStyle="#00ff00";const A=this.getSlotDisplayName(u.slot);this.ctx.fillText(`${A}:`,n+20,y),this.ctx.fillStyle=E?"#ffff00":"#ffffff";const H=u.item.char||"?";this.ctx.fillText(`${H} ${u.displayName}`,n+100,y)}),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888";const g=c+r-30;this.ctx.fillText(o("takeoffControls"),n+20,g)}renderPauseMenuOverlay(e){this.applyGlassEffect();const t=300,a=250,s=(this.canvas.width-t)/2,i=(this.canvas.height-a)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.fillRect(s,i,t,a),this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.strokeRect(s,i,t,a),this.ctx.font="bold 18px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.ctx.textAlign="center",this.ctx.fillText(o("pauseMenuTitle"),s+t/2,i+40);const r=[{key:"continueGame",index:0},{key:"saveGame",index:1},{key:"loadGame",index:2},{key:"languageSwitch",index:3},{key:"returnToTitle",index:4}],n=i+80,c=30;this.ctx.font="14px Courier New, monospace",this.ctx.textAlign="left",r.forEach((g,u)=>{const d=n+u*c,y=e.overlay.selectedIndex===u;y&&(this.ctx.fillStyle="#003300",this.ctx.fillRect(s+10,d-18,t-20,22),this.ctx.fillStyle="#00ff00",this.ctx.fillText(">",s+20,d)),this.ctx.fillStyle=y?"#ffffff":"#cccccc",this.ctx.fillText(o(g.key),s+40,d)}),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.textAlign="center";const h=i+a-20;this.ctx.fillText("↑↓: Select  Enter: Confirm  ESC: Close",s+t/2,h)}getSlotDisplayName(e){return{mainHand:o("weaponSlot"),head:o("headSlot"),chest:o("chestSlot"),legs:o("legsSlot"),feet:o("feetSlot"),offHand:o("shieldSlot")}[e]||e}resize(e){this.config.viewport=e,this.canvas.width=e.width,this.canvas.height=e.height,this.setupCanvas()}renderWelcomeScreen(e){const t=this.canvas.width/2,a=this.canvas.height/2;if(e.welcome.showPrologue){this.renderPrologue();return}this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize*2}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.fillText(o("welcomeTitle"),t,a-120),this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.fillText(o("welcomeSubtitle"),t,a-50);const s=I("menuOptions");[{key:"start",text:s[0]},{key:"tutorial",text:s[1]},{key:"settings",text:s[2]}].forEach((r,n)=>{const c=a+n*30,h=e.welcome.selectedOption===r.key;if(this.ctx.fillStyle=h?this.config.colors.player:this.config.colors.text,h){const g=this.ctx.measureText(r.text).width,u=20;this.ctx.fillText(">",t-g/2-u,c),this.ctx.fillText("<",t+g/2+u,c)}this.ctx.fillText(r.text,t,c)}),this.ctx.fillStyle=this.config.colors.explored,this.ctx.fillText(o("menuInstructions"),t,a+120),e.welcome.selectedOption||(e.welcome.selectedOption="start"),this.updateTestElements(e)}renderPrologue(){const e=this.canvas.width/2,t=this.canvas.height/2;this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",I("prologueLines").forEach((s,i)=>{this.ctx.fillText(s,e,t-100+i*25)})}updateTestElements(e){try{const t=document.getElementById("test-game-status");t&&(t.textContent=e.status,t.setAttribute("data-game-status",e.status));const a=document.getElementById("test-tutorial-status");if(a){const c=e.tutorial.isActive?`active-${e.tutorial.currentStep}`:"inactive";a.textContent=c,a.setAttribute("data-tutorial-status",c)}const s=document.getElementById("test-start-button"),i=document.getElementById("test-tutorial-button"),r=document.getElementById("test-settings-button");s&&i&&r&&([s,i,r].forEach(c=>{c.removeAttribute("data-selected")}),e.welcome.selectedOption==="start"?s.setAttribute("data-selected","true"):e.welcome.selectedOption==="tutorial"?i.setAttribute("data-selected","true"):e.welcome.selectedOption==="settings"&&r.setAttribute("data-selected","true"));const n=document.getElementById("test-equipment-section");if(n){const c=e.overlay.type==="character"&&e.overlay.isVisible;if(n.setAttribute("data-visible",c.toString()),e.player?.equipment){const h=JSON.stringify({mainHand:e.player.equipment.mainHand?.nameKey||"none",head:e.player.equipment.head?.nameKey||"none",chest:e.player.equipment.chest?.nameKey||"none",legs:e.player.equipment.legs?.nameKey||"none",feet:e.player.equipment.feet?.nameKey||"none",offHand:e.player.equipment.offHand?.nameKey||"none"});n.setAttribute("data-equipment",h)}}}catch{console.debug("Test elements not found, skipping update")}}applyGlassEffect(){this.ctx.filter="blur(6px) brightness(0.6)";const e=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);this.ctx.putImageData(e,0,0),this.ctx.filter="none"}}class se{gameState;playerController;dungeonGenerator;dungeonManager;inventoryManager;overlayManager;tutorialManager;interactiveTutorialManager;uiManager;inputManager;gameStateManager;combatManager;equipmentManager;movementManager;floorManager;saveManager;renderer;lastUpdateTime;animationFrameId;constructor(e){this.playerController=new U({x:0,y:0}),this.dungeonGenerator=new b({width:80,height:50},1),this.dungeonManager=new W,this.gameStateManager=new J(this.playerController,this.dungeonManager),this.inventoryManager=null;const t={tileSize:16,fontSize:14,fontFamily:"Courier New, monospace",viewport:{width:e.width,height:e.height},colors:{background:"#000000",text:"#00ff00",player:"#00ff00",enemy:"#ff4444",wall:"#444444",floor:"#666666",explored:"#333333",visible:"#ffffff"}};this.renderer=new ae(e,t),this.gameState=this.gameStateManager.createInitialGameState(),this.inventoryManager=new f(this.gameState,this.playerController,a=>this.addMessage(a),()=>this.processTurn(),a=>this.tutorialManager.updateProgress(a),a=>this.equipmentManager.equipItemFromInventory(a),()=>this.equipmentManager.getCurrentEquipmentDisplay(),a=>this.addMessages(a)),this.overlayManager=new V(this.gameState,this.playerController,a=>this.useItem(a),a=>this.equipmentManager.removeEquipment(a),a=>this.addMessage(a)),this.tutorialManager=new Y(this.gameState,a=>this.addMessage(a)),this.interactiveTutorialManager=new B,this.uiManager=new z(this.gameState,a=>this.addMessage(a),()=>this.startGame(),()=>this.startTutorial()),this.combatManager=new Q(this.gameState,this.playerController,a=>this.addMessage(a),a=>this.movementManager.getEnemyAt(a),()=>this.processTurn(),a=>this.tutorialManager.updateProgress(a),()=>{this.gameState.status==="tutorial"&&(this.interactiveTutorialManager.markCombatCompleted(),this.interactiveTutorialManager.updateTutorial(this.gameState))}),this.equipmentManager=new Z(this.gameState,this.playerController,a=>this.addMessage(a)),this.movementManager=new ee(this.gameState,this.playerController,a=>this.addMessage(a),()=>this.processTurn(),a=>this.tutorialManager.updateProgress(a)),this.floorManager=new te(this.gameState,this.playerController,this.dungeonManager,a=>this.addMessage(a),()=>this.processTurn(),()=>this.combatManager.isAttackMode(),()=>this.combatManager.toggleAttackMode()),this.saveManager=new T,this.inputManager=new X(e,this.gameState,a=>this.handleDirectionalInput(a),()=>this.handleToggleAttackMode(),()=>this.handleInteract(),()=>this.handleToggleInventory(),()=>this.handleToggleStatus(),()=>this.overlayManager.toggleTakeoffOverlay(),a=>this.handleItemAction(a),()=>this.togglePause(),()=>this.uiManager.showMenu(),()=>this.uiManager.handleLanguageSwitch()),this.lastUpdateTime=0}handleDirectionalInput(e){if(this.gameState.status==="welcome"){this.handleWelcomeNavigation(e);return}if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.handlePauseMenuNavigation(e);return}if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.overlayManager.isVisible()){this.overlayManager.handleNavigation(e);return}if(this.gameState.status==="tutorial"){if(this.combatManager.isAttackMode()&&!this.interactiveTutorialManager.isActionAllowed("attack")){this.addMessage("このチュートリアルステップでは攻撃はできません。");return}if(!this.combatManager.isAttackMode()&&!this.interactiveTutorialManager.isActionAllowed("move")){this.addMessage("このチュートリアルステップでは移動はできません。");return}}this.combatManager.isAttackMode()?this.combatManager.handleAttack(e):(this.movementManager.handlePlayerMove(e),this.gameState.status==="tutorial"&&this.interactiveTutorialManager.updateTutorial(this.gameState))}}handleInteract(){if(this.gameState.status==="welcome"){this.uiManager.handleWelcomeInteract();return}if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.handleMenuSelect();return}if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.overlayManager.isVisible()){this.overlayManager.handleInteraction();return}if(this.gameState.status==="tutorial"&&!this.interactiveTutorialManager.isActionAllowed("pickup_item")){this.addMessage("このチュートリアルステップではアイテムの取得はできません。");return}this.floorManager.handleInteract(),this.gameState.status==="tutorial"&&this.interactiveTutorialManager.updateTutorial(this.gameState)}}showInventory(){this.inventoryManager.showInventory()}useItem(e){this.inventoryManager.useItem(e)}processTurn(){this.gameState.turn++,this.processEnemies(),this.checkGameState()}processEnemies(){const e=this.gameState.currentDungeon,t=this.gameState.player.position;e.entities.filter(a=>a.type==="enemy").forEach(a=>{const s=Math.abs(a.position.x-t.x)+Math.abs(a.position.y-t.y);if(s<=3)if(s===1){const i="damage"in a?a.damage:10,r=this.playerController.getTotalDefense(),n=Math.max(1,i-r);this.playerController.takeDamage(n),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health;const c=this.playerController.getPlayer().health,h=this.playerController.getPlayer().maxHealth;r>0?this.addMessage(o("enemyAttackWithDefense").replace("{{enemy}}",w(a)).replace("{{damage}}",n.toString()).replace("{{defense}}",r.toString()).replace("{{health}}",Math.max(0,c).toString()).replace("{{maxHealth}}",h.toString())):this.addMessage(o("enemyAttackNormal").replace("{{enemy}}",w(a)).replace("{{damage}}",n.toString()).replace("{{health}}",Math.max(0,c).toString()).replace("{{maxHealth}}",h.toString())),this.playerController.isDead()&&(this.gameState.status="gameOver",this.addMessage(`${o("youDied")} ${o("gameOver")}`))}else{const i=Math.sign(t.x-a.position.x),r=Math.sign(t.y-a.position.y),n={x:a.position.x+i,y:a.position.y+r};this.isValidEnemyMove(n)&&(a.position=n)}})}isValidEnemyMove(e){const t=this.gameState.currentDungeon;return!S(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player")}checkGameState(){if(this.playerController.isDead()){this.gameState.status="gameOver",this.addMessage(o("gameOver"));return}if(this.gameState.currentDungeon.entities.filter(t=>t.type==="enemy").length===0&&!this.gameState.levelCleared){this.gameState.score+=100,this.gameState.levelCleared=!0,this.addMessage(o("levelCleared"));const t=this.gameState.dungeonData.currentFloor,a=this.gameState.dungeonData.maxFloor;t<a?(this.addExitStairs(),this.addMessage(o("stairsAppeared"))):this.addMessage(o("allFloorsCleared"))}}addExitStairs(){const e=this.gameState.currentDungeon,t=e.rooms;if(t.length===0)return;const a=t[t.length-1],s={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};if(e.entities.find(n=>n.position.x===s.x&&n.position.y===s.y)){const n=[{x:s.x+1,y:s.y},{x:s.x-1,y:s.y},{x:s.x,y:s.y+1},{x:s.x,y:s.y-1}];for(const c of n)if(c.x>=a.position.x&&c.x<a.position.x+a.dimensions.width&&c.y>=a.position.y&&c.y<a.position.y+a.dimensions.height&&!e.entities.find(g=>g.position.x===c.x&&g.position.y===c.y)){s.x=c.x,s.y=c.y;break}}const r=e.tiles[s.y][s.x];r&&(r.type="stairs",r.char=">",r.color="#ffff00",r.backgroundColor="#000000",r.blocking=!1)}togglePause(){if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.gameState.overlay.isVisible=!1,this.gameState.overlay.type="none",this.gameState.status="playing";return}this.overlayManager.handlePauseOrClose()||(console.log("No overlay, proceeding with pause toggle"),this.gameState.status==="playing"&&(this.gameState.status="paused",this.gameState.overlay.type="pauseMenu",this.gameState.overlay.isVisible=!0,this.gameState.overlay.selectedIndex=0))}handleMenuSelect(){if(this.gameState.overlay.type!=="pauseMenu"||!this.gameState.overlay.isVisible)return;switch(this.gameState.overlay.selectedIndex){case 0:this.togglePause();break;case 1:this.saveGame();break;case 2:this.loadGame();break;case 3:this.uiManager.handleLanguageSwitch();break;case 4:this.addMessage("タイトルに戻る機能は未実装です");break}}handlePauseMenuNavigation(e){const a=this.gameState.overlay.selectedIndex??0;e==="south"?this.gameState.overlay.selectedIndex=Math.min(a+1,4):e==="north"&&(this.gameState.overlay.selectedIndex=Math.max(a-1,0))}addMessage(e){const t=typeof e=="string"?P(e):e;this.gameState.messages.push(t),this.gameState.messages.length>5&&this.gameState.messages.shift()}addMessages(e){this.gameState.messages=[],e.forEach(t=>{const a=typeof t=="string"?P(t):t;this.gameState.messages.push(a)})}gameLoop=e=>{const t=e-this.lastUpdateTime;this.update(t),this.render(),this.lastUpdateTime=e,this.animationFrameId=requestAnimationFrame(this.gameLoop)};update(e){}render(){this.renderer.render(this.gameState)}start(){this.addMessage(o("searchingForExit")),this.lastUpdateTime=performance.now(),this.animationFrameId=requestAnimationFrame(this.gameLoop)}stop(){this.animationFrameId!==void 0&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=void 0)}reset(){this.stop(),this.playerController.reset({x:0,y:0}),this.gameState=this.gameStateManager.createInitialGameState()}getGameState(){return{...this.gameState}}getPlayerStats(){return this.playerController.getStats()}get inputHandler(){return this.inputManager.getInputHandler()}getRenderer(){return this.renderer}pause(){this.gameState.status==="playing"&&(this.gameState.status="paused",this.addMessage(o("gamePaused")))}resume(){this.gameState.status==="paused"&&(this.gameState.status="playing",this.addMessage(o("gameResumed")))}movePlayer(e){this.movementManager.handlePlayerMove(e)}togglePauseTest(){this.togglePause()}setOverlayStateTest(e,t,a=0){this.gameState.overlay={type:e,isVisible:t,selectedIndex:a}}navigateInventoryTest(e){this.overlayManager.handleNavigation(e)}handleDirectionalInputTest(e){this.handleDirectionalInput(e)}handleOverlayInteractionTest(){this.overlayManager.handleInteraction()}toggleAttack(){this.combatManager.toggleAttackMode()}isAttackMode(){return this.combatManager.isAttackMode()}showInventoryTest(){this.showInventory()}useItemTest(e){this.useItem(e)}addItemToPlayer(e){return this.playerController.addItem(e)}attackEnemy(e){this.combatManager.handleAttack(e)}forceMissAttack(e){this.playerController.getPosition(),this.playerController.move(e),this.addMessage(m("noEnemyInThatDirection")),this.combatManager.disableAttackMode(),this.addMessage(m("movementMode"))}getPlayerController(){return this.playerController}toggleTakeoffOverlayTest(){this.overlayManager.toggleTakeoffOverlay()}handleTakeoffInteractionTest(){this.overlayManager.handleInteraction()}navigateTakeoffTest(e){this.overlayManager.handleNavigation(e)}testHandleInteract(){this.handleInteract()}testCastEntityToItem(e){return e}testShowInventory(){this.showInventory()}testUseItem(e){const t=this.playerController.getPlayer().inventory;if(e<0||e>=t.length){this.addMessage(m("noItemInSlot",{slot:(e+1).toString()}));return}const a=t[e];this.inventoryManager.applyItemEffect(a)&&(this.playerController.removeItem(a.id,1),this.gameState.status==="tutorial"&&(this.interactiveTutorialManager.markItemUsed(),this.interactiveTutorialManager.updateTutorial(this.gameState)))}testApplyItemEffect(e){return this.inventoryManager.applyItemEffect(e)}testTakeDamage(e){this.playerController.takeDamage(e),this.gameState.player.health=this.playerController.getPlayer().health}handleWelcomeNavigation(e){const t=["start","tutorial","settings"],a=this.gameState.welcome.selectedOption?t.indexOf(this.gameState.welcome.selectedOption):0;let s=a;e==="north"?s=Math.max(0,a-1):e==="south"&&(s=Math.min(t.length-1,a+1)),this.gameState.welcome.selectedOption=t[s]}startGame(){this.gameState.status="playing",this.addMessage(o("welcomeToFacility"))}startTutorial(){const e=this.playerController.getPlayerDirect(),t=this.dungeonManager.generateTutorialDungeon(e);this.gameState.currentDungeon=t,this.tutorialManager.startTutorial(),this.interactiveTutorialManager.reset();const a=this.interactiveTutorialManager.getCurrentStepInfo();this.addMessage(`チュートリアル: ${a.title}`),this.addMessage(a.description)}startTutorialForTesting(){this.startTutorial()}skipTutorial(){this.tutorialManager.skipTutorial()}skipTutorialAndStartGame(){this.tutorialManager.skipTutorial(),this.startGame()}handleInteractTest(){this.handleInteract()}testGetPlayer(){return this.playerController.getPlayer()}testSetPlayerEnergy(e){this.playerController.getPlayerDirect().energy=e,this.gameState.player.energy=e}testSetPlayerHealth(e){this.playerController.getPlayerDirect().health=e,this.gameState.player.health=e,this.gameState.currentDungeon.player.health=e}getCurrentTutorialInfo(){return this.gameState.status!=="tutorial"?null:this.interactiveTutorialManager.getCurrentStepInfo()}getTutorialProgress(){return this.gameState.status!=="tutorial"?null:this.interactiveTutorialManager.getProgress()}isTutorialCompleted(){return this.interactiveTutorialManager.isAllStepsCompleted()}getInteractiveTutorialManager(){return this.interactiveTutorialManager}handleToggleAttackMode(){if(this.gameState.status==="tutorial"&&!this.interactiveTutorialManager.isActionAllowed("attack")){this.addMessage("このチュートリアルステップでは攻撃モードに入れません。");return}this.combatManager.toggleAttackMode()}handleToggleInventory(){if(this.gameState.status==="tutorial"&&!this.interactiveTutorialManager.isActionAllowed("inventory")){this.addMessage("このチュートリアルステップではインベントリを開けません。");return}this.overlayManager.toggleInventoryOverlay(),this.gameState.status==="tutorial"&&this.interactiveTutorialManager.updateTutorial(this.gameState)}handleToggleStatus(){if(this.gameState.status==="tutorial"&&!this.interactiveTutorialManager.isActionAllowed("character_status")){this.addMessage("このチュートリアルステップではステータスを開けません。");return}this.overlayManager.toggleStatusOverlay(),this.gameState.status==="tutorial"&&(this.interactiveTutorialManager.markStatusViewed(),this.interactiveTutorialManager.updateTutorial(this.gameState))}handleItemAction(e){if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.gameState.status==="tutorial"&&!this.interactiveTutorialManager.isActionAllowed("use_item")){this.addMessage("このチュートリアルステップではアイテムを使用できません。");return}this.overlayManager.isType("inventory")?this.overlayManager.useItemFromOverlay(e):this.useItem(e),this.gameState.status==="tutorial"&&this.interactiveTutorialManager.updateTutorial(this.gameState)}}saveGame(){const e=this.saveManager.save(this.gameState);e.success?this.addMessage(e.message):this.addMessage(`セーブエラー: ${e.error}`)}loadGame(){const e=this.saveManager.load();if(!e){this.addMessage("セーブデータが見つかりません");return}try{this.gameState.player.position=e.player.position,this.gameState.player.health=e.player.hp,this.gameState.player.maxHealth=e.player.maxHp,this.gameState.player.energy=e.player.energy,this.gameState.player.maxEnergy=e.player.maxEnergy,this.gameState.player.level=e.player.level,this.gameState.player.experience=e.player.exp,this.gameState.player.inventory=e.player.inventory,this.gameState.player.equipment=e.player.equipment,this.gameState.dungeonData.currentFloor=e.dungeon.currentFloor,this.gameState.turn=e.gameStats.turnCount,this.gameState.score=e.gameStats.score;const t=this.dungeonGenerator.generate(this.gameState.player);t.player=this.gameState.player,this.gameState.currentDungeon=t,this.playerController.setPosition(e.player.position),this.addMessage("ゲームをロードしました")}catch(t){this.addMessage("ロードエラー: データが破損しています"),console.error("Load error:",t)}}hasSaveData(){return this.saveManager.hasSave()}deleteSaveData(){const e=this.saveManager.deleteSave();this.addMessage(e.message)}}const ie={BASE_URL:"/terminal-descent-demo/",DEV:!1,MODE:"production",PROD:!0,SSR:!1};document.addEventListener("DOMContentLoaded",()=>{(()=>{const a=document.getElementById("gameTitle"),s=document.getElementById("gameSubtitle"),i=document.getElementById("gameInfo");a&&(a.textContent=o("gameTitle")),s&&(s.textContent=o("gameSubtitle")),i&&(i.textContent=o("controls"))})();const e=document.getElementById("gameCanvas");if(!e){console.error("Could not find game canvas element");return}const t=new se(e);try{}catch{}t.start(),window.game=t,window.localization=C,window.renderer={getRenderedTexts:()=>{const a=t.getRenderer();return a?a.getRenderedTexts():[]}},console.log("Terminal Descent initialized successfully"),console.log("Use WASD keys to move, F to interact, ESC to pause")});
