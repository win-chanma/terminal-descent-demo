(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const E={ja:{gameTitle:"ターミナル・ディセント",gameSubtitle:"ディストピア・ローグライク v1.0",controls:"WASDで移動 | Fで調べる | Iでインベントリ | Cでステータス | Lで言語切替 | ESCでメニュー",welcome:"ターミナル・ディセントへようこそ。WASDで移動してください。",cannotMoveThere:"そこには移動できません。",pickedUpItem:"を手に入れた。",nothingToInteract:"調べるものがありません。",enemyAttacks:"グレムリンが攻撃してきた！",youDied:"あなたは死亡しました。",gameOver:"ゲームオーバー。",levelCleared:"フロアクリア！勝利です！",gamePaused:"ゲームを一時停止しました。ESCで再開。",gameResumed:"ゲームを再開しました。",menuNotImplemented:"メニューは未実装です。",searchingForExit:"ターミナル・ディセントを開始。出口を探索中...",languageSwitched:"言語が切り替わりました。",playerAttacks:"を攻撃した！",enemyDefeated:"を倒した！",attackModeOn:"攻撃モード：方向キーで攻撃方向を選択",attackModeOff:"移動モード",noEnemyThere:"そこには敵がいません。",attackMissed:"{{enemy}}への攻撃が外れた！",criticalHit:"クリティカルヒット！ {{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}}に{{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",experienceGained:"経験値 +{{exp}}",levelUp:"レベルアップ！ Lv.{{level}}",enemyAttackWithDefense:"{{enemy}}の攻撃！ {{damage}}ダメージ！(防御力-{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}}の攻撃！ {{damage}}ダメージ！ HP: {{health}}/{{maxHealth}}",level:"レベル",health:"HP",energy:"エネルギー",accessLevel:"アクセス権",turn:"ターン",inventoryFull:"インベントリが満杯です。",inventoryEmpty:"インベントリは空です。",useItem:"を使用した。",pickedUpItemWithName:"{{item}}を拾った",cannotInteract:"相互作用できるものがない",invalidItem:"無効なアイテムです。",noItemInSlot:"スロット{{slot}}にアイテムがありません。",ironSword:"鉄の剣",battleAxe:"バトルアックス",hunterBow:"ハンターボウ",magicStaff:"マジックスタッフ",steelDagger:"スチールダガー",ironHelmet:"鉄のヘルメット",steelChestplate:"スチール胸当て",leatherLeggings:"レザーレギンス",combatBoots:"コンバットブーツ",towerShield:"タワーシールド",healthPotion:"ヘルスポーション",energyBar:"エネルギーバー",mysteryScroll:"謎の巻物",healingHerb:"回復薬",energyCore:"エネルギーコア",ironSwordDesc:"標準的な鉄製の剣",battleAxeDesc:"強力な戦闘用斧",hunterBowDesc:"狩猟用の弓",magicStaffDesc:"魔法を増幅する杖",steelDaggerDesc:"軽量で素早い短剣",ironHelmetDesc:"鉄製の頭部防具",steelChestplateDesc:"スチール製の胸部防具",leatherLeggingsDesc:"レザー製の脚部防具",combatBootsDesc:"戦闘用ブーツ",towerShieldDesc:"大型の防御用盾",healthPotionDesc:"HP+30回復",energyBarDesc:"エネルギー+20回復",tutorialHealthPotion:"チュートリアル ポーション",tutorialHealthPotionDesc:"チュートリアル用の回復アイテム（HP+10回復）",tutorialSword:"チュートリアル ソード",tutorialSwordDesc:"チュートリアル用の練習剣（攻撃力+3）",mysteryScrollDesc:"ランダム効果",healingHerbDesc:"HP+15回復",energyCoreDesc:"エネルギー+50回復",weaponDescriptionFormat:"{{description}} (攻撃力: {{damage}})",armorDescriptionFormat:"{{description}} (防御力: {{defense}})",inventoryHeader:"=== インベントリ ===",currentEquipmentHeader:"=== 現在の装備 ===",usageInstructionsHeader:"=== 使用方法 ===",itemUsageInstructions:"数字キー(1-9)でアイテム使用/装備",itemUsageExample:"例: 1キー = [1]番目のアイテム",effectLabel:"効果",attackPowerEffect:"攻撃力+{{damage}}, 命中率+{{accuracy}}%",defenseEffect:"防御力+{{defense}}",totalDefense:"総防御力: {{total}}",rightHand:"右手",head:"頭",chest:"胸",legs:"脚",feet:"足",leftHand:"左手",noEquipment:"(装備なし)",pauseMenuTitle:"ポーズメニュー",continueGame:"ゲームを続ける",saveGame:"セーブ",loadGame:"ロード",languageSwitch:"言語切り替え",returnToTitle:"タイトルに戻る",descendingToFloor:"階層{{floor}}へ降りる...",cannotGoUp:"これ以上上には行けません。",returningToFloor:"階層{{floor}}へ戻る...",arrivedAtFloor:"階層{{floor}}に到着しました。",healthRestored:"HP+{{amount}}回復！",energyRestored:"エネルギー+{{amount}}回復！",itemCannotBeUsed:"{{item}}は使用できません。",weaponEquipped:"{{weapon}}を装備しました。",armorEquipped:"{{armor}}を装備しました。",cannotEquipWeapon:"武器を装備できませんでした。",cannotEquipArmor:"防具を装備できませんでした。",noEnemyInThatDirection:"そこには敵がいません。",movementMode:"移動モード",stairsAppeared:"次のフロアへの階段が現れました！ (Fキーで移動)",allFloorsCleared:"全フロアクリア！おめでとうございます！",welcomeToFacility:"ナイトシティ地下施設へようこそ。脱出を目指してください。",tutorialStarted:"チュートリアルを開始します。",tutorialComplete:"🎉 チュートリアル完了！ゲーム開始です！",settingsUnderDevelopment:"設定メニューは開発中です。",mysteryScrollHealth:"HP回復効果が発動！",mysteryScrollEnergy:"エネルギー回復効果が発動！",mysteryScrollScore:"スコアボーナス+50！",mysteryScrollMap:"マップ探索効果が発動！",tutorialWelcome:"ターミナル・ディセントへようこそ！WASDキーで移動してみましょう。",tutorialMovement:"よくできました！WASDで自由に移動できます。もう少し探索してみましょう。",tutorialCombat:"Spaceキーで攻撃モードに切り替えられます。試してみてください！",tutorialInventory:"Iキーでインベントリを開いて、アイテムを確認しましょう。",tutorialEquipment:"数字キー(1-9)でアイテムを使用できます。アイテムを使ってみましょう！",tutorialCompleted:"チュートリアル完了！すべての機能を覚えました。",tutorialProgressMovement:"✓ 移動をマスターしました！",tutorialProgressCombat:"✓ 次は戦闘システムを学びましょう。",tutorialProgressCombatComplete:"✓ 戦闘の基本を理解しました！",tutorialProgressInventory:"✓ インベントリの使い方を覚えました！",tutorialProgressEquipment:"✓ 装備システムも完璧です！",attackPowerLabel:"攻撃力",defenseLabel:"防御力",experienceLabel:"経験値",closeInstruction:"数字キー(1-9)でアイテム使用 | Iキーで閉じる",statusHeader:"=== ステータス ===",statusCloseInstruction:"Sキーで閉じる",equipmentHeader:"=== 装備 ===",equipmentStatsHeader:"=== 装備統計 ===",totalDefenseLabel:"総防御力",welcomeTitle:"ターミナル・ディセント",welcomeSubtitle:"ナイトシティ地下施設からの脱出劇",menuInstructions:"↑↓ または WS: 選択    Enter または F: 決定",prologueLines:["年は2087年。ナイトシティの地下研究施設で","あなたは目を覚ました。","","警備システムが暴走し、施設は封鎖された。","生き残るには地上への脱出しかない。","","装備を集め、敵を避け、10階層の地下から","脱出せよ。","","[Enterキーで開始]"],menuOptions:["[スタート] ゲームを開始","[チュートリアル] 操作を学ぶ","[設定] オプション設定"],emptyInventoryMessage:"インベントリが空です",weaponSlot:"武器",headSlot:"頭",chestSlot:"胸",legsSlot:"脚",feetSlot:"足",shieldSlot:"盾",noItem:"なし",gremlin:"グレムリン",goblin:"ゴブリン",orc:"オーク",troll:"トロル",takeoffHeader:"=== 装備を外す ===",takeoffInstruction:"外したい装備を選んでください",takeoffControls:"↑↓キー: 選択 | Enterキー: 外す | Tキー: 閉じる",noEquipmentToRemove:"外せる装備がありません。",weaponUnequipped:"{{weapon}}を外しました。",armorUnequipped:"{{armor}}を外しました。"},en:{gameTitle:"TERMINAL DESCENT",gameSubtitle:"DYSTOPIAN ROGUELIKE v1.0",controls:"Use WASD to move | Press F to interact | I for inventory | C for character | L for language | ESC for menu",welcome:"Welcome to Terminal Descent. Use WASD to move.",cannotMoveThere:"You cannot move there.",pickedUpItem:"You picked up ",nothingToInteract:"There is nothing here to interact with.",enemyAttacks:"The gremlin attacks you!",youDied:"You have died.",gameOver:"Game Over.",levelCleared:"Level cleared! You win!",gamePaused:"Game paused. Press ESC to resume.",gameResumed:"Game resumed.",menuNotImplemented:"Menu not implemented yet.",searchingForExit:"Terminal Descent initiated. Searching for exit...",languageSwitched:"Language switched.",playerAttacks:"You attack ",enemyDefeated:"You defeated ",attackModeOn:"Attack mode: Use arrow keys to select attack direction",attackModeOff:"Movement mode",noEnemyThere:"There is no enemy there.",attackMissed:"Your attack on {{enemy}} missed!",criticalHit:"Critical hit! {{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",normalHit:"{{enemy}} takes {{damage}} damage! HP: {{health}}/{{maxHealth}}",experienceGained:"Experience +{{exp}}",levelUp:"Level up! Lv.{{level}}",enemyAttackWithDefense:"{{enemy}} attacks! {{damage}} damage! (Defense -{{defense}}) HP: {{health}}/{{maxHealth}}",enemyAttackNormal:"{{enemy}} attacks! {{damage}} damage! HP: {{health}}/{{maxHealth}}",level:"Level",health:"Health",energy:"Energy",accessLevel:"Access",turn:"Turn",inventoryFull:"Inventory is full.",inventoryEmpty:"Your inventory is empty.",useItem:"You used ",pickedUpItemWithName:"You picked up {{item}}",cannotInteract:"There is nothing to interact with",invalidItem:"Invalid item.",noItemInSlot:"No item in slot {{slot}}.",ironSword:"Iron Sword",battleAxe:"Battle Axe",hunterBow:"Hunter Bow",magicStaff:"Magic Staff",steelDagger:"Steel Dagger",ironHelmet:"Iron Helmet",steelChestplate:"Steel Chestplate",leatherLeggings:"Leather Leggings",combatBoots:"Combat Boots",towerShield:"Tower Shield",healthPotion:"Health Potion",energyBar:"Energy Bar",mysteryScroll:"Mystery Scroll",healingHerb:"Healing Herb",energyCore:"Energy Core",ironSwordDesc:"A standard iron sword",battleAxeDesc:"A powerful battle axe",hunterBowDesc:"A bow for hunting",magicStaffDesc:"A staff that amplifies magic",steelDaggerDesc:"A light and fast dagger",ironHelmetDesc:"Iron head protection",steelChestplateDesc:"Steel chest protection",leatherLeggingsDesc:"Leather leg protection",combatBootsDesc:"Combat boots",towerShieldDesc:"Large defensive shield",healthPotionDesc:"Restores 30 HP",energyBarDesc:"Restores 20 energy",tutorialHealthPotion:"Tutorial Potion",tutorialHealthPotionDesc:"Tutorial healing item (Restores 10 HP)",tutorialSword:"Tutorial Sword",tutorialSwordDesc:"Tutorial practice sword (Attack +3)",mysteryScrollDesc:"Random effect",healingHerbDesc:"Restores 15 HP",energyCoreDesc:"Restores 50 energy",weaponDescriptionFormat:"{{description}} (Damage: {{damage}})",armorDescriptionFormat:"{{description}} (Defense: {{defense}})",inventoryHeader:"=== INVENTORY ===",currentEquipmentHeader:"=== CURRENT EQUIPMENT ===",usageInstructionsHeader:"=== USAGE ===",itemUsageInstructions:"Press number keys (1-9) to use/equip items",itemUsageExample:"Example: Key 1 = Item [1]",effectLabel:"Effect",attackPowerEffect:"Attack +{{damage}}, Accuracy +{{accuracy}}%",defenseEffect:"Defense +{{defense}}",totalDefense:"Total Defense: {{total}}",rightHand:"Right Hand",head:"Head",chest:"Chest",legs:"Legs",feet:"Feet",leftHand:"Left Hand",noEquipment:"(No equipment)",pauseMenuTitle:"Pause Menu",continueGame:"Continue",saveGame:"Save",loadGame:"Load",languageSwitch:"Language",returnToTitle:"Return to Title",descendingToFloor:"Descending to floor {{floor}}...",cannotGoUp:"Cannot go up any further.",returningToFloor:"Returning to floor {{floor}}...",arrivedAtFloor:"Arrived at floor {{floor}}.",healthRestored:"HP+{{amount}} restored!",energyRestored:"Energy+{{amount}} restored!",itemCannotBeUsed:"{{item}} cannot be used.",weaponEquipped:"{{weapon}} equipped.",armorEquipped:"{{armor}} equipped.",cannotEquipWeapon:"Cannot equip weapon.",cannotEquipArmor:"Cannot equip armor.",noEnemyInThatDirection:"No enemy there.",movementMode:"Movement mode",stairsAppeared:"Stairs to next floor appeared! (Press F to move)",allFloorsCleared:"All floors cleared! Congratulations!",welcomeToFacility:"Welcome to Night City underground facility. Aim for escape.",tutorialStarted:"Tutorial started.",tutorialComplete:"🎉 Tutorial complete! Game start!",settingsUnderDevelopment:"Settings menu is under development.",mysteryScrollHealth:"HP recovery effect activated!",mysteryScrollEnergy:"Energy recovery effect activated!",mysteryScrollScore:"Score bonus +50!",mysteryScrollMap:"Map exploration effect activated!",tutorialWelcome:"Welcome to Terminal Descent! Use WASD keys to move.",tutorialMovement:"Well done! You can move freely with WASD. Try exploring a bit more.",tutorialCombat:"You can switch to attack mode with Space key. Try it!",tutorialInventory:"Press I key to open inventory and check items.",tutorialEquipment:"Use number keys (1-9) to use items. Try using an item!",tutorialCompleted:"Tutorial complete! You have learned all functions.",tutorialProgressMovement:"✓ Movement mastered!",tutorialProgressCombat:"✓ Next, let's learn the combat system.",tutorialProgressCombatComplete:"✓ Combat basics understood!",tutorialProgressInventory:"✓ Inventory usage learned!",tutorialProgressEquipment:"✓ Equipment system perfect!",attackPowerLabel:"Attack Power",defenseLabel:"Defense",experienceLabel:"Experience",closeInstruction:"Press number keys (1-9) to use items | Press I to close",statusHeader:"=== STATUS ===",statusCloseInstruction:"Press S to close",equipmentHeader:"=== EQUIPMENT ===",equipmentStatsHeader:"=== EQUIPMENT STATS ===",totalDefenseLabel:"Total Defense",welcomeTitle:"TERMINAL DESCENT",welcomeSubtitle:"Escape from Night City underground facility",menuInstructions:"↑↓ or WS: Select    Enter or F: Confirm",prologueLines:["The year is 2087. In an underground research facility","in Night City, you wake up.","","Security systems have gone haywire, and the facility is sealed.","To survive, you must escape to the surface.","","Gather equipment, avoid enemies, and escape from","10 underground levels.","","[Press Enter to start]"],menuOptions:["[Start] Begin game","[Tutorial] Learn controls","[Settings] Options"],emptyInventoryMessage:"Inventory is empty",weaponSlot:"Weapon",headSlot:"Head",chestSlot:"Chest",legsSlot:"Legs",feetSlot:"Feet",shieldSlot:"Shield",noItem:"None",gremlin:"Gremlin",goblin:"Goblin",orc:"Orc",troll:"Troll",takeoffHeader:"=== Remove Equipment ===",takeoffInstruction:"Select equipment to remove",takeoffControls:"↑↓ keys: Select | Enter: Remove | T key: Close",noEquipmentToRemove:"No equipment to remove.",weaponUnequipped:"{{weapon}} unequipped.",armorUnequipped:"{{armor}} unequipped."}};class O{currentLanguage="ja";setLanguage(e){this.currentLanguage=e}getCurrentLanguage(){return this.currentLanguage}getMessage(e){return E[this.currentLanguage][e]}getMessages(){return E[this.currentLanguage]}}const C=new O,n=l=>{const e=C.getMessage(l);return Array.isArray(e)?e.join(`
`):e},P=l=>{const e=C.getMessage(l);return Array.isArray(e)?e:[e]};function d(l){return l.nameKey?n(l.nameKey):l.name}function _(l){if(l.descriptionKey){const e=n(l.descriptionKey);return l.itemType==="weapon"&&l.descriptionParams?.damage!==void 0?n("weaponDescriptionFormat").replace("{{description}}",e).replace("{{damage}}",String(l.descriptionParams.damage)):l.itemType==="armor"&&l.descriptionParams?.defense!==void 0?n("armorDescriptionFormat").replace("{{description}}",e).replace("{{defense}}",String(l.descriptionParams.defense)):e}return l.description}function N(l){const e=l.equipment;return{weapon:e.mainHand?d(e.mainHand):n("noItem"),head:e.head?d(e.head):n("noItem"),chest:e.chest?d(e.chest):n("noItem"),legs:e.legs?d(e.legs):n("noItem"),feet:e.feet?d(e.feet):n("noItem"),shield:e.offHand?d(e.offHand):n("noItem")}}function L(l){let e=0;return["head","chest","legs","feet","offHand"].forEach(a=>{const s=l.equipment[a];s&&"defense"in s&&(e+=s.defense)}),e}function K(l){const t=l.equipment.mainHand;return 10+(t&&"damage"in t?t.damage:0)}function A(l){const e=L(l),t=K(l),a=Object.values(l.equipment).filter(s=>s!==void 0).length;return{totalDefense:e,attackPower:t,equipmentCount:a}}function $(l){return"key"in l}function U(l){if(typeof l=="string")return l;if($(l)){let e=n(l.key);return l.params&&Object.entries(l.params).forEach(([t,a])=>{const s=`{{${t}}}`;e=e.replace(s,String(a))}),e}else return l.text}function g(l,e){const t={key:l,timestamp:Date.now()};return e&&(t.params=e),t}function H(l){return{text:l,timestamp:Date.now()}}function b(){return Math.random().toString(36).substring(2)+Date.now().toString(36)}function y(l,e){return l.x>=0&&l.x<e.width&&l.y>=0&&l.y<e.height}function G(l){switch(l){case"north":return{x:0,y:-1};case"south":return{x:0,y:1};case"east":return{x:1,y:0};case"west":return{x:-1,y:0}}}function W(l,e){return{x:l.x+e.x,y:l.y+e.y}}function v(l,e){return Math.floor(Math.random()*(e-l+1))+l}function T(l){return l[Math.floor(Math.random()*l.length)]}function w(l){const t={g:"gremlin",G:"goblin",o:"orc",T:"troll"}[l.char];return t?n(t):l.char}class V{player;constructor(e){this.player=this.createPlayer(e)}createPlayer(e){return{id:b(),position:{...e},char:"@",color:"#00ff00",type:"player",blocking:!0,visible:!0,level:1,experience:0,experienceToNext:100,health:100,maxHealth:100,energy:100,maxEnergy:100,accessLevel:1,inventory:[],equipment:{}}}getPlayer(){return{...this.player}}getPlayerDirect(){return this.player}getPosition(){return{...this.player.position}}setPosition(e){this.player.position={...e}}move(e){const t=G(e);return W(this.player.position,t)}confirmMove(e){this.player.position={...e}}takeDamage(e){this.player.health=Math.max(0,this.player.health-e)}heal(e){this.player.health=Math.min(this.player.maxHealth,this.player.health+e)}useEnergy(e){return this.player.energy>=e?(this.player.energy-=e,!0):!1}restoreEnergy(e){this.player.energy=Math.min(this.player.maxEnergy,this.player.energy+e)}isAlive(){return this.player.health>0}isDead(){return this.player.health<=0}addItem(e){if(e.stackable){const t=this.player.inventory.find(a=>a.name===e.name&&a.itemType===e.itemType);if(t)return t.quantity+=e.quantity,!0}return this.player.inventory.length<20?(this.player.inventory.push({...e}),!0):!1}removeItem(e,t=1){const a=this.player.inventory.findIndex(i=>i.id===e);if(a===-1)return null;const s=this.player.inventory[a];return s.quantity<=t?(this.player.inventory.splice(a,1),s):(s.quantity-=t,{...s,id:b(),quantity:t})}getInventory(){return[...this.player.inventory]}findItem(e){return this.player.inventory.find(a=>a.id===e)||null}hasItem(e){return this.player.inventory.some(t=>t.id===e)}calculateExperienceToNext(e){return Math.floor(100*Math.pow(1.5,e-1))}addExperience(e){this.player.experience+=e;let t=!1;for(;this.player.experience>=this.player.experienceToNext;)this.player.experience-=this.player.experienceToNext,this.levelUp(),t=!0;return t}levelUp(){this.player.level++,this.player.experienceToNext=this.calculateExperienceToNext(this.player.level),this.player.maxHealth+=10,this.player.maxEnergy+=5,this.player.health=this.player.maxHealth,this.player.energy=this.player.maxEnergy}increaseAccessLevel(){this.player.accessLevel++}getStats(){return{level:this.player.level,experience:this.player.experience,experienceToNext:this.player.experienceToNext,experienceProgress:Math.floor(this.player.experience/this.player.experienceToNext*100),health:this.player.health,maxHealth:this.player.maxHealth,energy:this.player.energy,maxEnergy:this.player.maxEnergy,accessLevel:this.player.accessLevel,inventoryCount:this.player.inventory.length}}serialize(){return JSON.stringify(this.player)}deserialize(e){try{const t=JSON.parse(e);if(typeof t.level=="number"&&typeof t.health=="number"&&typeof t.maxHealth=="number"&&typeof t.position=="object"&&typeof t.position.x=="number"&&typeof t.position.y=="number")this.player={...t};else throw new Error("Invalid player data format")}catch(t){console.error("Failed to deserialize player data:",t),this.player=this.createPlayer({x:0,y:0})}}reset(e){this.player=this.createPlayer(e)}equipWeapon(e){return this.player.equipment.mainHand&&this.addItem(this.player.equipment.mainHand),this.player.equipment.mainHand=e,!0}unequipWeapon(){const e=this.player.equipment.mainHand;return e?(delete this.player.equipment.mainHand,e):null}getEquippedWeapon(){return this.player.equipment.mainHand||null}equipArmor(e){const t=e.slot;if(t==="mainHand"||t==="accessory")return!1;const a=this.player.equipment[t];return a&&this.addItem(a),this.player.equipment[t]=e,!0}unequipArmor(e){if(e==="mainHand"||e==="accessory")return null;const t=this.player.equipment[e];return t?(delete this.player.equipment[e],t):null}getEquippedArmor(e){return e==="mainHand"||e==="accessory"?null:this.player.equipment[e]||null}getTotalDefense(){let e=0;const t=["offHand","head","chest","legs","feet"];for(const a of t){const s=this.getEquippedArmor(a);s&&(e+=s.defense)}return e}getAttackDamage(){const e=this.player.equipment.mainHand,t=10;return e?t+e.damage:t}getAttackAccuracy(){const e=this.player.equipment.mainHand,t=80;return e?Math.min(95,t+e.accuracy):t}getCriticalChance(){const e=this.player.equipment.mainHand,t=5;return e?Math.min(50,t+e.criticalChance):t}rollAttackHit(){const e=this.getAttackAccuracy();return Math.random()*100<e}rollCriticalHit(){const e=this.getCriticalChance();return Math.random()*100<e}rollDamage(){const e=this.getAttackDamage(),t=this.rollCriticalHit();return{damage:t?Math.floor(e*1.5):e,isCritical:t}}}class k{dimensions;level;constructor(e,t=1){this.dimensions=e,this.level=t}generate(e){const t=this.createEmptyTiles(),a=this.generateRooms();if(a.forEach(i=>this.carveRoom(t,i)),this.connectRooms(t,a),a.length>0){const i=a[0];e.position={x:i.position.x+Math.floor(i.dimensions.width/2),y:i.position.y+Math.floor(i.dimensions.height/2)},console.log(`Player placed at (${e.position.x},${e.position.y}) in room at (${i.position.x},${i.position.y})`),console.log(`Generated ${a.length} rooms`)}else console.error("No rooms generated! Player will be stuck in walls.");const s=this.generateEntities(a,e.position);return s.push(e),{level:this.level,dimensions:this.dimensions,tiles:t,rooms:a,entities:s,player:e}}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let a=0;a<this.dimensions.width;a++)e[t][a]=this.createWallTile({x:a,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}generateRooms(){const e=[];for(let o=0;o<50&&e.length<8;o++){const r=v(4,10),c=v(4,10),h=v(1,this.dimensions.width-r-1),p=v(1,this.dimensions.height-c-1),u={position:{x:h,y:p},dimensions:{width:r,height:c},tiles:[],connected:!1};e.some(f=>this.roomsOverlap(u,f))||e.push(u)}return e}roomsOverlap(e,t){return!(e.position.x+e.dimensions.width+1<t.position.x||t.position.x+t.dimensions.width+1<e.position.x||e.position.y+e.dimensions.height+1<t.position.y||t.position.y+t.dimensions.height+1<e.position.y)}carveRoom(e,t){for(let a=t.position.y;a<t.position.y+t.dimensions.height;a++)for(let s=t.position.x;s<t.position.x+t.dimensions.width;s++)y({x:s,y:a},this.dimensions)&&(e[a][s]=this.createFloorTile({x:s,y:a}))}connectRooms(e,t){if(t.length<2)return;for(let s=0;s<t.length-1;s++){const i=t[s],o=t[s+1];this.createCorridor(e,i,o),i.connected=!0,o.connected=!0}const a=Math.floor(t.length/3);for(let s=0;s<a;s++){const i=T(t),o=T(t);i!==o&&this.createCorridor(e,i,o)}}createCorridor(e,t,a){const s={x:t.position.x+Math.floor(t.dimensions.width/2),y:t.position.y+Math.floor(t.dimensions.height/2)},i={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};v(0,1)===0?(this.carveHorizontalCorridor(e,s.x,i.x,s.y),this.carveVerticalCorridor(e,i.x,s.y,i.y)):(this.carveVerticalCorridor(e,s.x,s.y,i.y),this.carveHorizontalCorridor(e,s.x,i.x,i.y))}carveHorizontalCorridor(e,t,a,s){const i=Math.min(t,a),o=Math.max(t,a);for(let r=i;r<=o;r++)y({x:r,y:s},this.dimensions)&&(e[s][r]=this.createFloorTile({x:r,y:s}))}carveVerticalCorridor(e,t,a,s){const i=Math.min(a,s),o=Math.max(a,s);for(let r=i;r<=o;r++)y({x:t,y:r},this.dimensions)&&(e[r][t]=this.createFloorTile({x:t,y:r}))}generateEntities(e,t){const a=[],s=e.slice(1);s.forEach(h=>{const p=Math.min(.3+this.level*.05,.7);if(Math.random()<p){const m=this.createEnemy(h);a.push(m)}const u=Math.min(.2+this.level*.02,.4);if(Math.random()<u){const m=this.createItem(h);a.push(m)}});const i=a.filter(h=>h.type==="enemy").length,o=Math.max(1,Math.floor(s.length/3));if(i<o){const h=s.filter(u=>!a.some(m=>m.type==="enemy"&&m.position.x>=u.position.x&&m.position.x<u.position.x+u.dimensions.width&&m.position.y>=u.position.y&&m.position.y<u.position.y+u.dimensions.height)),p=o-i;for(let u=0;u<p&&u<h.length;u++){const m=h[u],f=this.createEnemy(m);a.push(f)}}const r=a.filter(h=>h.type==="item").length,c=Math.max(1,Math.floor(s.length/4));if(r<c){const h=s.filter(u=>!a.some(m=>m.type==="item"&&m.position.x>=u.position.x&&m.position.x<u.position.x+u.dimensions.width&&m.position.y>=u.position.y&&m.position.y<u.position.y+u.dimensions.height)),p=c-r;for(let u=0;u<p&&u<h.length;u++){const m=h[u],f=this.createItem(m);a.push(f)}}return a}createEnemy(e){const t=v(e.position.x+1,e.position.x+e.dimensions.width-2),a=v(e.position.y+1,e.position.y+e.dimensions.height-2),s=20,i=5,o=Math.floor(this.level*1.5),r=Math.floor(this.level*.8),c=s+o,h=i+r,p=this.getEnemyTypes(),u=T(p);return{id:`enemy_${Date.now()}_${Math.random()}`,position:{x:t,y:a},char:u.char,color:u.color,type:"enemy",blocking:!0,visible:!0,health:c,maxHealth:c,damage:h,aiType:"aggressive"}}getEnemyTypes(){const e=[{char:"G",color:"#ff4444",name:"Gremlin"},{char:"R",color:"#8b4513",name:"Rat"},{char:"S",color:"#32cd32",name:"Slime"}],t=[{char:"O",color:"#ff6600",name:"Orc"},{char:"T",color:"#daa520",name:"Troll"},{char:"W",color:"#483d8b",name:"Wraith"}],a=[{char:"D",color:"#dc143c",name:"Dragon"},{char:"L",color:"#8b008b",name:"Lich"},{char:"M",color:"#ff1493",name:"Minotaur"}];return this.level<=3?e:this.level<=6?[...e,...t]:[...e,...t,...a]}createItem(e){const t=v(e.position.x+1,e.position.x+e.dimensions.width-2),a=v(e.position.y+1,e.position.y+e.dimensions.height-2),s=Math.random();return s<.25?this.createWeapon(t,a):s<.45?this.createArmor(t,a):this.createConsumable(t,a)}createWeapon(e,t){const a=[{char:")",color:"#cccccc",nameKey:"ironSword",descKey:"ironSwordDesc",weaponType:"sword",damage:8+Math.floor(this.level*1.2),accuracy:10,criticalChance:5,range:1},{char:"/",color:"#8b4513",nameKey:"battleAxe",descKey:"battleAxeDesc",weaponType:"axe",damage:12+Math.floor(this.level*1.5),accuracy:5,criticalChance:8,range:1},{char:"}",color:"#654321",nameKey:"hunterBow",descKey:"hunterBowDesc",weaponType:"bow",damage:6+Math.floor(this.level*1),accuracy:15,criticalChance:10,range:3},{char:"\\",color:"#4b0082",nameKey:"magicStaff",descKey:"magicStaffDesc",weaponType:"staff",damage:5+Math.floor(this.level*.8),accuracy:12,criticalChance:3,range:2},{char:"-",color:"#a9a9a9",nameKey:"steelDagger",descKey:"steelDaggerDesc",weaponType:"dagger",damage:4+Math.floor(this.level*.7),accuracy:20,criticalChance:15,range:1}],s=T(a);let i;return this.level>=3&&Math.random()<.3&&(i={type:T(["fire","ice","poison","stun","vampire"]),chance:15+Math.floor(this.level*2),value:Math.floor(this.level*1.5)}),{id:b(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:n(s.nameKey),nameKey:s.nameKey,description:`${n(s.descKey)} (攻撃力: ${s.damage})`,descriptionKey:s.descKey,descriptionParams:{damage:s.damage},stackable:!1,quantity:1,itemType:"weapon",weaponType:s.weaponType,damage:s.damage,accuracy:s.accuracy,criticalChance:s.criticalChance,range:s.range,...i&&{special:i}}}createArmor(e,t){const a=[{char:"[",color:"#8b4513",nameKey:"ironHelmet",descKey:"ironHelmetDesc",armorType:"helmet",slot:"head",defense:3+Math.floor(this.level*.8)},{char:"]",color:"#c0c0c0",nameKey:"steelChestplate",descKey:"steelChestplateDesc",armorType:"chestplate",slot:"chest",defense:5+Math.floor(this.level*1.2)},{char:"{",color:"#a0522d",nameKey:"leatherLeggings",descKey:"leatherLeggingsDesc",armorType:"leggings",slot:"legs",defense:4+Math.floor(this.level*1)},{char:"(",color:"#654321",nameKey:"combatBoots",descKey:"combatBootsDesc",armorType:"boots",slot:"feet",defense:2+Math.floor(this.level*.6)},{char:"&",color:"#8b7355",nameKey:"towerShield",descKey:"towerShieldDesc",armorType:"shield",slot:"offHand",defense:6+Math.floor(this.level*1.5)}],s=T(a),i=50+Math.floor(this.level*10);return{id:b(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:n(s.nameKey),nameKey:s.nameKey,description:`${n(s.descKey)} (防御力: ${s.defense})`,descriptionKey:s.descKey,descriptionParams:{defense:s.defense},stackable:!1,quantity:1,itemType:"armor",armorType:s.armorType,defense:s.defense,durability:i,maxDurability:i,slot:s.slot}}createConsumable(e,t){const s=T([{char:"!",color:"#ffff00",nameKey:"healthPotion",descKey:"healthPotionDesc"},{char:"%",color:"#ff8800",nameKey:"energyBar",descKey:"energyBarDesc"},{char:"?",color:"#8800ff",nameKey:"mysteryScroll",descKey:"mysteryScrollDesc"},{char:"+",color:"#00ffff",nameKey:"healingHerb",descKey:"healingHerbDesc"},{char:"*",color:"#ff00ff",nameKey:"energyCore",descKey:"energyCoreDesc"}]);return{id:b(),position:{x:e,y:t},char:s.char,color:s.color,type:"item",blocking:!1,visible:!0,name:n(s.nameKey),nameKey:s.nameKey,description:n(s.descKey),descriptionKey:s.descKey,stackable:!0,quantity:1,itemType:"consumable"}}static updateFieldOfView(e,t,a=8){for(let s=0;s<e.dimensions.height;s++)for(let i=0;i<e.dimensions.width;i++)e.tiles[s][i].visible=!1;for(let s=-a;s<=a;s++)for(let i=-a;i<=a;i++){const o=t.x+i,r=t.y+s;if(y({x:o,y:r},e.dimensions)&&Math.sqrt(i*i+s*s)<=a){const h=e.tiles[r][o];h.visible=!0,h.explored=!0}}}}const S={MAP_DIMENSIONS:{width:72,height:30},ROOM_DIMENSIONS:{width:8,height:6,spacing:12},getWelcomeRoomPosition(){return{x:2,y:Math.floor(this.MAP_DIMENSIONS.height/2)-Math.floor(this.ROOM_DIMENSIONS.height/2)}},getMovementTargetPosition(){const l=this.getWelcomeRoomPosition(),e={x:l.x+Math.floor(this.ROOM_DIMENSIONS.width/2),y:l.y+Math.floor(this.ROOM_DIMENSIONS.height/2)};return console.log("TUTORIAL_CONSTANTS.getMovementTargetPosition:",{roomPos:l,targetPos:e,roomDimensions:this.ROOM_DIMENSIONS}),e},getPlayerStartPosition(){const l=this.getWelcomeRoomPosition();return{x:l.x+2,y:l.y+2}}};class B{stepOrder=["step_movement","step_item_pickup","step_equipment","step_combat","step_character_status"];roomTypeMapping={step_movement:"movement",step_item_pickup:"movement",step_equipment:"equipment",step_combat:"combat",step_character_status:"inventory"};getSteps(){const e=this.getStepDefinitions();return this.stepOrder.map((t,a)=>{const s=e[t];if(!s)throw new Error(`Step definition not found for: ${t}`);return{...s,nextStepId:this.getNextStepId(t)}})}getNextStepId(e){const t=this.stepOrder.indexOf(e);if(!(t===-1||t===this.stepOrder.length-1))return this.stepOrder[t+1]}getStepIndex(e){return this.stepOrder.indexOf(e)}getPreviousStepId(e){return e<=0?"welcome":this.stepOrder[e-1]}getRoomTypeForStep(e){return this.roomTypeMapping[e]||e.replace("step_","")}getRoomLayoutOrder(){const e=["welcome"],t=new Set(["welcome"]);for(const a of this.stepOrder){const s=this.getRoomTypeForStep(a);t.has(s)||(e.push(s),t.add(s))}return e}getTotalSteps(){return this.stepOrder.length}getStepDefinitions(){return{step_movement:{id:"step_movement",title:"移動の練習",description:"WASDキーで移動してみてください。緑色の目標地点まで移動してください。",targetAction:"move",completionCondition:e=>{const t=S.getMovementTargetPosition(),a=e.player.position;return a.x===t.x&&a.y===t.y},isCompleted:!1,targetPosition:S.getMovementTargetPosition(),blockedActions:["attack","inventory","character_status"]},step_item_pickup:{id:"step_item_pickup",title:"アイテムの取得と使用",description:"Fキーでアイテムを取得し、Iキーでインベントリを開いて数字キーで使用してください。",targetAction:"pickup_item",completionCondition:e=>!1,isCompleted:!1,requiredItems:["health_potion"],blockedActions:["attack","character_status"]},step_equipment:{id:"step_equipment",title:"装備の着脱",description:"Eキーで装備を着脱してみてください。装備→外す→再装備の3回操作すると扉が開きます。",targetAction:"equipment",completionCondition:e=>!1,isCompleted:!1,blockedActions:["attack"]},step_combat:{id:"step_combat",title:"戦闘の基本",description:"Spaceキーで攻撃モードに入り、WASDで攻撃してみてください。",targetAction:"combat",completionCondition:e=>!1,isCompleted:!1,blockedActions:["inventory"]},step_character_status:{id:"step_character_status",title:"ステータスの確認",description:"Cキーでステータス画面を確認してみてください。",targetAction:"character_status",completionCondition:e=>!1,isCompleted:!1,blockedActions:[]}}}}const I=new B;class q{dimensions;constructor(e=S.MAP_DIMENSIONS){this.dimensions=e}generate(e){const t=this.createEmptyTiles(),a=this.generateTutorialRooms();if(a.forEach(i=>this.carveRoom(t,i)),this.connectRoomsLinear(t,a),a.length>0){const i=S.getPlayerStartPosition();e.position={...i},console.log(`Player positioned at (${i.x}, ${i.y}) using TUTORIAL_CONSTANTS`)}const s=this.generateTutorialEntities(a);return s.push(e),{level:0,dimensions:this.dimensions,tiles:t,rooms:a,entities:s,player:e}}createEmptyTiles(){const e=[];for(let t=0;t<this.dimensions.height;t++){e[t]=[];for(let a=0;a<this.dimensions.width;a++)e[t][a]=this.createWallTile({x:a,y:t})}return e}createWallTile(e){return{position:{...e},type:"wall",char:"#",color:"#444444",backgroundColor:"#000000",blocking:!0,explored:!1,visible:!1}}createFloorTile(e){return{position:{...e},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1}}createDoorTile(e,t=!1){return{position:{...e},type:"door",char:t?" ":"|",color:t?"#666666":"#ff8800",backgroundColor:"#000000",blocking:!t,explored:!1,visible:!1}}generateTutorialRooms(){const e=[],{width:t,height:a,spacing:s}=S.ROOM_DIMENSIONS;return I.getRoomLayoutOrder().forEach((o,r)=>{let c,h;if(r===0){const u=S.getWelcomeRoomPosition();c=u.x,h=u.y,console.log(`Welcome room positioned at (${c}, ${h}) using TUTORIAL_CONSTANTS`)}else{const u=S.getWelcomeRoomPosition();c=u.x+r*s,h=u.y,console.log(`Room ${r} positioned at (${c}, ${h}) relative to welcome room`)}const p={position:{x:c,y:h},dimensions:{width:t,height:a},tiles:[],connected:!1,tutorialStep:o};e.push(p)}),e}carveRoom(e,t){for(let a=t.position.y;a<t.position.y+t.dimensions.height;a++)for(let s=t.position.x;s<t.position.x+t.dimensions.width;s++)y({x:s,y:a},this.dimensions)&&(e[a][s]=this.createFloorTile({x:s,y:a}))}connectRoomsLinear(e,t){for(let a=0;a<t.length-1;a++){const s=t[a],i=t[a+1],o=s.position.x+s.dimensions.width,r=i.position.x,c=s.position.y+Math.floor(s.dimensions.height/2);for(let u=o;u<r;u++)y({x:u,y:c},this.dimensions)&&(e[c][u]=this.createFloorTile({x:u,y:c}));const h=i.position.x-1,p=c;y({x:h,y:p},this.dimensions)&&(e[p][h]=this.createDoorTile({x:h,y:p},!1)),s.connected=!0}t.length>0&&(t[t.length-1].connected=!0)}generateTutorialEntities(e){const t=[];return e.forEach((a,s)=>{if(a.tutorialStep)switch(a.tutorialStep){case"movement":t.push(this.createTutorialItem(a,"health-potion"));break;case"combat":t.push(this.createTutorialEnemy(a));break;case"inventory":t.push(this.createTutorialItem(a,"health-potion"));break;case"equipment":t.push(this.createTutorialItem(a,"weapon"));break}}),t}createTutorialEnemy(e){const t=e.position.x+Math.floor(e.dimensions.width/2),a=e.position.y+Math.floor(e.dimensions.height/2);return{id:b(),position:{x:t,y:a},char:"g",color:"#ff4444",type:"enemy",blocking:!0,visible:!0,health:10,maxHealth:10,damage:2,aiType:"passive"}}createTutorialItem(e,t){const a=e.position.x+Math.floor(e.dimensions.width/2),s=e.position.y+Math.floor(e.dimensions.height/2),i={id:b(),position:{x:a,y:s},type:"item",blocking:!1,visible:!0,stackable:!0,quantity:1,itemType:"consumable"};switch(t){case"health-potion":return{...i,char:"!",color:"#ff0000",name:"チュートリアル回復薬",description:"HP回復の練習用",stackable:!0,quantity:1,itemType:"consumable"};case"weapon":return{...i,char:"/",color:"#ffff00",name:"トレーニング剣",description:"装備練習用の木剣",stackable:!1,quantity:1,itemType:"weapon",damage:3};default:return{...i,char:"?",color:"#ffffff",name:"チュートリアルアイテム",description:"練習用アイテム"}}}getRoomByStep(e,t){return e.find(a=>a.tutorialStep===t)}openDoorToNextRoom(e,t,a){const s=a.position.x-1,i=t.position.y+Math.floor(t.dimensions.height/2);y({x:s,y:i},this.dimensions)&&(e[i][s]=this.createDoorTile({x:s,y:i},!0))}}class Y{data;generator;tutorialGenerator;constructor(){this.data={floors:new Map,currentFloor:1,maxFloor:1},this.generator=new k({width:80,height:50},1),this.tutorialGenerator=new q}getDungeonData(){return{floors:new Map(this.data.floors),currentFloor:this.data.currentFloor,maxFloor:this.data.maxFloor}}getCurrentDungeon(){return this.data.floors.get(this.data.currentFloor)}generateTutorialDungeon(e){const t=this.tutorialGenerator.generate(e);return this.data.floors.set(0,t),this.data.currentFloor=0,t}generateInitialFloor(e){this.generator=new k({width:80,height:50},1);const t=this.generator.generate(e);if(t.rooms.length>0){const a=t.rooms[t.rooms.length-1];t.stairsDown={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};const s=t.stairsDown;t.tiles[s.y]&&t.tiles[s.y][s.x]&&(t.tiles[s.y][s.x]={position:{...s},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}return this.data.floors.set(1,t),this.data.currentFloor=1,this.data.maxFloor=1,t}moveToFloor(e,t){if(!this.data.floors.has(e)){this.generator=new k({width:80,height:50},e);const i=this.generator.generate(t);if(e>1&&i.rooms.length>0){const o=i.rooms[0];i.stairsUp={x:o.position.x+Math.floor(o.dimensions.width/2),y:o.position.y+Math.floor(o.dimensions.height/2)};const r=i.stairsUp;i.tiles[r.y]&&i.tiles[r.y][r.x]&&(i.tiles[r.y][r.x]={position:{...r},type:"stairs",char:"<",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}if(e<10&&i.rooms.length>0){const o=i.rooms[i.rooms.length-1];i.stairsDown={x:o.position.x+Math.floor(o.dimensions.width/2),y:o.position.y+Math.floor(o.dimensions.height/2)};const r=i.stairsDown;i.tiles[r.y]&&i.tiles[r.y][r.x]&&(i.tiles[r.y][r.x]={position:{...r},type:"stairs",char:">",color:"#ffff00",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1})}this.data.floors.set(e,i),e>this.data.maxFloor&&(this.data.maxFloor=e)}const a=this.data.floors.get(e),s=this.data.currentFloor;if(this.data.currentFloor=e,e>s&&a.stairsUp?t.position={...a.stairsUp}:e<s&&a.stairsDown&&(t.position={...a.stairsDown}),t.position){const i=a.tiles[t.position.y]?.[t.position.x];(!i||i.blocking)&&(t.position=this.findNearestValidPosition(a,t.position))}return a}findNearestValidPosition(e,t){for(let a=1;a<=5;a++)for(let s=-a;s<=a;s++)for(let i=-a;i<=a;i++){if(Math.abs(s)!==a&&Math.abs(i)!==a)continue;const o={x:t.x+s,y:t.y+i};if(o.x<0||o.x>=e.dimensions.width||o.y<0||o.y>=e.dimensions.height)continue;const r=e.tiles[o.y]?.[o.x];if(r&&!r.blocking)return o}return t}hasStairsAt(e){const t=this.getCurrentDungeon();return t?t.stairsUp&&t.stairsUp.x===e.x&&t.stairsUp.y===e.y?"up":t.stairsDown&&t.stairsDown.x===e.x&&t.stairsDown.y===e.y?"down":null:null}getCurrentFloor(){return this.data.currentFloor}getMaxFloor(){return this.data.maxFloor}saveDungeonState(e){this.data.floors.set(this.data.currentFloor,{...e})}}class x{constructor(e,t,a,s,i,o,r,c){this.gameState=e,this.playerController=t,this.addMessage=a,this.processTurn=s,this.updateTutorialProgress=i,this.equipItem=o,this.getCurrentEquipmentDisplay=r,this.addMessages=c}static ITEM_EFFECTS={HEALTH_POTION:30,HEALING_HERB:15,ENERGY_BAR:20,ENERGY_CORE:50,MYSTERY_SCROLL_HEALTH:20,MYSTERY_SCROLL_ENERGY:30,MYSTERY_SCROLL_SCORE:50};showInventory(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.playerController.getPlayer().inventory,t=[];t.push(n("inventoryHeader")),e.length===0?t.push(n("inventoryEmpty")):e.forEach((a,s)=>{const i=d(a),o=_(a);if(t.push(`[${s+1}] ${a.char} ${i} x${a.quantity}`),t.push(`     ${o}`),a.itemType==="weapon"){const r=a,c=n("attackPowerEffect").replace("{{damage}}",String(r.damage)).replace("{{accuracy}}",String(r.accuracy));t.push(`      ${n("effectLabel")}: ${c}`)}else if(a.itemType==="armor"){const r=a,c=n("defenseEffect").replace("{{defense}}",String(r.defense));t.push(`      ${n("effectLabel")}: ${c}`)}}),this.getCurrentEquipmentDisplay&&(t.push(""),t.push(n("currentEquipmentHeader")),this.getCurrentEquipmentDisplay().forEach(s=>{t.push(s)})),t.push(""),t.push(n("usageInstructionsHeader")),t.push(n("itemUsageInstructions")),t.push(n("itemUsageExample")),this.addMessages?this.addMessages(t):t.forEach(a=>this.addMessage(a)),this.gameState.status==="tutorial"&&this.updateTutorialProgress("inventory")}useItem(e){return this.useItemInternal(e,!0)}useItemInternal(e,t){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return!1;const a=this.playerController.getPlayer().inventory;if(e<0||e>=a.length)return this.addMessage(g("noItemInSlot",{slot:(e+1).toString()})),!1;const s=a[e],i=this.applyItemEffect(s);return i&&(this.playerController.removeItem(s.id,1),t&&this.processTurn()),i}applyItemEffect(e){if(!e)return this.addMessage(g("invalidItem")),!1;if(!e.char)return this.addMessage(g("itemCannotBeUsed",{item:d(e)})),!1;if(e.itemType==="weapon"||e.itemType==="armor")if(this.equipItem){const t=this.equipItem(e);return t&&this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment"),t}else return this.addMessage(g("itemCannotBeUsed",{item:d(e)})),!1;switch(e.char){case"!":return this.playerController.heal(x.ITEM_EFFECTS.HEALTH_POTION),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${d(e)}${n("useItem")} ${n("healthRestored").replace("{{amount}}",x.ITEM_EFFECTS.HEALTH_POTION.toString())}`),this.gameState.status==="tutorial"&&this.updateTutorialProgress("equipment"),!0;case"+":return this.playerController.heal(x.ITEM_EFFECTS.HEALING_HERB),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,this.addMessage(`${d(e)}${n("useItem")} ${n("healthRestored").replace("{{amount}}",x.ITEM_EFFECTS.HEALING_HERB.toString())}`),!0;case"%":return this.playerController.restoreEnergy(x.ITEM_EFFECTS.ENERGY_BAR),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${d(e)}${n("useItem")} ${n("energyRestored").replace("{{amount}}",x.ITEM_EFFECTS.ENERGY_BAR.toString())}`),!0;case"*":return this.playerController.restoreEnergy(x.ITEM_EFFECTS.ENERGY_CORE),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,this.addMessage(`${d(e)}${n("useItem")} ${n("energyRestored").replace("{{amount}}",x.ITEM_EFFECTS.ENERGY_CORE.toString())}`),!0;case"?":const t=[()=>(this.playerController.heal(x.ITEM_EFFECTS.MYSTERY_SCROLL_HEALTH),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health,n("mysteryScrollHealth")),()=>(this.playerController.restoreEnergy(x.ITEM_EFFECTS.MYSTERY_SCROLL_ENERGY),this.gameState.player.energy=this.playerController.getPlayer().energy,this.gameState.currentDungeon.player.energy=this.gameState.player.energy,n("mysteryScrollEnergy")),()=>(this.gameState.score+=x.ITEM_EFFECTS.MYSTERY_SCROLL_SCORE,n("mysteryScrollScore")),()=>{const i=this.gameState.currentDungeon;for(let o=0;o<i.dimensions.height;o++)for(let r=0;r<i.dimensions.width;r++)Math.random()<.3&&(i.tiles[o][r].explored=!0);return n("mysteryScrollMap")}],a=t[Math.floor(Math.random()*t.length)],s=a();return this.addMessage(`${d(e)}${n("useItem")} ${s}`),!0;default:return this.addMessage(g("itemCannotBeUsed",{item:d(e)})),!1}}addMessagesIndividually(e){e.forEach(t=>this.addMessage(t))}}class z{constructor(e,t,a,s,i){this.gameState=e,this.playerController=t,this.useItemCallback=a,this.removeEquipmentCallback=s,this.addMessage=i}toggleInventoryOverlay(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.gameState.overlay.type==="inventory"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showInventoryOverlay())}toggleStatusOverlay(){this.gameState.status==="playing"&&(this.gameState.overlay.type==="character"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showStatusOverlay())}toggleTakeoffOverlay(){this.gameState.status==="playing"&&(this.gameState.overlay.type==="takeoff"&&this.gameState.overlay.isVisible?this.hideOverlay():this.showTakeoffOverlay())}showInventoryOverlay(){this.gameState.overlay={type:"inventory",isVisible:!0,selectedIndex:0}}showStatusOverlay(){this.gameState.overlay={type:"character",isVisible:!0,selectedIndex:0}}showTakeoffOverlay(){const e=this.playerController.getPlayer(),t=[];if(e.equipment.mainHand&&t.push(e.equipment.mainHand),e.equipment.head&&t.push(e.equipment.head),t.length===0){this.addMessage("外せる装備がありません。");return}this.gameState.overlay={type:"takeoff",isVisible:!0,selectedIndex:0}}hideOverlay(){this.gameState.overlay={type:"none",isVisible:!1,selectedIndex:0}}handleNavigation(e){if(this.gameState.overlay.isVisible)switch(this.gameState.overlay.type){case"inventory":this.handleInventoryNavigation(e);break;case"character":break;case"takeoff":this.handleTakeoffNavigation(e);break}}handleInventoryNavigation(e){const t=this.playerController.getPlayer().inventory;if(t.length===0)return;const a=this.gameState.overlay.selectedIndex??0;let s=a;switch(e){case"north":s=Math.max(0,a-1);break;case"south":s=Math.min(t.length-1,a+1);break}this.gameState.overlay.selectedIndex=s}handleTakeoffNavigation(e){const t=this.playerController.getPlayer(),a=(t.equipment.mainHand?1:0)+(t.equipment.head?1:0);if(a===0)return;const s=this.gameState.overlay.selectedIndex||0;let i=s;switch(e){case"north":i=Math.max(0,s-1);break;case"south":i=Math.min(a-1,s+1);break}this.gameState.overlay.selectedIndex=i}handleInteraction(){if(this.gameState.overlay.isVisible)switch(this.gameState.overlay.type){case"inventory":this.handleInventoryInteraction();break;case"character":break;case"takeoff":this.handleTakeoffInteraction();break}}handleInventoryInteraction(){const e=this.playerController.getPlayer().inventory,t=this.gameState.overlay.selectedIndex??0;t<e.length&&(this.useItemCallback(t),this.hideOverlay())}handleTakeoffInteraction(){const e=this.playerController.getPlayer(),t=this.gameState.overlay.selectedIndex??0,a=[];if(e.equipment.mainHand&&a.push({slot:"weapon",item:e.equipment.mainHand}),e.equipment.head&&a.push({slot:"armor",item:e.equipment.head}),t<a.length){const s=a[t];this.removeEquipmentCallback(s.slot),this.hideOverlay()}}useItemFromOverlay(e){const t=this.playerController.getPlayer().inventory;e>=t.length||(this.useItemCallback(e),e>=t.length-1&&(this.gameState.overlay.selectedIndex=Math.max(0,t.length-2)))}handlePauseOrClose(){return this.gameState.overlay.isVisible?(console.log("Closing overlay:",this.gameState.overlay),this.hideOverlay(),console.log("Overlay closed, returning early"),!0):!1}getOverlayState(){return this.gameState.overlay}isVisible(){return this.gameState.overlay.isVisible}isType(e){return this.gameState.overlay.type===e&&this.gameState.overlay.isVisible}}class X{dimensions;constructor(e){this.dimensions=e}createDoorTile(e,t=!1){return{position:{...e},type:"door",char:t?" ":"|",color:t?"#666666":"#ff8800",backgroundColor:"#000000",blocking:!t,explored:!1,visible:!1}}placeDoorsBetweenRooms(e,t){for(let a=0;a<t.length-1;a++){const s=t[a],i=t[a+1],o=this.calculateDoorPosition(s,i);o&&y(o,this.dimensions)&&(e[o.y][o.x]=this.createDoorTile(o,!1))}}calculateDoorPosition(e,t){const a=t.position.x-1,s=e.position.y+Math.floor(e.dimensions.height/2);return{x:a,y:s}}openDoorForStep(e,t,a){console.log("TutorialDoorManager.openDoorForStep() called"),console.log("Completed step:",a);const s=this.getRoomIndexByStep(t,a);if(console.log("Current room index:",s),s===-1||s>=t.length-1){console.log("No door to open (last room or invalid room)");return}const i=t[s],o=t[s+1],r=this.calculateDoorPosition(i,o);if(console.log("Door position:",r),console.log("Current room:",i),console.log("Next room:",o),r&&y(r,this.dimensions)){console.log("Opening door at position:",r);const c=e[r.y][r.x];console.log("Before tile:",c),e[r.y][r.x]=this.createDoorTile(r,!0);const h=e[r.y][r.x];console.log("After tile:",h)}else console.log("Door position is invalid or out of bounds")}getRoomIndexByStep(e,t){const a=e.findIndex(s=>s.tutorialStep===t);return console.log(`Looking for room with step: ${t}, found index: ${a}`),console.log("Available rooms:",e.map(s=>({step:s.tutorialStep,pos:s.position}))),a}isPlayerAtDoor(e,t){return e[t.y]?.[t.x]?.type==="door"}isPlayerTryingClosedDoor(e,t){const a=e[t.y]?.[t.x];return a?.type==="door"&&a.blocking===!0}isDoorOpen(e,t){const a=e[t.y]?.[t.x];return a?.type==="door"&&a.blocking===!1}forceDoorOpen(e,t){y(t,this.dimensions)&&e[t.y][t.x].type==="door"&&(e[t.y][t.x]=this.createDoorTile(t,!0))}getNextDoorPosition(e,t){const a=this.getRoomIndexByStep(e,t);if(a===-1||a>=e.length-1)return null;const s=e[a],i=e[a+1];return this.calculateDoorPosition(s,i)}openAllDoorsToRoom(e,t,a){const s=this.getRoomIndexByStep(t,a);if(s!==-1)for(let i=0;i<s;i++){const o=t[i],r=t[i+1],c=this.calculateDoorPosition(o,r);c&&y(c,this.dimensions)&&(e[c.y][c.x]=this.createDoorTile(c,!0))}}openAllDoors(e,t){for(let a=0;a<t.length-1;a++){const s=t[a],i=t[a+1],o=this.calculateDoorPosition(s,i);o&&y(o,this.dimensions)&&(e[o.y][o.x]=this.createDoorTile(o,!0))}}getDoorMessage(e,t,a){if(!this.isPlayerAtDoor(e,t))return null;if(this.isPlayerTryingClosedDoor(e,t))switch(a){case"welcome":return"移動の練習を完了してから次の部屋に進みましょう";case"movement":return"戦闘の練習を完了してから次の部屋に進みましょう";case"combat":return"インベントリの練習を完了してから次の部屋に進みましょう";case"inventory":return"アイテム使用の練習を完了してから次の部屋に進みましょう";default:return"このステップを完了してから次に進みましょう"}return null}removeDoor(e,t){!y(t,this.dimensions)||e[t.y][t.x].type!=="door"||(e[t.y][t.x]={position:{...t},type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1},console.log(`Door at (${t.x}, ${t.y}) converted to floor tile with blocking: false`))}removeDoorForStep(e,t,a){console.log("TutorialDoorManager.removeDoorForStep() called"),console.log("Completed step:",a);const s=this.getRoomIndexByStep(t,a);if(console.log("Current room index:",s),s===-1||s>=t.length-1){console.log("No door to remove (last room or invalid room)");return}const i=t[s],o=t[s+1],r=this.calculateDoorPosition(i,o);console.log("Removing door at position:",r),r&&y(r,this.dimensions)?(this.removeDoor(e,r),console.log("Door removed successfully")):console.log("Door position is invalid or out of bounds")}}class j{constructor(e,t,a){this.gameState=e,this.addMessage=t,this.updatePlayerPosition=a,this.tutorialDungeonGenerator=new q,this.doorManager=new X({width:72,height:30})}tutorialDungeonGenerator;doorManager;originalDungeon=null;startTutorial(){this.originalDungeon={...this.gameState.currentDungeon};const e=this.gameState.currentDungeon;this.doorManager.placeDoorsBetweenRooms(e.tiles,e.rooms),this.gameState.status="tutorial",this.gameState.tutorial.isActive=!0,this.gameState.tutorial.currentStep="welcome",this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.showHint=!0,this.gameState.tutorial.hintText=n("tutorialWelcome"),this.addMessage(n("tutorialStarted")),this.addMessage("チュートリアル専用マップを生成しました。"),this.addMessage("専用の練習エリアに移動しました。WASDキーで移動してみましょう！")}updateProgress(e){this.gameState.tutorial,console.log("TutorialManager.updateProgress() called but deferred to InteractiveTutorialManager")}advanceStep(e){this.gameState.tutorial.currentStep=e,this.gameState.tutorial.stepProgress=0,this.gameState.tutorial.hintText=this.getHintText(e),this.addMessage(this.getStepMessage(e)),e==="complete"&&this.completeTutorial()}getHintText(e){switch(e){case"welcome":return n("tutorialWelcome");case"movement":return n("tutorialMovement");case"combat":return n("tutorialCombat");case"inventory":return n("tutorialInventory");case"equipment":return n("tutorialEquipment");case"complete":return n("tutorialCompleted");default:return""}}getStepMessage(e){switch(e){case"movement":return n("tutorialProgressMovement");case"combat":return"移動完了！次は戦闘の練習です。";case"inventory":return n("tutorialProgressCombatComplete");case"equipment":return n("tutorialProgressInventory");case"complete":return n("tutorialProgressEquipment");default:return""}}completeTutorial(){this.gameState.tutorial.isActive=!1,this.gameState.tutorial.showHint=!1,this.originalDungeon&&(this.gameState.currentDungeon=this.originalDungeon,this.originalDungeon=null),this.gameState.status="welcome",this.addMessage(g("tutorialComplete")),this.addMessage("チュートリアル完了！タイトルに戻ります。")}skipTutorial(){this.completeTutorial()}completeTutorialAndReturnToTitle(){this.gameState.tutorial.isActive=!1,this.gameState.tutorial.showHint=!1,this.originalDungeon=null,this.gameState.status="welcome",this.addMessage(g("tutorialComplete")),this.addMessage("チュートリアル完了！タイトル画面に戻ります。")}toggleHint(){this.gameState.tutorial.showHint=!this.gameState.tutorial.showHint}getTutorialState(){return this.gameState.tutorial}isActive(){return this.gameState.tutorial.isActive}getCurrentStep(){return this.gameState.tutorial.currentStep}shouldRestrictAction(e){return this.isActive(),!1}getContextualHint(){return this.isActive()?this.gameState.tutorial.hintText:null}openNextDoor(){const e=this.gameState.tutorial.currentStep,t=this.gameState.currentDungeon.rooms,a=this.gameState.currentDungeon.tiles;console.log("TutorialManager.openNextDoor() called"),console.log("Current step:",e),console.log("Rooms length:",t.length),this.doorManager.removeDoorForStep(a,t,e),this.addMessage("次の部屋への扉が開きました！")}openDoorForStep(e){const t=this.gameState.currentDungeon.rooms,a=this.gameState.currentDungeon.tiles;console.log("TutorialManager.openDoorForStep() called"),console.log("Step:",e),console.log("Rooms length:",t.length),this.doorManager.removeDoorForStep(a,t,e),this.addMessage("次の部屋への扉が開きました！")}checkDoorInteraction(e){const t=this.gameState.currentDungeon.tiles,a=this.gameState.tutorial.currentStep;return this.doorManager.getDoorMessage(t,e,a)}checkPlayerRoom(){const e=this.gameState.player.position,t=this.gameState.currentDungeon.rooms,a=this.findPlayerRoom(e,t);a&&a.tutorialStep&&this.handleRoomEntry(a.tutorialStep)}findPlayerRoom(e,t){return t.find(a=>e.x>=a.position.x&&e.x<a.position.x+a.dimensions.width&&e.y>=a.position.y&&e.y<a.position.y+a.dimensions.height)||null}handleRoomEntry(e){if(e!==this.gameState.tutorial.currentStep){const t={welcome:"チュートリアル開始！移動の練習をしましょう。",movement:"移動の部屋に入りました。WASDキーで移動してみてください。",combat:"戦闘の部屋に入りました。Spaceキーで攻撃モードを切り替えてみてください。",inventory:"インベントリの部屋に入りました。Iキーでインベントリを開いてみてください。",equipment:"装備の部屋に入りました。数字キーでアイテムを使用してみてください。",complete:"チュートリアル完了です！"};t[e]&&this.addMessage(t[e])}}openAllDoors(){const e=this.gameState.currentDungeon.rooms,t=this.gameState.currentDungeon.tiles;this.doorManager.openAllDoors(t,e),this.addMessage("デバッグ：全ての扉を開きました")}}class J{steps;currentStepIndex=0;itemUsedFlag=!1;combatCompletedFlag=!1;statusViewedFlag=!1;equipmentToggleCount=0;tutorialManager=null;constructor(){this.steps=this.initializeStepsFromConfig()}setTutorialManager(e){this.tutorialManager=e}initializeStepsFromConfig(){return I.getSteps().map(t=>{const a={...t};switch(t.id){case"step_movement":a.completionCondition=s=>{const i=S.getMovementTargetPosition(),o=s.player.position;return console.log(`Player position: (${o.x}, ${o.y}), Target: (${i.x}, ${i.y})`),o.x===i.x&&o.y===i.y};break;case"step_item_pickup":a.completionCondition=s=>this.itemUsedFlag;break;case"step_equipment":a.completionCondition=s=>this.equipmentToggleCount>=3;break;case"step_combat":a.completionCondition=s=>this.combatCompletedFlag;break;case"step_character_status":a.completionCondition=s=>this.statusViewedFlag;break}return a})}getCurrentStep(){return this.currentStepIndex>=this.steps.length?null:this.steps[this.currentStepIndex]}completeCurrentStep(){const e=this.getCurrentStep();e&&(e.isCompleted=!0)}moveToNextStep(){if(this.currentStepIndex<this.steps.length){if(this.tutorialManager){const e=this.getCurrentStep();if(e){console.log(`InteractiveTutorialManager: ${e.id} step completed, opening door`);const t=I.getPreviousStepId(this.currentStepIndex);t&&this.tutorialManager.openDoorForStep(t);const a=e.nextStepId;if(a){const s=I.getRoomTypeForStep(a);this.tutorialManager.advanceStep(s)}else this.tutorialManager.advanceStep("complete")}}this.currentStepIndex++}}checkStepCompletion(e){const t=this.getCurrentStep();return t?t.completionCondition(e):!1}isActionAllowed(e){const t=this.getCurrentStep();return t?!t.blockedActions?.includes(e):!0}getCurrentStepInfo(){const e=this.getCurrentStep();return e?{title:e.title,description:e.description,isCompleted:e.isCompleted,targetPosition:e.targetPosition||void 0}:{title:"チュートリアル完了",description:"すべてのチュートリアルが完了しました！",isCompleted:!0}}getProgress(){const e=this.currentStepIndex+1,t=I.getTotalSteps(),a=Math.round(e/t*100);return{currentStep:e,totalSteps:t,percentage:a}}isAllStepsCompleted(){return this.currentStepIndex>=this.steps.length}getCompletedSteps(){return this.steps.filter(e=>e.isCompleted)}isStepCompleted(e){return this.steps.find(a=>a.id===e)?.isCompleted??!1}updateTutorial(e){this.isAllStepsCompleted()||this.checkStepCompletion(e)&&(this.completeCurrentStep(),this.moveToNextStep())}markItemUsed(){this.itemUsedFlag=!0}markCombatCompleted(){this.combatCompletedFlag=!0}markStatusViewed(){this.statusViewedFlag=!0}markEquipmentToggled(){this.equipmentToggleCount++}isDoorOpenForNextRoom(){const e=this.getCurrentStep();return e?!!(e.id==="step_item_pickup"&&this.itemUsedFlag||e.id==="step_equipment"&&this.equipmentToggleCount>=3):!1}getTutorialItemPickupMessage(e){const t=this.getCurrentStep();if(!t||t.id!=="step_item_pickup")return"";switch(e){case"health_potion":return"ポーションを取得しました！Iキーでインベントリを開いて確認してみてください。";default:return`${e}を取得しました！次はIキーでインベントリを確認しましょう。`}}reset(){this.currentStepIndex=0,this.itemUsedFlag=!1,this.combatCompletedFlag=!1,this.statusViewedFlag=!1,this.equipmentToggleCount=0,this.steps.forEach(e=>{e.isCompleted=!1})}}class Q{stepOrder=["step_movement","step_item_pickup","step_equipment","step_combat","step_character_status"];totalSteps=this.stepOrder.length;roomTypeMapping={step_movement:"movement",step_item_pickup:"movement",step_equipment:"equipment",step_combat:"combat",step_character_status:"inventory"};stepDefinitions=[{id:"step_movement",title:"移動の練習",description:"WASDキーまたは矢印キーで移動してください。目標地点に到達すると次のステップに進みます。",targetAction:"movement",targetPosition:S.getMovementTargetPosition(),blockedActions:["attack","inventory"],completionCondition:()=>!1,isCompleted:!1,nextStepId:"step_item_pickup"},{id:"step_item_pickup",title:"アイテムの取得と使用",description:"Fキーでアイテムを取得し、Iキーでインベントリを開き、1キーでアイテムを使用してください。",targetAction:"item_use",blockedActions:["attack"],completionCondition:()=>!1,isCompleted:!1,nextStepId:"step_equipment"},{id:"step_equipment",title:"装備の着脱",description:"Eキーで装備を着脱してみてください。装備→外す→再装備の3回操作すると扉が開きます。",targetAction:"equipment",blockedActions:["attack"],completionCondition:()=>!1,isCompleted:!1,nextStepId:"step_combat"},{id:"step_combat",title:"戦闘の練習",description:"SPACEキーで攻撃モードに切り替え、敵を倒してください。",targetAction:"combat",blockedActions:["inventory"],completionCondition:()=>!1,isCompleted:!1,nextStepId:"step_character_status"},{id:"step_character_status",title:"ステータス確認",description:"Cキーでキャラクターのステータスを確認してください。",targetAction:"character_status",blockedActions:[],completionCondition:()=>!1,isCompleted:!1}];getSteps(){return this.stepDefinitions}getStep(e){return this.stepDefinitions.find(t=>t.id===e)||null}getStepIndex(e){return this.stepOrder.indexOf(e)}getNextStepId(e){const t=this.getStepIndex(e);if(!(t===-1||t>=this.stepOrder.length-1))return this.stepOrder[t+1]}getPreviousStepId(e){const t=this.getStepIndex(e);if(!(t<=0))return this.stepOrder[t-1]}getRoomTypeForStep(e){return this.roomTypeMapping[e]||"movement"}}const Z=new Q;class ee{constructor(e=Z){this.configuration=e,this.steps=this.initializeSteps()}steps;currentStepIndex=0;isActivated=!1;isCompletedFlag=!1;completedStepIds=new Set;itemUsedFlag=!1;combatCompletedFlag=!1;statusViewedFlag=!1;equipmentToggleCount=0;addMessageCallback;updatePlayerPositionCallback;processTurnCallback;setGameStatusCallback=void 0;openDoorCallback=void 0;openPlayerSurroundingDoorsCallback=void 0;events={onStepStart:()=>{},onStepComplete:()=>{},onTutorialComplete:()=>{},onActionBlocked:()=>{}};start(){this.isActivated=!0,this.currentStepIndex=0,this.completedStepIds.clear(),this.resetFlags(),this.setGameStatusCallback?.("tutorial"),this.events.onStepStart(this.getCurrentStepId()),this.addMessageCallback?.("チュートリアルを開始します。")}complete(){this.isActivated=!1,this.isCompletedFlag=!0,this.events.onTutorialComplete(),this.addMessageCallback?.("チュートリアルが完了しました。")}skip(){this.isActivated=!1,this.addMessageCallback?.("チュートリアルをスキップしました。")}reset(){this.currentStepIndex=0,this.completedStepIds.clear(),this.resetFlags(),this.isActivated=!1,this.isCompletedFlag=!1}moveToNextStep(){if(this.currentStepIndex>=this.steps.length-1)return this.complete(),!1;const e=this.getCurrentStep();e&&(e.isCompleted=!0,this.completedStepIds.add(e.id),this.events.onStepComplete(e.id)),this.currentStepIndex++;const t=this.getCurrentStep();return t?(this.events.onStepStart(t.id),!0):!1}moveToPreviousStep(){if(this.currentStepIndex<=0)return!1;this.currentStepIndex--;const e=this.getCurrentStep();return e?(this.events.onStepStart(e.id),!0):!1}jumpToStep(e){const t=this.configuration.getStepIndex(e);return t===-1?!1:(this.currentStepIndex=t,this.events.onStepStart(e),!0)}checkStepCompletion(e){const t=this.getCurrentStep();return t?t.completionCondition(e):!1}isActionAllowed(e){const t=this.getCurrentStep();return!t||!t.blockedActions?!0:!t.blockedActions.includes(e)}updateProgress(e){if(console.log("UnifiedTutorialSystem.updateProgress called:",{isActivated:this.isActivated,currentStepIndex:this.currentStepIndex,stepsLength:this.steps.length}),!this.isActivated){console.log("Tutorial not activated, returning early");return}const t=this.getCurrentStep(),a=this.checkStepCompletion(e);if(console.log("UnifiedTutorialSystem.updateProgress:",{currentStepId:t?.id,playerPos:e.player.position,targetPos:t?.targetPosition,isCompleted:a}),a){console.log("Step completed! Moving to next step...");const s=this.getCurrentStepId();this.handleDoorOpening(s),this.moveToNextStep();const i=this.getCurrentStep();console.log("Moved to next step:",{newStepId:i?.id,newStepIndex:this.currentStepIndex})}}markActionCompleted(e){this.processTurnCallback?.()}markItemUsed(){this.itemUsedFlag=!0,this.markActionCompleted("item_use")}markEquipmentToggled(){this.equipmentToggleCount++,this.markActionCompleted("equipment_toggle")}markCombatCompleted(){this.combatCompletedFlag=!0,this.markActionCompleted("combat")}markStatusViewed(){this.statusViewedFlag=!0,this.markActionCompleted("status_view")}handleDoorOpening(e){console.log(`UnifiedTutorialSystem: Opening door for step ${e}`);const t=this.convertToLegacyStep(e);console.log(`Converting ${e} to legacy step: ${t}`),this.openPlayerSurroundingDoorsCallback&&e==="step_movement"&&(console.log("Opening doors around player for movement step"),this.openPlayerSurroundingDoorsCallback()),this.openDoorCallback&&t&&this.openDoorCallback(t)}convertToLegacyStep(e){return{step_movement:"movement",step_item_pickup:"inventory",step_equipment:"equipment",step_combat:"combat",step_character_status:"complete"}[e]||null}getCoordinateInfo(){return{playerStartPosition:S.getPlayerStartPosition(),movementTargetPosition:S.getMovementTargetPosition(),welcomeRoomPosition:S.getWelcomeRoomPosition(),roomDimensions:{width:S.ROOM_DIMENSIONS.width,height:S.ROOM_DIMENSIONS.height}}}setCallbacks(e){this.addMessageCallback=e.addMessage,this.updatePlayerPositionCallback=e.updatePlayerPosition,this.processTurnCallback=e.processTurn,this.setGameStatusCallback=e.setGameStatus,this.openDoorCallback=e.openDoor,this.openPlayerSurroundingDoorsCallback=e.openPlayerSurroundingDoors}get state(){return{currentStepId:this.getCurrentStepId(),currentStepIndex:this.currentStepIndex,totalSteps:this.steps.length,isActive:this.isActivated,isCompleted:this.isCompletedFlag,progress:Math.round(this.currentStepIndex/this.steps.length*100),currentStep:this.getCurrentStep()??void 0}}get currentStep(){return this.getCurrentStep()}isStepCompleted(e){return this.completedStepIds.has(e)}getCompletedSteps(){return Array.from(this.completedStepIds)}getProgress(){return{current:this.currentStepIndex+1,total:this.steps.length,percentage:Math.round((this.currentStepIndex+1)/this.steps.length*100)}}getState(){return this.state}getCurrentStep(){return this.currentStepIndex>=this.steps.length||this.currentStepIndex<0?null:this.steps[this.currentStepIndex]}getStepInfo(){const e=this.getCurrentStep();if(!e)return{title:"",description:""};const t={title:e.title,description:e.description};return e.targetPosition&&(t.targetPosition=e.targetPosition),t}getCurrentStepId(){const e=this.getCurrentStep();return e?e.id:""}initializeSteps(){return this.configuration.getSteps().map(t=>{const a={...t};switch(t.id){case"step_movement":a.completionCondition=s=>{const i=S.getMovementTargetPosition(),o=s.player.position,r=o.x===i.x&&o.y===i.y;return console.log("step_movement completion check:",{playerPos:o,targetPos:i,isEqual:r}),r},a.targetPosition=S.getMovementTargetPosition(),console.log("step_movement targetPosition set to:",a.targetPosition);break;case"step_item_pickup":a.completionCondition=()=>this.itemUsedFlag;break;case"step_equipment":a.completionCondition=()=>this.equipmentToggleCount>=3;break;case"step_combat":a.completionCondition=()=>this.combatCompletedFlag;break;case"step_character_status":a.completionCondition=()=>this.statusViewedFlag;break}return a})}resetFlags(){this.itemUsedFlag=!1,this.combatCompletedFlag=!1,this.statusViewedFlag=!1,this.equipmentToggleCount=0}}class te{constructor(e,t,a,s){this.gameState=e,this.addMessage=t,this.startGameCallback=a,this.startTutorialCallback=s}showMenu(){this.addMessage(n("menuNotImplemented"))}handleLanguageSwitch(){const t=C.getCurrentLanguage()==="ja"?"en":"ja";C.setLanguage(t),this.updateUITexts(),this.addMessage(n("languageSwitched"))}updateUITexts(){}showSettings(){this.addMessage(n("settingsUnderDevelopment"))}showPrologue(){this.gameState.welcome.showPrologue=!0}skipPrologue(){this.gameState.welcome.showPrologue=!1,this.gameState.welcome.selectedOption||(this.gameState.welcome.selectedOption="start")}handleWelcomeInteract(){if(this.gameState.status!=="welcome")return;if(this.gameState.welcome.showPrologue){this.skipPrologue();return}const e=this.gameState.welcome.selectedOption;if(e)switch(e){case"start":this.startGameCallback();break;case"tutorial":this.startTutorialCallback();break;case"settings":this.showSettings();break}}navigateWelcomeMenu(e){if(this.gameState.status!=="welcome"||this.gameState.welcome.showPrologue)return;const t=["start","tutorial","settings"],a=t.indexOf(this.gameState.welcome.selectedOption||"start");let s=a;e==="up"?s=Math.max(0,a-1):s=Math.min(t.length-1,a+1),this.gameState.welcome.selectedOption=t[s]}getCurrentLanguage(){return C.getCurrentLanguage()}setLanguage(e){C.setLanguage(e),this.updateUITexts()}showGameOver(e){this.addMessage(g("gameOver")),this.addMessage(g("finalScore",{score:e.toString()}))}showVictory(e){this.addMessage(g("victory")),this.addMessage(g("finalScore",{score:e.toString()}))}isUIElementVisible(e){switch(e){case"prologue":return this.gameState.welcome.showPrologue;case"menu":return this.gameState.status==="menu";case"settings":return!1;default:return!1}}}class ae{keyMapping;pressedKeys;actionCallbacks;element;keyRepeatTimer;REPEAT_DELAY=300;REPEAT_RATE=100;constructor(e){this.element=e,this.pressedKeys=new Set,this.actionCallbacks=new Map,this.keyRepeatTimer=new Map,this.keyMapping={KeyW:"move_north",ArrowUp:"move_north",KeyS:"move_south",ArrowDown:"move_south",KeyA:"move_west",ArrowLeft:"move_west",KeyD:"move_east",ArrowRight:"move_east",KeyF:"interact",Enter:"interact",Space:"attack",KeyX:"attack",KeyI:"inventory",KeyE:"equipment",KeyC:"character",Comma:"pickup",KeyG:"pickup",KeyQ:"quaff",KeyR:"read",KeyT:"takeoff",Digit1:"use_item_1",Digit2:"use_item_2",Digit3:"use_item_3",Digit4:"use_item_4",Digit5:"use_item_5",Digit6:"use_item_6",Digit7:"use_item_7",Digit8:"use_item_8",Digit9:"use_item_9",Escape:"pause",KeyM:"menu",KeyL:"language_switch"},this.setupEventListeners()}setupEventListeners(){this.element.tabIndex<0&&(this.element.tabIndex=0),this.element.focus();const e=a=>{a.preventDefault();const s=a.code;if(!this.pressedKeys.has(s)){this.pressedKeys.add(s),this.handleKeyPress(s);const i=this.keyMapping[s];this.isMovementAction(i)&&this.setupKeyRepeat(s)}},t=a=>{a.preventDefault();const s=a.code;this.pressedKeys.delete(s),this.clearKeyRepeat(s)};this.element.addEventListener("keydown",e),this.element.addEventListener("keyup",t),this.element.addEventListener("blur",()=>{this.element.focus()}),this.element.addEventListener("click",()=>{this.element.focus()})}handleKeyPress(e){const t=this.keyMapping[e];if(t&&this.actionCallbacks.has(t)){const a=this.actionCallbacks.get(t);a&&a()}}onAction(e,t){this.actionCallbacks.set(e,t)}offAction(e){this.actionCallbacks.delete(e)}setKeyMapping(e){Object.assign(this.keyMapping,e)}getKeyMapping(){return{...this.keyMapping}}isKeyPressed(e){return this.pressedKeys.has(e)}isMovementKeyPressed(){return["KeyW","KeyS","KeyA","KeyD","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].some(t=>this.pressedKeys.has(t))}getPressedKeys(){return Array.from(this.pressedKeys)}isMovementAction(e){return e==="move_north"||e==="move_south"||e==="move_east"||e==="move_west"}setupKeyRepeat(e){this.clearKeyRepeat(e);const t=setTimeout(()=>{const a=setInterval(()=>{this.pressedKeys.has(e)?this.handleKeyPress(e):this.clearKeyRepeat(e)},this.REPEAT_RATE);this.keyRepeatTimer.set(e,a)},this.REPEAT_DELAY);this.keyRepeatTimer.set(e,t)}clearKeyRepeat(e){const t=this.keyRepeatTimer.get(e);t!==void 0&&(clearTimeout(t),clearInterval(t),this.keyRepeatTimer.delete(e))}clearPressedKeys(){this.pressedKeys.clear(),this.keyRepeatTimer.forEach(e=>{clearTimeout(e),clearInterval(e)}),this.keyRepeatTimer.clear()}disable(){this.clearPressedKeys()}focus(){this.element.focus()}getActionForKey(e){return this.keyMapping[e]}getKeyForAction(e){for(const[t,a]of Object.entries(this.keyMapping))if(a===e)return t}keyToDisplayString(e){return{KeyW:"W",KeyA:"A",KeyS:"S",KeyD:"D",KeyE:"E",KeyC:"C",KeyF:"F",KeyG:"G",KeyI:"I",KeyL:"L",KeyM:"M",KeyQ:"Q",KeyR:"R",KeyT:"T",KeyX:"X",Comma:",",Enter:"Enter",Digit1:"1",Digit2:"2",Digit3:"3",Digit4:"4",Digit5:"5",Digit6:"6",Digit7:"7",Digit8:"8",Digit9:"9",ArrowUp:"↑",ArrowDown:"↓",ArrowLeft:"←",ArrowRight:"→",Space:"Space",Escape:"Esc"}[e]||e}}class se{constructor(e,t,a,s,i,o,r,c,h,p,u,m,f){this.gameState=t,this.handleDirectionalInputCallback=a,this.toggleAttackModeCallback=s,this.handleInteractCallback=i,this.toggleInventoryOverlayCallback=o,this.toggleStatusOverlayCallback=r,this.toggleTakeoffOverlayCallback=c,this.handleItemActionCallback=h,this.togglePauseCallback=p,this.showMenuCallback=u,this.handleLanguageSwitchCallback=m,this.handleEquipmentToggleCallback=f,this.inputHandler=new ae(e),this.setupInputHandlers()}inputHandler;setupInputHandlers(){this.inputHandler.onAction("move_north",()=>this.handleDirectionalInputCallback("north")),this.inputHandler.onAction("move_south",()=>this.handleDirectionalInputCallback("south")),this.inputHandler.onAction("move_east",()=>this.handleDirectionalInputCallback("east")),this.inputHandler.onAction("move_west",()=>this.handleDirectionalInputCallback("west")),this.inputHandler.onAction("attack",()=>this.toggleAttackModeCallback()),this.inputHandler.onAction("interact",()=>this.handleInteractCallback()),this.inputHandler.onAction("inventory",()=>this.toggleInventoryOverlayCallback()),this.inputHandler.onAction("character",()=>this.toggleStatusOverlayCallback()),this.inputHandler.onAction("takeoff",()=>this.toggleTakeoffOverlayCallback()),this.inputHandler.onAction("equipment",()=>this.handleEquipmentToggleCallback());for(let e=1;e<=9;e++)this.inputHandler.onAction(`use_item_${e}`,()=>this.handleItemActionCallback(e-1));this.inputHandler.onAction("pause",()=>this.togglePauseCallback()),this.inputHandler.onAction("menu",()=>this.showMenuCallback()),this.inputHandler.onAction("language_switch",()=>this.handleLanguageSwitchCallback())}getInputHandler(){return this.inputHandler}disable(){this.inputHandler.disable()}clearPressedKeys(){this.inputHandler.clearPressedKeys()}focus(){this.inputHandler.focus()}setKeyMapping(e){this.inputHandler.setKeyMapping(e)}getKeyMapping(){return this.inputHandler.getKeyMapping()}isKeyPressed(e){return this.inputHandler.isKeyPressed(e)}isMovementKeyPressed(){return this.inputHandler.isMovementKeyPressed()}getPressedKeys(){return this.inputHandler.getPressedKeys()}getKeyForAction(e){return this.inputHandler.getKeyForAction(e)}getActionForKey(e){return this.inputHandler.getActionForKey(e)}keyToDisplayString(e){return this.inputHandler.keyToDisplayString(e)}}class ie{constructor(e,t){this.playerController=e,this.dungeonManager=t}createInitialGameState(){const e=this.playerController.getPlayer(),t=this.dungeonManager.generateInitialFloor(e);return this.playerController.setPosition(t.player.position),{status:"welcome",player:e,currentDungeon:t,dungeonData:this.dungeonManager.getDungeonData(),turn:0,score:0,messages:[],levelCleared:!1,tutorial:{isActive:!1,currentStep:"welcome",stepProgress:0,showHint:!1,hintText:""},welcome:{showPrologue:!0,selectedOption:"start"},overlay:{type:"none",isVisible:!1,selectedIndex:0}}}updateGameState(e,t){Object.assign(e,t)}updatePlayerState(e,t){Object.assign(e.player,t)}updateDungeonState(e,t){e.currentDungeon=t,e.dungeonData=this.dungeonManager.getDungeonData()}updateTutorialState(e,t){Object.assign(e.tutorial,t)}updateWelcomeState(e,t){Object.assign(e.welcome,t)}updateOverlayState(e,t){Object.assign(e.overlay,t)}incrementTurn(e){e.turn++}addMessage(e,t){e.messages.push(t),e.messages.length>100&&(e.messages=e.messages.slice(-100))}clearMessages(e){e.messages=[]}getGameStats(e){return{turnCount:e.turn,score:e.score}}calculateScore(e){const t=e.player;let a=0;return a+=t.level*100,a+=Math.max(0,1e3-e.turn),Math.max(0,a)}validateGameState(e){try{return!(!e.player||!e.currentDungeon||e.player.health<=0&&e.status!=="paused"||!e.currentDungeon.tiles||!e.currentDungeon.entities)}catch(t){return console.error("Game state validation error:",t),!1}}cloneGameState(e){return JSON.parse(JSON.stringify(e))}createSaveData(e){return{version:"1.0.0",timestamp:Date.now(),gameState:this.cloneGameState(e),playerStats:this.getGameStats(e),score:this.calculateScore(e)}}restoreFromSaveData(e){try{if(!e||!e.gameState)return null;const t=e.gameState;return this.validateGameState(t)?t:null}catch(t){return console.error("Failed to restore game state:",t),null}}resetGameState(){return this.createInitialGameState()}}class oe{constructor(e,t,a,s,i,o,r){this.gameState=e,this.playerController=t,this.addMessage=a,this.getEnemyAtCallback=s,this.processTurnCallback=i,this.updateTutorialProgressCallback=o,this.onCombatCompletedCallback=r}attackMode=!1;toggleAttackMode(){this.gameState.status!=="playing"&&this.gameState.status!=="tutorial"||(this.attackMode=!this.attackMode,this.attackMode?this.addMessage(g("attackModeOn")):this.addMessage(g("movementMode")),this.updateTutorialProgressCallback&&this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback("combat"))}isAttackMode(){return this.attackMode}disableAttackMode(){this.attackMode=!1}handleAttack(e){this.playerController.getPosition();const t=this.playerController.move(e),a=this.getEnemyAtCallback(t);a?(this.handleCombat(a),this.processTurnCallback()):this.addMessage(g("noEnemyInThatDirection")),this.updateTutorialProgressCallback&&this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback("combat"),this.attackMode=!1,this.addMessage(g("movementMode"))}handleCombat(e){if(!this.playerController.rollAttackHit()){this.addMessage(g("attackMissed",{enemy:w(e)}));return}const{damage:t,isCritical:a}=this.playerController.rollDamage();"health"in e&&"maxHealth"in e?this.applyDamageToEnemy(e,t,a):this.handleLegacyEnemyCombat(e,t,a)}applyDamageToEnemy(e,t,a){"health"in e&&typeof e.health=="number"&&(e.health-=t);const s=a?"criticalHit":"normalHit";this.addMessage(g(s,{enemy:w(e),damage:t.toString(),health:"health"in e&&typeof e.health=="number"?Math.max(0,e.health).toString():"0",maxHealth:"maxHealth"in e&&typeof e.maxHealth=="number"?e.maxHealth.toString():"100"})),"health"in e&&typeof e.health=="number"&&e.health<=0&&this.handleEnemyDefeat(e)}handleLegacyEnemyCombat(e,t,a){const s=a?"criticalHit":"normalHit";this.addMessage(g(s,{enemy:w(e),damage:t.toString(),health:"0",maxHealth:"100"})),this.handleEnemyDefeat(e)}handleEnemyDefeat(e){const t=this.gameState.currentDungeon.entities.findIndex(a=>a.id===e.id);if(t!==-1){this.gameState.currentDungeon.entities.splice(t,1),this.addMessage(g("enemyDefeated",{enemy:w(e)}));const a=this.calculateExperienceReward(e),s=this.playerController.addExperience(a);this.gameState.score+=10,this.addMessage(g("experienceGained",{exp:a.toString()})),this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player,s&&this.addMessage(g("levelUp",{level:this.gameState.player.level.toString()})),this.onCombatCompletedCallback&&this.onCombatCompletedCallback()}}calculateExperienceReward(e){const a={G:25,R:20,S:22,O:40,T:45,W:50,D:100,L:90,M:85}[e.char]||20,s="maxHealth"in e?Math.floor(e.maxHealth/10):0;return a+s}getCombatStats(){const e=this.playerController.getPlayer();return{attackMode:this.attackMode,playerLevel:e.level,playerHealth:e.health,playerMaxHealth:e.maxHealth}}canEngageCombat(){return this.playerController.getPlayer().health>0&&(this.gameState.status==="playing"||this.gameState.status==="tutorial")}getPlayerDamageCapability(){const e=this.playerController.getPlayer(),t=e.equipment.mainHand,a=t?t.damage:5,s=t?t.accuracy:70;return{minDamage:Math.max(1,a-2),maxDamage:a+e.level,accuracy:s,criticalChance:10+Math.floor(e.level/2)}}evaluateEnemyThreat(e){const t=this.playerController.getPlayer().level;return["D","L","M"].includes(e.char)?t<5?"extreme":"high":["O","T","W"].includes(e.char)?t<3?"high":"medium":t<2?"medium":"low"}}class re{constructor(e,t,a){this.gameState=e,this.playerController=t,this.addMessage=a}equipItemFromInventory(e){return e.itemType==="weapon"?this.equipWeapon(e):e.itemType==="armor"?this.equipArmor(e):!1}equipWeapon(e){return this.playerController.equipWeapon(e)?(this.addMessage(g("weaponEquipped",{weapon:d(e)})),this.syncPlayerData(),!0):(this.addMessage(g("cannotEquipWeapon")),!1)}equipArmor(e){return this.playerController.equipArmor(e)?(this.addMessage(g("armorEquipped",{armor:d(e)})),this.syncPlayerData(),!0):(this.addMessage(g("cannotEquipArmor")),!1)}removeEquipment(e){e==="weapon"?this.removeWeapon():e==="armor"&&this.removeArmor(),this.syncPlayerData()}removeWeapon(){const e=this.playerController.unequipWeapon();e&&(this.playerController.addItem(e),this.addMessage(g("weaponUnequipped",{weapon:d(e)})))}removeArmor(){if(this.playerController.getPlayer().equipment.head){const t=this.playerController.unequipArmor("head");t&&(this.playerController.addItem(t),this.addMessage(g("armorUnequipped",{armor:d(t)})))}}getCurrentEquipmentDisplay(){const t=this.playerController.getPlayer().equipment,a=[];if(t.mainHand){const r=t.mainHand,c=d(r);a.push(`${n("rightHand")}: ${r.char} ${c}`);const h=n("attackPowerEffect").replace("{{damage}}",String(r.damage)).replace("{{accuracy}}",String(r.accuracy));a.push(`      ${n("effectLabel")}: ${h}`)}else a.push(`${n("rightHand")}: ${n("noEquipment")}`);[{slot:"head",name:n("head")},{slot:"chest",name:n("chest")},{slot:"legs",name:n("legs")},{slot:"feet",name:n("feet")},{slot:"offHand",name:n("leftHand")}].forEach(r=>{const c=t[r.slot];if(c){const h=d(c);a.push(`${r.name}: ${c.char} ${h}`);const p=n("defenseEffect").replace("{{defense}}",String(c.defense));a.push(`      ${n("effectLabel")}: ${p}`)}else a.push(`${r.name}: ${n("noEquipment")}`)});const i=this.playerController.getTotalDefense(),o=n("totalDefense").replace("{{total}}",String(i));return a.push(o),a}canEquipItem(e){return!e||!e.itemType?!1:e.itemType==="weapon"?this.canEquipWeapon(e):e.itemType==="armor"?this.canEquipArmor(e):!1}canEquipWeapon(e){return e&&typeof e.damage=="number"&&typeof e.accuracy=="number"&&e.damage>0&&e.accuracy>0}canEquipArmor(e){return e&&typeof e.defense=="number"&&e.defense>0&&["head","chest","legs","feet","offHand"].includes(e.armorType)}getEquipmentStats(){const t=this.playerController.getPlayer().equipment,a=!!t.mainHand,s=t.mainHand?t.mainHand.damage:0,i=t.mainHand?t.mainHand.accuracy:0,o=this.playerController.getTotalDefense();let r=0;return t.head&&r++,t.chest&&r++,t.legs&&r++,t.feet&&r++,t.offHand&&r++,{weaponEquipped:a,weaponDamage:s,weaponAccuracy:i,totalDefense:o,armorPieces:r}}getEquipmentEffects(){const t=this.playerController.getPlayer().equipment;let a=0,s=0;const i=[];return t.mainHand&&(a+=t.mainHand.damage,t.mainHand.accuracy>90&&i.push("高精度")),[t.head,t.chest,t.legs,t.feet,t.offHand].filter(o=>o).forEach(o=>{o&&(s+=o.defense,o.defense>=10&&i.push("重装甲"))}),{attackBonus:a,defenseBonus:s,specialEffects:i}}syncPlayerData(){this.gameState.player=this.playerController.getPlayer(),this.gameState.currentDungeon.player=this.gameState.player}canUpgradeEquipment(e,t){return!e||!t?!0:e.itemType==="weapon"&&t.itemType==="weapon"?e.damage>t.damage:e.itemType==="armor"&&t.itemType==="armor"?e.defense>t.defense:!1}getEquipmentRecommendation(e){if(!this.canEquipItem(e))return null;const t=this.playerController.getPlayer();if(e.itemType==="weapon"){const a=t.equipment.mainHand;if(a){if(this.canUpgradeEquipment(e,a))return"武器をアップグレードすることを推奨します"}else return"武器を装備することを推奨します"}else if(e.itemType==="armor"){const a=t.equipment[e.armorType];if(a){if(this.canUpgradeEquipment(e,a))return"防具をアップグレードすることを推奨します"}else return"防具を装備することを推奨します"}return null}}class ne{constructor(e,t,a,s,i){this.gameState=e,this.playerController=t,this.addMessage=a,this.processTurnCallback=s,this.updateTutorialProgressCallback=i}handlePlayerMove(e){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;this.playerController.getPosition();const t=this.playerController.move(e);this.isValidMove(t)?this.executeMove(t):this.addMessage(g("cannotMoveThere"))}executeMove(e){this.playerController.confirmMove(e),this.gameState.player.position=e,console.log("MovementManager.executeMove:",{newPosition:e,gameStatus:this.gameState.status}),k.updateFieldOfView(this.gameState.currentDungeon,e),this.gameState.status==="tutorial"&&(console.log("Calling updateTutorialProgressCallback..."),this.updateTutorialProgressCallback("movement")),this.processTurnCallback()}isValidMove(e){const t=this.gameState.currentDungeon;return!y(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player"&&i.type!=="enemy")}getEnemyAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="enemy")}getItemAt(e){return this.gameState.currentDungeon.entities.find(t=>t.position.x===e.x&&t.position.y===e.y&&t.type==="item")}getEntityAt(e,t){return this.gameState.currentDungeon.entities.find(a=>a.position.x===e.x&&a.position.y===e.y&&(t?a.type===t:!0))}getPlayerPosition(){return this.playerController.getPosition()}calculateNextPosition(e){return this.playerController.move(e)}evaluateMovementRisk(e){const t=this.gameState.currentDungeon,a=this.getNearbyEnemies(e,1);if(a.length>=3)return"danger";if(a.length>=1)return"caution";const s=t.tiles[e.y]?.[e.x];return s&&!s.explored?"caution":"safe"}getNearbyEnemies(e,t=1){const a=[];for(let s=-t;s<=t;s++)for(let i=-t;i<=t;i++){if(i===0&&s===0)continue;const o={x:e.x+i,y:e.y+s},r=this.getEnemyAt(o);r&&a.push(r)}return a}suggestMovement(e){const t=this.getPlayerPosition(),a=[],s=e.x-t.x,i=e.y-t.y;return s>0?a.push("east"):s<0&&a.push("west"),i>0?a.push("south"):i<0&&a.push("north"),a}getValidDirections(){return this.getPlayerPosition(),["north","south","east","west"].filter(t=>{const a=this.calculateNextPosition(t);return this.isValidMove(a)})}getMovementStats(){const e=this.getPlayerPosition(),t=this.getValidDirections(),a=this.getNearbyEnemies(e),s=this.getNearbyItems(e),i=this.evaluateMovementRisk(e);return{currentPosition:e,validDirections:t,nearbyEnemies:a.length,nearbyItems:s.length,movementRisk:i}}getNearbyItems(e,t=1){const a=[];for(let s=-t;s<=t;s++)for(let i=-t;i<=t;i++){const o={x:e.x+i,y:e.y+s},r=this.getItemAt(o);r&&a.push(r)}return a}preventWallCollision(e){const t=this.calculateNextPosition(e),a=this.gameState.currentDungeon;return y(t,a.dimensions)?!a.tiles[t.y][t.x].blocking:!1}forceMove(e){this.playerController.setPosition(e),this.gameState.player.position=e,k.updateFieldOfView(this.gameState.currentDungeon,e)}}class le{constructor(e,t,a,s,i,o,r,c,h){this.gameState=e,this.playerController=t,this.dungeonManager=a,this.addMessage=s,this.processTurnCallback=i,this.getCombatAttackModeCallback=o,this.setCombatAttackModeCallback=r,this.updateTutorialProgressCallback=c,this.interactiveTutorialManager=h}handleInteract(){if(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")return;const e=this.gameState.player.position,t=this.dungeonManager.hasStairsAt(e);if(t){this.handleStairsInteraction(t);return}this.handleItemPickup(e)}handleStairsInteraction(e){const t=this.dungeonManager.getCurrentFloor();let a;if(e==="down")a=t+1,this.addMessage(g("descendingToFloor",{floor:a.toString()}));else{if(a=t-1,a<1){this.addMessage(g("cannotGoUp"));return}this.addMessage(g("returningToFloor",{floor:a.toString()}))}this.moveToFloor(a)}moveToFloor(e){const t=this.getCombatAttackModeCallback();this.dungeonManager.saveDungeonState(this.gameState.currentDungeon);const a=this.playerController.getPlayer(),s=this.dungeonManager.moveToFloor(e,a);this.updateGameStateForNewFloor(s,a.position),t&&this.setCombatAttackModeCallback(),k.updateFieldOfView(s,a.position),this.addMessage(g("arrivedAtFloor",{floor:e.toString()}))}updateGameStateForNewFloor(e,t){this.gameState.currentDungeon=e,this.gameState.dungeonData=this.dungeonManager.getDungeonData(),this.gameState.player.position=t,this.gameState.currentDungeon.player=this.gameState.player,this.gameState.levelCleared=!1,this.playerController.setPosition(t)}handleItemPickup(e){const a=this.gameState.currentDungeon.entities.find(s=>s.position.x===e.x&&s.position.y===e.y&&s.type==="item");a?this.pickupItem(a):this.addMessage(g("cannotInteract"))}pickupItem(e){if(this.playerController.addItem(e)){if(this.gameState.status==="tutorial"&&this.interactiveTutorialManager){const t=this.interactiveTutorialManager.getTutorialItemPickupMessage(e.itemType||e.name||"unknown");t?this.addMessage(t):this.addMessage(g("pickedUpItemWithName",{char:e.char,item:d(e)}))}else this.addMessage(g("pickedUpItemWithName",{char:e.char,item:d(e)}));this.removeItemFromDungeon(e),this.gameState.status==="tutorial"&&this.updateTutorialProgressCallback&&this.updateTutorialProgressCallback("pickup"),this.processTurnCallback()}else this.addMessage(g("inventoryFull"))}removeItemFromDungeon(e){const t=this.gameState.currentDungeon,a=t.entities.findIndex(s=>s.id===e.id);a!==-1&&t.entities.splice(a,1)}getStairsAtPosition(e){return this.dungeonManager.hasStairsAt(e)}getItemAtPosition(e){return this.gameState.currentDungeon.entities.find(s=>s.position.x===e.x&&s.position.y===e.y&&s.type==="item")||null}getCurrentFloorInfo(){const e=this.dungeonManager.getCurrentFloor(),t=this.gameState.currentDungeon;let a=!1,s=!1,i=0,o=0;return t.entities.forEach(r=>{r.type==="item"&&i++,r.type==="enemy"&&o++}),a=e>1,s=!0,{currentFloor:e,hasUpStairs:a,hasDownStairs:s,itemsOnFloor:i,enemiesOnFloor:o}}checkFloorCompletion(){return this.gameState.currentDungeon.entities.filter(a=>a.type==="enemy").length===0}completeFloor(){this.checkFloorCompletion()&&(this.gameState.levelCleared=!0,this.addMessage(g("levelCleared")),this.gameState.score+=50,this.addMessage(g("floorBonus")))}emergencyExit(){this.moveToFloor(1),this.addMessage(g("emergencyExit"))}getFloorStats(){const e=this.dungeonManager.getCurrentFloor(),t=this.dungeonManager.getDungeonData();return{floorsVisited:Object.keys(t.floors).length,currentFloor:e,totalItems:0,totalEnemies:0,floorsCleared:0}}shouldPickupItem(e){return this.playerController.getPlayer().inventory.length>=10?{shouldPickup:!1,reason:"インベントリが満杯です"}:e.itemType==="consumable"?{shouldPickup:!0,reason:"消耗品は常に有用です"}:e.itemType==="weapon"||e.itemType==="armor"?{shouldPickup:!0,reason:"装備品はアップグレードの可能性があります"}:{shouldPickup:!0,reason:"アイテムを取得することを推奨します"}}getInteractableAtPosition(e){const t=this.getStairsAtPosition(e);if(t)return{type:"stairs",details:{direction:t}};const a=this.getItemAtPosition(e);return a?{type:"item",details:{item:a}}:{type:"none",details:null}}}class M{static SAVE_KEY="terminal-descent-save";static SAVE_VERSION="1.0.0";save(e){try{const t=this.createSaveData(e),a=JSON.stringify(t);return localStorage.setItem(M.SAVE_KEY,a),{success:!0,message:"ゲームを保存しました"}}catch(t){return{success:!1,message:"セーブに失敗しました",error:t instanceof Error?t.message:"Unknown error"}}}load(){try{const e=localStorage.getItem(M.SAVE_KEY);if(!e)return null;const t=JSON.parse(e);return this.isValidSaveData(t)?t:(console.warn("Invalid save data structure detected"),null)}catch(e){return console.error("Failed to load save data:",e),null}}hasSave(){return localStorage.getItem(M.SAVE_KEY)!==null}deleteSave(){try{return localStorage.removeItem(M.SAVE_KEY),{success:!0,message:"セーブデータを削除しました"}}catch(e){return{success:!1,message:"セーブデータの削除に失敗しました",error:e instanceof Error?e.message:"Unknown error"}}}createSaveData(e){return{version:M.SAVE_VERSION,timestamp:Date.now(),player:{position:{...e.player.position},hp:e.player.health,maxHp:e.player.maxHealth,energy:e.player.energy,maxEnergy:e.player.maxEnergy,level:e.player.level,exp:e.player.experience,inventory:[...e.player.inventory],equipment:{...e.player.equipment}},dungeon:{currentFloor:e.dungeonData.currentFloor,seed:0,exploredTiles:[]},gameStats:{turnCount:e.turn,score:e.score,enemiesDefeated:0},metadata:{playTime:0,lastSaveLocation:`floor_${e.dungeonData.currentFloor}_${e.player.position.x}_${e.player.position.y}`}}}isValidSaveData(e){return e&&typeof e.version=="string"&&typeof e.timestamp=="number"&&e.player&&typeof e.player.hp=="number"&&typeof e.player.level=="number"&&e.dungeon&&typeof e.dungeon.currentFloor=="number"&&e.gameStats&&typeof e.gameStats.turnCount=="number"}}class ce{canvas;ctx;config;camera;renderedTexts=[];constructor(e,t){this.canvas=e;const a=e.getContext("2d");if(!a)throw new Error("Failed to get 2D rendering context");this.ctx=a,this.config=t,this.camera={position:{x:0,y:0},viewport:t.viewport,target:{x:0,y:0}},this.setupCanvas()}trackableFillText(e,t,a){this.renderedTexts.push(e),this.ctx.fillText(e,t,a)}getRenderedTexts(){return[...this.renderedTexts]}clearRenderedTexts(){this.renderedTexts=[]}setupCanvas(){this.canvas.width=this.config.viewport.width,this.canvas.height=this.config.viewport.height,this.ctx.imageSmoothingEnabled=!1,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.textBaseline="middle"}clear(){this.ctx.fillStyle=this.config.colors.background,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}updateCamera(e){this.camera.target=e;const t=Math.floor(this.config.viewport.width/this.config.tileSize),a=Math.floor(this.config.viewport.height/this.config.tileSize);this.camera.position={x:e.x-Math.floor(t/2),y:e.y-Math.floor(a/2)}}worldToScreen(e){return{x:(e.x-this.camera.position.x)*this.config.tileSize,y:(e.y-this.camera.position.y)*this.config.tileSize}}isVisible(e){const t=this.worldToScreen(e);return t.x>=-this.config.tileSize&&t.x<this.config.viewport.width&&t.y>=-this.config.tileSize&&t.y<this.config.viewport.height}renderCharacter(e,t,a,s){s&&(this.ctx.fillStyle=s,this.ctx.fillRect(t.x,t.y,this.config.tileSize,this.config.tileSize)),this.ctx.fillStyle=a,this.trackableFillText(e,t.x+this.config.tileSize/2,t.y+this.config.tileSize/2)}renderTile(e){if(!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);if(!e.explored)return;const a=e.visible?e.color:this.config.colors.explored,s=e.visible?e.backgroundColor:void 0;this.renderCharacter(e.char,t,a,s)}renderEntity(e){if(!e.visible||!this.isVisible(e.position))return;const t=this.worldToScreen(e.position);this.renderCharacter(e.char,t,e.color,e.backgroundColor)}render(e){if(this.clear(),this.clearRenderedTexts(),this.ctx.filter="none",e.status==="welcome"){this.renderWelcomeScreen(e);return}const t=e.currentDungeon;this.updateCamera(t.player.position);for(let a=0;a<t.dimensions.height;a++)for(let s=0;s<t.dimensions.width;s++){const i=t.tiles[a][s];i&&this.renderTile(i)}e.status==="tutorial"&&this.renderTutorialHighlights(e),t.entities.filter(a=>a.type!=="player").forEach(a=>this.renderEntity(a)),this.renderEntity(t.player),this.renderUI(e),e.overlay.isVisible&&this.renderOverlay(e),this.updateTestElements(e)}renderUI(e){const t=e.player,a=10,s=20;this.ctx.save(),this.ctx.font=`14px ${this.config.fontFamily}`,this.ctx.textAlign="left",this.ctx.fillStyle=this.config.colors.text;const i=[`${n("level")}: ${t.level}`,`${n("health")}: ${t.health}/${t.maxHealth}`,`${n("energy")}: ${t.energy}/${t.maxEnergy}`,`${n("accessLevel")}: ${t.accessLevel}`,`${n("turn")}: ${e.turn}`];i.forEach((h,p)=>{this.ctx.fillText(h,a,a+p*s)}),e.status==="tutorial"&&this.renderTutorialInfo(e,a,a+i.length*s+20);const o=A(t),r=[`${n("attackPowerLabel")}: ${o.attackPower}`,`${n("defenseLabel")}: ${o.totalDefense}`,`${n("experienceLabel")}: ${t.experience}/${t.experienceToNext}`],c=this.canvas.width-200;if(r.forEach((h,p)=>{this.ctx.fillText(h,c,a+p*s)}),e.messages.length>0){const h=Math.floor(this.canvas.height*.3/s),p=e.messages.slice(-h);p.forEach((u,m)=>{const f=this.canvas.height-a-(p.length-m)*s,D=U(u);this.ctx.fillText(D,a,f)})}this.ctx.restore()}getCameraPosition(){return{...this.camera.position}}screenToWorld(e){return{x:Math.floor(e.x/this.config.tileSize)+this.camera.position.x,y:Math.floor(e.y/this.config.tileSize)+this.camera.position.y}}renderOverlay(e){switch(this.ctx.save(),this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),e.overlay.type){case"inventory":this.renderInventoryOverlay(e);break;case"character":this.renderStatusOverlay(e);break;case"takeoff":this.renderTakeoffOverlay(e);break;case"pauseMenu":this.renderPauseMenuOverlay(e);break}this.ctx.restore()}renderInventoryOverlay(e){const a=e.player.inventory,s=400,i=Math.min(500,a.length*30+100),o=(this.canvas.width-s)/2,r=(this.canvas.height-i)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(o,r,s,i),this.ctx.strokeRect(o,r,s,i),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.trackableFillText(n("inventoryHeader"),o+20,r+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(n("closeInstruction"),o+20,r+50),this.ctx.font="14px Courier New, monospace";const c=r+80;a.length===0?(this.ctx.fillStyle="#666666",this.ctx.fillText(n("emptyInventoryMessage"),o+20,c)):a.forEach((h,p)=>{const u=c+p*25;e.overlay.selectedIndex===p&&(this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.fillRect(o+10,u-15,s-20,20)),this.ctx.fillStyle="#ffff00",this.ctx.fillText(`${p+1}.`,o+20,u),this.ctx.fillStyle=h.color,this.ctx.fillText(h.char,o+50,u),this.ctx.fillStyle="#00ff00",this.ctx.fillText(`${h.name} x${h.quantity}`,o+70,u),this.ctx.font="10px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(h.description,o+70,u+12),this.ctx.font="14px Courier New, monospace"})}renderStatusOverlay(e){const t=e.player,a=400,s=500,i=(this.canvas.width-a)/2,o=(this.canvas.height-s)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(i,o,a,s),this.ctx.strokeRect(i,o,a,s),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.trackableFillText(n("statusHeader"),i+20,o+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(n("statusCloseInstruction"),i+20,o+50),this.ctx.font="14px Courier New, monospace",this.ctx.fillStyle="#00ff00";const r=[{label:n("level"),value:`${t.level}`,color:"#ffff00"},{label:"HP",value:`${t.health}/${t.maxHealth}`,color:t.health<t.maxHealth*.3?"#ff4444":"#00ff00"},{label:n("energy"),value:`${t.energy}/${t.maxEnergy}`,color:t.energy<t.maxEnergy*.3?"#ffaa00":"#00ff00"},{label:"EXP",value:`${t.experience}/${t.experienceToNext}`,color:"#88ff88"},{label:n("accessLevel"),value:`${t.accessLevel}`,color:"#00ffff"},{label:n("turn"),value:`${e.turn}`,color:"#888888"},{label:"SCORE",value:`${e.score}`,color:"#ffff00"}],c=o+80;r.forEach((h,p)=>{const u=c+p*25;this.ctx.fillStyle="#00ff00",this.trackableFillText(`${h.label}:`,i+20,u),this.ctx.fillStyle=h.color,this.trackableFillText(h.value,i+150,u)}),this.ctx.font="16px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.trackableFillText(n("equipmentHeader"),i+20,o+260),this.renderEquipmentDetails(t,i+20,o+285)}renderEquipmentDetails(e,t,a){this.ctx.font="12px Courier New, monospace";const s=N(e),i=[{key:"weapon",label:n("weaponSlot")},{key:"head",label:n("headSlot")},{key:"chest",label:n("chestSlot")},{key:"legs",label:n("legsSlot")},{key:"feet",label:n("feetSlot")},{key:"shield",label:n("shieldSlot")}];let o=a;i.forEach(c=>{const h=s[c.key];this.ctx.fillStyle="#00ff00",this.trackableFillText(`${c.label}:`,t,o),this.ctx.fillStyle=h!==n("noItem")?"#ffff00":"#666666",this.trackableFillText(h,t+60,o),o+=15}),o+=10,this.ctx.fillStyle="#00ff00",this.trackableFillText(n("equipmentStatsHeader"),t,o),o+=20;const r=A(e);this.ctx.fillStyle="#88ff88",this.trackableFillText(`${n("totalDefenseLabel")}: ${r.totalDefense}`,t,o),o+=15,this.ctx.fillStyle="#ff8888",this.trackableFillText(`${n("attackPowerLabel")}: ${r.attackPower}`,t,o)}renderTakeoffOverlay(e){const t=e.player,a=["mainHand","head","chest","legs","feet","offHand"],s=[];if(a.forEach(u=>{const m=t.equipment[u];m&&s.push({slot:u,item:m,displayName:d(m)})}),s.length===0)return;const i=400,o=Math.min(400,s.length*30+150),r=(this.canvas.width-i)/2,c=(this.canvas.height-o)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.fillRect(r,c,i,o),this.ctx.strokeRect(r,c,i,o),this.ctx.font="16px Courier New, monospace",this.ctx.textAlign="left",this.ctx.fillStyle="#00ff00",this.ctx.fillText(n("takeoffHeader"),r+20,c+30),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.fillText(n("takeoffInstruction"),r+20,c+50),this.ctx.font="14px Courier New, monospace";const h=e.overlay.selectedIndex||0;s.forEach((u,m)=>{const f=c+80+m*25,D=m===h;D&&(this.ctx.fillStyle="#333333",this.ctx.fillRect(r+15,f-12,i-30,20)),this.ctx.fillStyle="#00ff00";const F=this.getSlotDisplayName(u.slot);this.ctx.fillText(`${F}:`,r+20,f),this.ctx.fillStyle=D?"#ffff00":"#ffffff";const R=u.item.char||"?";this.ctx.fillText(`${R} ${u.displayName}`,r+100,f)}),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888";const p=c+o-30;this.ctx.fillText(n("takeoffControls"),r+20,p)}renderPauseMenuOverlay(e){this.applyGlassEffect();const t=300,a=250,s=(this.canvas.width-t)/2,i=(this.canvas.height-a)/2;this.ctx.fillStyle="#1a1a1a",this.ctx.fillRect(s,i,t,a),this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.strokeRect(s,i,t,a),this.ctx.font="bold 18px Courier New, monospace",this.ctx.fillStyle="#00ff00",this.ctx.textAlign="center",this.ctx.fillText(n("pauseMenuTitle"),s+t/2,i+40);const o=[{key:"continueGame",index:0},{key:"saveGame",index:1},{key:"loadGame",index:2},{key:"languageSwitch",index:3},{key:"returnToTitle",index:4}],r=i+80,c=30;this.ctx.font="14px Courier New, monospace",this.ctx.textAlign="left",o.forEach((p,u)=>{const m=r+u*c,f=e.overlay.selectedIndex===u;f&&(this.ctx.fillStyle="#003300",this.ctx.fillRect(s+10,m-18,t-20,22),this.ctx.fillStyle="#00ff00",this.ctx.fillText(">",s+20,m)),this.ctx.fillStyle=f?"#ffffff":"#cccccc",this.ctx.fillText(n(p.key),s+40,m)}),this.ctx.font="12px Courier New, monospace",this.ctx.fillStyle="#888888",this.ctx.textAlign="center";const h=i+a-20;this.ctx.fillText("↑↓: Select  Enter: Confirm  ESC: Close",s+t/2,h)}getSlotDisplayName(e){return{mainHand:n("weaponSlot"),head:n("headSlot"),chest:n("chestSlot"),legs:n("legsSlot"),feet:n("feetSlot"),offHand:n("shieldSlot")}[e]||e}resize(e){this.config.viewport=e,this.canvas.width=e.width,this.canvas.height=e.height,this.setupCanvas()}renderWelcomeScreen(e){const t=this.canvas.width/2,a=this.canvas.height/2;if(e.welcome.showPrologue){this.renderPrologue();return}this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize*2}px ${this.config.fontFamily}`,this.ctx.textAlign="center",this.ctx.fillText(n("welcomeTitle"),t,a-120),this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.fillText(n("welcomeSubtitle"),t,a-50);const s=P("menuOptions");[{key:"start",text:s[0]},{key:"tutorial",text:s[1]},{key:"settings",text:s[2]}].forEach((o,r)=>{const c=a+r*30,h=e.welcome.selectedOption===o.key;if(this.ctx.fillStyle=h?this.config.colors.player:this.config.colors.text,h){const p=this.ctx.measureText(o.text).width,u=20;this.ctx.fillText(">",t-p/2-u,c),this.ctx.fillText("<",t+p/2+u,c)}this.ctx.fillText(o.text,t,c)}),this.ctx.fillStyle=this.config.colors.explored,this.ctx.fillText(n("menuInstructions"),t,a+120),e.welcome.selectedOption||(e.welcome.selectedOption="start"),this.updateTestElements(e)}renderPrologue(){const e=this.canvas.width/2,t=this.canvas.height/2;this.ctx.fillStyle=this.config.colors.text,this.ctx.font=`${this.config.fontSize}px ${this.config.fontFamily}`,this.ctx.textAlign="center",P("prologueLines").forEach((s,i)=>{this.ctx.fillText(s,e,t-100+i*25)})}renderTutorialHighlights(e){const t=e.interactiveTutorial;t&&t.isActive&&t.currentStep.targetPosition&&this.renderTargetHighlight(t.currentStep.targetPosition)}renderTutorialInfo(e,t,a){const s=e.interactiveTutorial;if(!s||!s.isActive)return;const i=20,o=[`チュートリアル: ${s.currentStep.title}`,s.currentStep.description,`ステップ: ${s.progress.currentStep}/${s.progress.totalSteps}`];this.ctx.fillStyle="#ffff00",this.ctx.font=`16px ${this.config.fontFamily}`,o.forEach((r,c)=>{this.ctx.fillText(r,t,a+c*i)})}renderTargetHighlight(e){const t=this.worldToScreen(e);this.ctx.fillStyle="rgba(0, 255, 0, 0.3)",this.ctx.fillRect(t.x,t.y,this.config.tileSize,this.config.tileSize),this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.strokeRect(t.x,t.y,this.config.tileSize,this.config.tileSize)}updateTestElements(e){try{const t=document.getElementById("test-game-status");t&&(t.textContent=e.status,t.setAttribute("data-game-status",e.status));const a=document.getElementById("test-tutorial-status");if(a){const c=e.tutorial.isActive?`active-${e.tutorial.currentStep}`:"inactive";a.textContent=c,a.setAttribute("data-tutorial-status",c)}const s=document.getElementById("test-start-button"),i=document.getElementById("test-tutorial-button"),o=document.getElementById("test-settings-button");s&&i&&o&&([s,i,o].forEach(c=>{c.removeAttribute("data-selected")}),e.welcome.selectedOption==="start"?s.setAttribute("data-selected","true"):e.welcome.selectedOption==="tutorial"?i.setAttribute("data-selected","true"):e.welcome.selectedOption==="settings"&&o.setAttribute("data-selected","true"));const r=document.getElementById("test-equipment-section");if(r){const c=e.overlay.type==="character"&&e.overlay.isVisible;if(r.setAttribute("data-visible",c.toString()),e.player?.equipment){const h=JSON.stringify({mainHand:e.player.equipment.mainHand?.nameKey||"none",head:e.player.equipment.head?.nameKey||"none",chest:e.player.equipment.chest?.nameKey||"none",legs:e.player.equipment.legs?.nameKey||"none",feet:e.player.equipment.feet?.nameKey||"none",offHand:e.player.equipment.offHand?.nameKey||"none"});r.setAttribute("data-equipment",h)}}}catch{console.debug("Test elements not found, skipping update")}}applyGlassEffect(){this.ctx.filter="blur(6px) brightness(0.6)";const e=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);this.ctx.putImageData(e,0,0),this.ctx.filter="none"}}class he{gameState;playerController;dungeonGenerator;dungeonManager;inventoryManager;overlayManager;tutorialManager;interactiveTutorialManager;unifiedTutorialSystem;uiManager;inputManager;gameStateManager;combatManager;equipmentManager;movementManager;floorManager;saveManager;renderer;lastUpdateTime;animationFrameId;constructor(e){this.playerController=new V({x:0,y:0}),this.dungeonGenerator=new k({width:80,height:50},1),this.dungeonManager=new Y,this.gameStateManager=new ie(this.playerController,this.dungeonManager),this.inventoryManager=null;const t={tileSize:16,fontSize:14,fontFamily:"Courier New, monospace",viewport:{width:e.width,height:e.height},colors:{background:"#000000",text:"#00ff00",player:"#00ff00",enemy:"#ff4444",wall:"#444444",floor:"#666666",explored:"#333333",visible:"#ffffff"}};this.renderer=new ce(e,t),this.gameState=this.gameStateManager.createInitialGameState(),this.inventoryManager=new x(this.gameState,this.playerController,a=>this.addMessage(a),()=>this.processTurn(),a=>this.handleTutorialProgress(a),a=>this.equipmentManager.equipItemFromInventory(a),()=>this.equipmentManager.getCurrentEquipmentDisplay(),a=>this.addMessages(a)),this.overlayManager=new z(this.gameState,this.playerController,a=>this.useItem(a),a=>this.equipmentManager.removeEquipment(a),a=>this.addMessage(a)),this.tutorialManager=new j(this.gameState,a=>this.addMessage(a),a=>this.playerController.setPosition(a)),this.interactiveTutorialManager=new J,this.interactiveTutorialManager.setTutorialManager(this.tutorialManager),this.unifiedTutorialSystem=new ee,this.unifiedTutorialSystem.setCallbacks({addMessage:a=>this.addMessage(a),updatePlayerPosition:a=>this.playerController.setPosition(a),processTurn:()=>this.processTurn(),setGameStatus:a=>this.gameState.status=a,openDoor:a=>this.tutorialManager.openDoorForStep(a),openPlayerSurroundingDoors:()=>this.openPlayerSurroundingDoors()}),this.uiManager=new te(this.gameState,a=>this.addMessage(a),()=>this.startGame(),()=>this.startTutorial()),this.combatManager=new oe(this.gameState,this.playerController,a=>this.addMessage(a),a=>this.movementManager.getEnemyAt(a),()=>this.processTurn(),a=>this.handleTutorialProgress(a),()=>{this.gameState.status==="tutorial"&&(this.unifiedTutorialSystem.markCombatCompleted(),this.unifiedTutorialSystem.updateProgress(this.gameState))}),this.equipmentManager=new re(this.gameState,this.playerController,a=>this.addMessage(a)),this.movementManager=new ne(this.gameState,this.playerController,a=>this.addMessage(a),()=>this.processTurn(),a=>this.handleTutorialProgress(a)),this.floorManager=new le(this.gameState,this.playerController,this.dungeonManager,a=>this.addMessage(a),()=>this.processTurn(),()=>this.combatManager.isAttackMode(),()=>this.combatManager.toggleAttackMode(),a=>this.handleTutorialProgress(a),this.interactiveTutorialManager),this.saveManager=new M,this.inputManager=new se(e,this.gameState,a=>this.handleDirectionalInput(a),()=>this.handleToggleAttackMode(),()=>this.handleInteract(),()=>this.handleToggleInventory(),()=>this.handleToggleStatus(),()=>this.overlayManager.toggleTakeoffOverlay(),a=>this.handleItemAction(a),()=>this.togglePause(),()=>this.uiManager.showMenu(),()=>this.uiManager.handleLanguageSwitch(),()=>this.handleEquipmentToggle()),this.lastUpdateTime=0}handleDirectionalInput(e){if(this.gameState.status==="welcome"){this.handleWelcomeNavigation(e);return}if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.handlePauseMenuNavigation(e);return}if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.overlayManager.isVisible()){this.overlayManager.handleNavigation(e);return}if(this.gameState.status==="tutorial"){if(this.combatManager.isAttackMode()&&!this.interactiveTutorialManager.isActionAllowed("attack")){this.addMessage("このチュートリアルステップでは攻撃はできません。");return}if(!this.combatManager.isAttackMode()&&!this.interactiveTutorialManager.isActionAllowed("move")){this.addMessage("このチュートリアルステップでは移動はできません。");return}}this.combatManager.isAttackMode()?this.combatManager.handleAttack(e):(this.movementManager.handlePlayerMove(e),this.gameState.status==="tutorial"&&this.unifiedTutorialSystem.updateProgress(this.gameState))}}handleInteract(){if(this.gameState.status==="welcome"){this.uiManager.handleWelcomeInteract();return}if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.handleMenuSelect();return}if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.overlayManager.isVisible()){this.overlayManager.handleInteraction();return}if(this.gameState.status==="tutorial"&&!this.interactiveTutorialManager.isActionAllowed("pickup_item")){this.addMessage("このチュートリアルステップではアイテムの取得はできません。");return}this.floorManager.handleInteract(),this.gameState.status==="tutorial"&&this.unifiedTutorialSystem.updateProgress(this.gameState)}}handleTutorialProgress(e){this.gameState.status==="tutorial"&&(this.unifiedTutorialSystem.updateProgress(this.gameState),this.unifiedTutorialSystem.markActionCompleted(e),e==="movement"&&this.tutorialManager.updateProgress(e))}showInventory(){this.inventoryManager.showInventory()}useItem(e){this.inventoryManager.useItem(e)&&this.gameState.status==="tutorial"&&(this.unifiedTutorialSystem.markItemUsed(),this.unifiedTutorialSystem.updateProgress(this.gameState))}processTurn(){this.gameState.turn++,this.processEnemies(),this.checkGameState()}processEnemies(){const e=this.gameState.currentDungeon,t=this.gameState.player.position;e.entities.filter(a=>a.type==="enemy").forEach(a=>{const s=Math.abs(a.position.x-t.x)+Math.abs(a.position.y-t.y);if(s<=3)if(s===1){const i="damage"in a?a.damage:10,o=this.playerController.getTotalDefense(),r=Math.max(1,i-o);this.playerController.takeDamage(r),this.gameState.player.health=this.playerController.getPlayer().health,this.gameState.currentDungeon.player.health=this.gameState.player.health;const c=this.playerController.getPlayer().health,h=this.playerController.getPlayer().maxHealth;o>0?this.addMessage(n("enemyAttackWithDefense").replace("{{enemy}}",w(a)).replace("{{damage}}",r.toString()).replace("{{defense}}",o.toString()).replace("{{health}}",Math.max(0,c).toString()).replace("{{maxHealth}}",h.toString())):this.addMessage(n("enemyAttackNormal").replace("{{enemy}}",w(a)).replace("{{damage}}",r.toString()).replace("{{health}}",Math.max(0,c).toString()).replace("{{maxHealth}}",h.toString())),this.playerController.isDead()&&(this.gameState.status="gameOver",this.addMessage(`${n("youDied")} ${n("gameOver")}`))}else{const i=Math.sign(t.x-a.position.x),o=Math.sign(t.y-a.position.y),r={x:a.position.x+i,y:a.position.y+o};this.isValidEnemyMove(r)&&(a.position=r)}})}isValidEnemyMove(e){const t=this.gameState.currentDungeon;return!y(e,t.dimensions)||t.tiles[e.y][e.x].blocking?!1:!t.entities.find(i=>i.position.x===e.x&&i.position.y===e.y&&i.blocking&&i.type!=="player")}checkGameState(){if(this.playerController.isDead()){this.gameState.status="gameOver",this.addMessage(n("gameOver"));return}if(this.gameState.currentDungeon.entities.filter(t=>t.type==="enemy").length===0&&!this.gameState.levelCleared){this.gameState.score+=100,this.gameState.levelCleared=!0,this.addMessage(n("levelCleared"));const t=this.gameState.dungeonData.currentFloor,a=this.gameState.dungeonData.maxFloor;t<a?(this.addExitStairs(),this.addMessage(n("stairsAppeared"))):this.addMessage(n("allFloorsCleared"))}}addExitStairs(){const e=this.gameState.currentDungeon,t=e.rooms;if(t.length===0)return;const a=t[t.length-1],s={x:a.position.x+Math.floor(a.dimensions.width/2),y:a.position.y+Math.floor(a.dimensions.height/2)};if(e.entities.find(r=>r.position.x===s.x&&r.position.y===s.y)){const r=[{x:s.x+1,y:s.y},{x:s.x-1,y:s.y},{x:s.x,y:s.y+1},{x:s.x,y:s.y-1}];for(const c of r)if(c.x>=a.position.x&&c.x<a.position.x+a.dimensions.width&&c.y>=a.position.y&&c.y<a.position.y+a.dimensions.height&&!e.entities.find(p=>p.position.x===c.x&&p.position.y===c.y)){s.x=c.x,s.y=c.y;break}}const o=e.tiles[s.y][s.x];o&&(o.type="stairs",o.char=">",o.color="#ffff00",o.backgroundColor="#000000",o.blocking=!1)}togglePause(){if(this.gameState.overlay.type==="pauseMenu"&&this.gameState.overlay.isVisible){this.gameState.overlay.isVisible=!1,this.gameState.overlay.type="none",this.gameState.status="playing";return}this.overlayManager.handlePauseOrClose()||(console.log("No overlay, proceeding with pause toggle"),this.gameState.status==="playing"&&(this.gameState.status="paused",this.gameState.overlay.type="pauseMenu",this.gameState.overlay.isVisible=!0,this.gameState.overlay.selectedIndex=0))}handleMenuSelect(){if(this.gameState.overlay.type!=="pauseMenu"||!this.gameState.overlay.isVisible)return;switch(this.gameState.overlay.selectedIndex){case 0:this.togglePause();break;case 1:this.saveGame();break;case 2:this.loadGame();break;case 3:this.uiManager.handleLanguageSwitch();break;case 4:this.returnToTitle();break}}handlePauseMenuNavigation(e){const a=this.gameState.overlay.selectedIndex??0;e==="south"?this.gameState.overlay.selectedIndex=Math.min(a+1,4):e==="north"&&(this.gameState.overlay.selectedIndex=Math.max(a-1,0))}addMessage(e){const t=typeof e=="string"?H(e):e;this.gameState.messages.push(t),this.gameState.messages.length>5&&this.gameState.messages.shift()}addMessages(e){this.gameState.messages=[],e.forEach(t=>{const a=typeof t=="string"?H(t):t;this.gameState.messages.push(a)})}gameLoop=e=>{const t=e-this.lastUpdateTime;this.update(t),this.render(),this.lastUpdateTime=e,this.animationFrameId=requestAnimationFrame(this.gameLoop)};update(e){}render(){if(this.gameState.status==="tutorial"){const e=this.unifiedTutorialSystem.getState(),t=e.currentStep;if(console.log("Tutorial render debug:",{tutorialState:e,currentStep:t,isActive:e.isActive,currentStepIndex:e.currentStepIndex,totalSteps:e.totalSteps}),t&&e.isActive){const a={id:t.id,title:t.title,description:t.description};t.targetPosition&&(a.targetPosition=t.targetPosition),this.gameState.interactiveTutorial={currentStep:a,progress:{currentStep:e.currentStepIndex,totalSteps:e.totalSteps,percentage:Math.round(e.currentStepIndex/e.totalSteps*100)},isActive:!0},console.log("Tutorial render state SUCCESS:",{stepInfo:a,isActive:e.isActive,targetPosition:t.targetPosition})}else console.log("Tutorial render FAILED: currentStep is undefined or tutorial not active")}else delete this.gameState.interactiveTutorial;this.renderer.render(this.gameState)}start(){this.addMessage(n("searchingForExit")),this.lastUpdateTime=performance.now(),this.animationFrameId=requestAnimationFrame(this.gameLoop)}stop(){this.animationFrameId!==void 0&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=void 0)}reset(){this.stop(),this.playerController.reset({x:0,y:0}),this.gameState=this.gameStateManager.createInitialGameState()}getGameState(){return{...this.gameState}}getPlayerStats(){return this.playerController.getStats()}get inputHandler(){return this.inputManager.getInputHandler()}getRenderer(){return this.renderer}pause(){this.gameState.status==="playing"&&(this.gameState.status="paused",this.addMessage(n("gamePaused")))}resume(){this.gameState.status==="paused"&&(this.gameState.status="playing",this.addMessage(n("gameResumed")))}movePlayer(e){this.movementManager.handlePlayerMove(e)}togglePauseTest(){this.togglePause()}setOverlayStateTest(e,t,a=0){this.gameState.overlay={type:e,isVisible:t,selectedIndex:a}}navigateInventoryTest(e){this.overlayManager.handleNavigation(e)}handleDirectionalInputTest(e){this.handleDirectionalInput(e)}handleOverlayInteractionTest(){this.overlayManager.handleInteraction()}toggleAttack(){this.combatManager.toggleAttackMode()}isAttackMode(){return this.combatManager.isAttackMode()}showInventoryTest(){this.showInventory()}useItemTest(e){this.useItem(e)}addItemToPlayer(e){return this.playerController.addItem(e)}attackEnemy(e){this.combatManager.handleAttack(e)}forceMissAttack(e){this.playerController.getPosition(),this.playerController.move(e),this.addMessage(g("noEnemyInThatDirection")),this.combatManager.disableAttackMode(),this.addMessage(g("movementMode"))}getPlayerController(){return this.playerController}toggleTakeoffOverlayTest(){this.overlayManager.toggleTakeoffOverlay()}handleTakeoffInteractionTest(){this.overlayManager.handleInteraction()}navigateTakeoffTest(e){this.overlayManager.handleNavigation(e)}testHandleInteract(){this.handleInteract()}testCastEntityToItem(e){return e}testShowInventory(){this.showInventory()}testUseItem(e){const t=this.playerController.getPlayer().inventory;if(e<0||e>=t.length){this.addMessage(g("noItemInSlot",{slot:(e+1).toString()}));return}const a=t[e];this.inventoryManager.applyItemEffect(a)&&(this.playerController.removeItem(a.id,1),this.gameState.status==="tutorial"&&(this.unifiedTutorialSystem.markItemUsed(),this.unifiedTutorialSystem.updateProgress(this.gameState)))}testApplyItemEffect(e){return this.inventoryManager.applyItemEffect(e)}testTakeDamage(e){this.playerController.takeDamage(e),this.gameState.player.health=this.playerController.getPlayer().health}handleWelcomeNavigation(e){const t=["start","tutorial","settings"],a=this.gameState.welcome.selectedOption?t.indexOf(this.gameState.welcome.selectedOption):0;let s=a;e==="north"?s=Math.max(0,a-1):e==="south"&&(s=Math.min(t.length-1,a+1)),this.gameState.welcome.selectedOption=t[s]}startGame(){this.gameState.status="playing",this.addMessage(n("welcomeToFacility"))}returnToTitle(){this.gameState.status="title",this.gameState.overlay.type="none",this.gameState.overlay.isVisible=!1,this.gameState.overlay.selectedIndex=0,this.gameState.messages=[],this.interactiveTutorialManager&&this.interactiveTutorialManager.reset()}startTutorial(){console.log("startTutorial() called - setting up tutorial...");const e=this.playerController.getPlayerDirect(),t=this.dungeonManager.generateTutorialDungeon(e);this.gameState.currentDungeon=t,this.gameState.player.position={...t.player.position},this.playerController.setPosition(t.player.position),console.log(`Player position synced to (${t.player.position.x}, ${t.player.position.y})`),this.gameState.status="tutorial",console.log("Game status set to tutorial"),this.tutorialManager.startTutorial(),this.unifiedTutorialSystem.start();const a=this.unifiedTutorialSystem.getStepInfo();this.addMessage(`チュートリアル: ${a.title}`),this.addMessage(a.description),console.log("Tutorial setup complete:",{gameStatus:this.gameState.status,tutorialSystemActive:this.unifiedTutorialSystem.getState().isActive,currentStep:a})}startTutorialForTesting(){this.startTutorial()}openPlayerSurroundingDoors(){const e=this.gameState.player.position,t=this.gameState.currentDungeon.tiles;console.log("openPlayerSurroundingDoors called, player at:",e);const a=[];for(let s=1;s<=10;s++){const i={x:e.x+s,y:e.y};if(t[i.y]&&t[i.y][i.x]){const o=t[i.y][i.x];console.log(`Checking tile at (${i.x}, ${i.y}): type=${o.type}, char="${o.char}", blocking=${o.blocking}`),o.blocking&&a.push(i)}}if(console.log(`Found ${a.length} blocked paths:`,a),a.length>0){const s=a[0];console.log(`Opening door at (${s.x}, ${s.y})`),t[s.y][s.x]={position:s,type:"floor",char:".",color:"#666666",backgroundColor:"#000000",blocking:!1,explored:!1,visible:!1},console.log(`Door opened at (${s.x}, ${s.y}) - movement tutorial complete`)}else console.log("No blocked paths found in front of player");console.log("Movement tutorial door opening complete")}skipTutorial(){this.tutorialManager.skipTutorial()}skipTutorialAndStartGame(){this.tutorialManager.skipTutorial(),this.startGame()}handleInteractTest(){this.handleInteract()}testGetPlayer(){return this.playerController.getPlayer()}testSetPlayerEnergy(e){this.playerController.getPlayerDirect().energy=e,this.gameState.player.energy=e}testSetPlayerHealth(e){this.playerController.getPlayerDirect().health=e,this.gameState.player.health=e,this.gameState.currentDungeon.player.health=e}getCurrentTutorialInfo(){return this.gameState.status!=="tutorial"?null:this.interactiveTutorialManager.getCurrentStepInfo()}getTutorialProgress(){return this.gameState.status!=="tutorial"?null:this.interactiveTutorialManager.getProgress()}isTutorialCompleted(){return this.unifiedTutorialSystem.state.isCompleted}getUnifiedTutorialSystem(){return this.unifiedTutorialSystem}getInteractiveTutorialManager(){return this.interactiveTutorialManager}handleToggleAttackMode(){if(this.gameState.status==="tutorial"&&!this.unifiedTutorialSystem.isActionAllowed("attack")){this.addMessage("このチュートリアルステップでは攻撃モードに入れません。");return}this.combatManager.toggleAttackMode()}handleToggleInventory(){if(this.gameState.status==="tutorial"&&!this.unifiedTutorialSystem.isActionAllowed("inventory")){this.addMessage("このチュートリアルステップではインベントリを開けません。");return}this.overlayManager.toggleInventoryOverlay(),this.gameState.status==="tutorial"&&this.unifiedTutorialSystem.updateProgress(this.gameState)}handleToggleStatus(){if(this.gameState.status==="tutorial"&&!this.unifiedTutorialSystem.isActionAllowed("character_status")){this.addMessage("このチュートリアルステップではステータスを開けません。");return}this.overlayManager.toggleStatusOverlay(),this.gameState.status==="tutorial"&&(this.unifiedTutorialSystem.markStatusViewed(),this.unifiedTutorialSystem.updateProgress(this.gameState))}handleEquipmentToggle(){if(this.gameState.status==="tutorial"&&!this.unifiedTutorialSystem.isActionAllowed("equipment")){this.addMessage("このチュートリアルステップでは装備を変更できません。");return}this.gameState.status==="tutorial"&&(this.unifiedTutorialSystem.markEquipmentToggled(),this.unifiedTutorialSystem.updateProgress(this.gameState),this.addMessage("装備を着脱しました！"))}handleItemAction(e){if(!(this.gameState.status!=="playing"&&this.gameState.status!=="tutorial")){if(this.gameState.status==="tutorial"&&!this.interactiveTutorialManager.isActionAllowed("use_item")){this.addMessage("このチュートリアルステップではアイテムを使用できません。");return}this.overlayManager.isType("inventory")?this.overlayManager.useItemFromOverlay(e):this.useItem(e),this.gameState.status==="tutorial"&&this.unifiedTutorialSystem.updateProgress(this.gameState)}}saveGame(){const e=this.saveManager.save(this.gameState);e.success?this.addMessage(e.message):this.addMessage(`セーブエラー: ${e.error}`)}loadGame(){const e=this.saveManager.load();if(!e){this.addMessage("セーブデータが見つかりません");return}try{this.gameState.player.position=e.player.position,this.gameState.player.health=e.player.hp,this.gameState.player.maxHealth=e.player.maxHp,this.gameState.player.energy=e.player.energy,this.gameState.player.maxEnergy=e.player.maxEnergy,this.gameState.player.level=e.player.level,this.gameState.player.experience=e.player.exp,this.gameState.player.inventory=e.player.inventory,this.gameState.player.equipment=e.player.equipment,this.gameState.dungeonData.currentFloor=e.dungeon.currentFloor,this.gameState.turn=e.gameStats.turnCount,this.gameState.score=e.gameStats.score;const t=this.dungeonGenerator.generate(this.gameState.player);t.player=this.gameState.player,this.gameState.currentDungeon=t,this.playerController.setPosition(e.player.position),this.addMessage("ゲームをロードしました")}catch(t){this.addMessage("ロードエラー: データが破損しています"),console.error("Load error:",t)}}hasSaveData(){return this.saveManager.hasSave()}deleteSaveData(){const e=this.saveManager.deleteSave();this.addMessage(e.message)}getPlayerPosition(){return{...this.gameState.player.position}}getInventoryItemCount(){return this.gameState.player.inventory.length}isPaused(){return this.gameState.status==="paused"}getCurrentOverlay(){return this.gameState.overlay.isVisible?this.gameState.overlay.type:null}getTutorialObservable(){if(this.gameState.status!=="tutorial")return null;const e=this;return this.interactiveTutorialManager,{getTutorialState:()=>{const t=this.unifiedTutorialSystem.state;return{currentStepId:t.currentStepId,currentStepTitle:t.currentStep?.title||"",currentStepDescription:t.currentStep?.description||"",completedSteps:this.unifiedTutorialSystem.getCompletedSteps(),isCompleted:t.isCompleted,isCurrentStepCompleted:t.currentStep?this.unifiedTutorialSystem.isStepCompleted(t.currentStepId):!1}},isActionAllowed:t=>this.unifiedTutorialSystem.isActionAllowed(t),isPositionPassable:(t,a)=>{const s=e.gameState.currentDungeon.tiles,i={x:t,y:a},o={width:s[0]?.length||0,height:s.length};return y(i,o)?!s[a][t].blocking:!1}}}}document.addEventListener("DOMContentLoaded",()=>{(()=>{const a=document.getElementById("gameTitle"),s=document.getElementById("gameSubtitle"),i=document.getElementById("gameInfo");a&&(a.textContent=n("gameTitle")),s&&(s.textContent=n("gameSubtitle")),i&&(i.textContent=n("controls"))})();const e=document.getElementById("gameCanvas");if(!e){console.error("Could not find game canvas element");return}const t=new he(e);t.start(),window.game=t,window.gameState=()=>t.getGameState(),window.getUnifiedTutorialSystem=()=>t.getUnifiedTutorialSystem(),window.getTutorialCoordinates=()=>t.getUnifiedTutorialSystem()?.getCoordinateInfo?.(),window.localization=C,window.renderer={getRenderedTexts:()=>{const a=t.getRenderer();return a?a.getRenderedTexts():[]}},document.addEventListener("keydown",a=>{a.ctrlKey&&a.key==="t"&&(a.preventDefault(),t.getGameState().status==="tutorial"&&(console.log("Skipping tutorial (Ctrl+T)"),t.skipTutorial()))}),console.log("Terminal Descent initialized successfully"),console.log("Use WASD keys to move, F to interact, ESC to pause"),console.log("Ctrl+T to skip tutorial during tutorial (or ESC -> pause menu -> return to title)")});
